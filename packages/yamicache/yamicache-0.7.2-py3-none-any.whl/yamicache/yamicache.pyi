import collections
from _typeshed import Incomplete
from typing import Any, ItemsView, KeysView, NamedTuple, Optional, ValuesView

class CachedItem(NamedTuple):
    value: Incomplete
    timeout: Incomplete
    time_added: Incomplete

class Cache(collections.abc.MutableMapping):
    counters: Incomplete
    def __init__(self, hashing: bool = ..., key_join: str = ..., debug: bool = ..., prefix: Optional[str] = ..., quiet: bool = ..., default_timeout: int = ..., gc_thread_wait: bool = ...) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Any) -> Any: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def clear(self) -> None: ...
    def keys(self) -> KeysView: ...
    def items(self) -> ItemsView: ...
    def values(self) -> ValuesView: ...
    def pop(self, key: Any) -> Any: ...
    def popitem(self) -> Any: ...
    def dump(self) -> str: ...
    def collect(self, since: Optional[float] = ...) -> None: ...
    def clear_cache(self): ...
    def cached(self, key: str = ..., timeout: Optional[int] = ...): ...
    def serialize(self, filename: str) -> None: ...
    def deserialize(self, filename: str) -> None: ...

def override_timeout(cache_obj: Cache, timeout: int): ...
def nocache(cache_obj: Cache): ...
