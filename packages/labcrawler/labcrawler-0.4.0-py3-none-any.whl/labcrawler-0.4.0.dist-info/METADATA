Metadata-Version: 2.1
Name: labcrawler
Version: 0.4.0
Summary: Analysis tool for GitLab project and CI configurations
Author-email: Steampunk Wizard <labcrawler@steampunkwizard.ca>
License: MIT
Requires-Python: >=3.6.5
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: platformdirs (>=3.2.0)
Requires-Dist: wizlib (>=0.2.2)
Requires-Dist: meltano (>=2.17.1)
Requires-Dist: pandas (>=2.0.0)


Summary
-------

LabCrawler by [Francis Potter](https://www.linkedin.com/in/francispotter/) using [Meltano](https://meltano.com/) and [Pandas](https://pandas.pydata.org/).

Examine a set of GitLab projects for usage of governance processes such as CI/CD, merge requests, merge request approvals, security scanning, and code review. This tool pulls project and group configuration and recent history data from GitLab and returns it in a CSV that can be imported to a spreadsheet.

Labcrawler will ultimately assume the use of the GitLab "ultimate" paid tier, as it will look for configuration settings such as merge request approvals, which are only available at that level.

Remember, in GitLab, a "group" is like a portfolio or folder containing projects and subgroups. Currently, Labcrawler doesn't actually "crawl" - it only surveys projects that live directly in the designated groups.

Installation
------------

Install LabCrawler using `pipx`. [Install `pipx` first if necessary.](https://pypa.github.io/pipx/#install-pipx)

```
pipx install labcrawler
```

Note that LabCrawler installs its own dependencies, including Meltano, which might override the `meltano` command for an existing Meltano installation. It ought to work fine, but might contain a different version of Meltano itself.

From your GitLab instance, you will also need a [personal access token](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html) or [group access token](https://docs.gitlab.com/ee/user/group/settings/group_access_tokens.html) with API read access to the group(s) you wish to query. LabCrawler supports 2 options for token storage:

- For desktop use: Store the token in a password manager, then copy-and-paste it into LabCrawler when requested.
- For offline automated operation: Make the token available in the `'GITLAB_PRIVATE_TOKEN` environment variable using an environment manager such as a `.env` file or your CI platform's variables.


Upgrade
-------

Later, to upgrade to the latest version of LabCrawler:

```
pipx upgrade labcrawler
```

Check the release notes for the new version - it might be necessary to run `labcrawler init` again to reload the Meltano tap and/or target.

Initialization
--------------

LabCrawler maintains a "workspace" for its config file and everything required for Meltano to operate. To set up the workspace, type:

```
labcrawler init
```

The workspace should be good for the life of LabCrawler, though in rare cases a LabCrawler upgrade might require you to recreate it, so check the release notes when upgrading.

The output from the `init` command includes the location of the LabCrawler config file (`labcrawler.json`). Edit the file with the following information:

- `api_url` - URL to the root of the GitLab API, including `https://`.
- `groups` - All the groups containing projects that you wish to examine. LabCrawler will not examine subgroups, so include them too.
- `output_dir` - Directory to store the CSV files that are generated; the default is a logical location based on the OS and might be sufficient.

Use
---

LabCrawler loads data from the GitLab API into CSV files, which can then be examined using a spreadsheet application, independent script, or LabCrawler's built-in `labcrawler analyze` command.

Generating the CSV files requires two phases:

- `labcrawler melt` - Load all the data that is handled directly by Meltano. The CSV files generated by Meltano will contain the verbatim fields from the GitLab REST API, so refer to the [GitLab API Documentation] to understand the fields. Data loaded includes:
    - `groups`
    - `projects`
    - `branches`
    - `merge_requests`
    - `project_members`
    - `group_members`
    - `users`
- `labcrawler load` - Load LabCrawler-specific data, include CI configuration includes and committers. Data loaded includes:
    - `ci_config_committers` - Names and email addresses of developers who have committed changes to the main GitLab CI configuration file in each project's repo. The location of the CI configuration file might be from the `ci_config_path` setting on the project, or it's `.gitlab-ci.yml`. Committer information comes from the `git blame` command so only includes the last developer to touch each line of the configuration.
    - `ci_config_includes` - 

    *TODO: Leftoff here*

Analysis
--------

Then you may examine the results using `pandas` in the Python shell. We've provided a useful way to do so with the `analyze` script. To run it, type:

The above command will run the `analyze` script, which loads the CSV file data into Pandas. It then starts the command-line Python interpreter so you may experiment with the values. Before opening the shell, it lists the objects that are present. Try some of these:

``` python

# See what columns are available in any table
projects.columns

# View just certain columns from a table
projects[['path_with_namespace','merge_requests_enabled']]

# See how many of each value are included
projects.value_counts(['merge_requests_enabled'])

# Count the total of unmerged branches
len(branches.loc[~branches['merged']])

# View the number of unmerged branches by project
branches.loc[~branches['merged']].value_counts(['project_path_with_namespace'])

# See who has access to a project
project_members.query('project_path_with_namespace == "<replace-with-project-path>"')[['user_username','access_level_name']]

# See who has access to a group
group_members.query('group_path == "<replace-with-group-path>"')[['username','access_level_name']]

# How many have each access level
group_members.value_counts(['access_level_name'])

# Who are the owners and maintainers?
group_members.query('group_path == "<replace-with-group-path>" and access_level_name in {"Owner","Maintainer}')[['username','access_level_name']]

# See the GitLab CI configuration file path for projects
projects[['path_with_namespace','ci_config_path']]

# See who has edited the CI configuration file
ci_config_committers
```

If you want to see all of the rows when performing queries, rather than just a sample, try:

``` python
pandas.set_option('display.max_rows', None)
```

Extracting CI Config information
--------------------------------

There is a mechanism for extracting CI configuration information from GitLab which is separate from Meltano. The `run-extract` command uses it, but by calling it directly you can troubleshoot issues and read the CI config file itself.

``` bash
source .env
python -m labcrawler.ci_config_extractor
```

There are two options for the above command:

- `--project <id>` allows you to specify an individual project ID, so it won't pull all of the data if things are malfunctioning.
- `--output file` will save the data to `output/ci_config_committers.csv` same as in the `./run-extract` command.
- `--query content` will dump the content of the CI configuration file. Note that at present, it's not saving the content to a file anywhere, so `content` only works with `--output term`.

We're just starting to look at the CI config itself so we can crawl the `include` content. To list the `include` content from the base CI configuration files:

```bash
python -m labcrawler --query includes
```

Troubleshooting
---------------

If some data isn't loading, you might have the wrong scope on your access token. Try this to see your token's scope(s):

``` bash
source .env
curl --request GET --header "PRIVATE-TOKEN: $GITLAB_PRIVATE_TOKEN" "$GITLAB_API_URL/api/v4/personal_access_tokens/self"
```

Not getting any CI config committers? Seems like a bug. 

 Here's how to look up the raw blame data using CURL. You *might* need to replace `.gitlab-ci.yml` with the actual path to the CI configuration file, and you also might need to change the `ref` to the default branch.

``` bash
source .env
curl --request GET --header "PRIVATE-TOKEN: $GITLAB_PRIVATE_TOKEN" "$GITLAB_API_URL/api/v4/projects/<id>/repository/files/.gitlab-ci.yml/blame?ref=master"
```

FInally, here's a crude API-driven way to list the files and directories at the root of a project:

``` bash
source .env
curl --request GET --header "PRIVATE-TOKEN: $GITLAB_PRIVATE_TOKEN" "$GITLAB_API_URL/api/v4/projects/<id>/repository/tree?per_page=999"
```

Useful links
------------

[Meltano tutorial](https://docs.meltano.com/getting-started/)

[Meltano CLI reference](https://docs.meltano.com/reference/command-line-interface)

[tap-gitlab on GitHub](https://github.com/MeltanoLabs/tap-gitlab)

[GitLab API docs](https://docs.gitlab.com/ee/api/)

[Pandas DataFrame reference](https://pandas.pydata.org/docs/reference/frame.html)


Handy commands
--------------

To uninstall everything installed by PIP (not Meltano plugins or `pipx` installs):

```
pip uninstall -y -r <(pip freeze)
```

