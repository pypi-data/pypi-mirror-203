{"version":3,"file":"chunks/app_components_acl_feature_tsx-app_components_acl_featureDisabled_tsx-app_components_hookOrDe-3a9afd.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/acl/comingSoon.tsx","webpack:///./app/components/acl/feature.tsx","webpack:///./app/components/acl/featureDisabled.tsx","webpack:///./app/components/clipboard.tsx","webpack:///./app/components/hookOrDefault.tsx","webpack:///./app/utils/selectText.tsx","webpack:///./app/utils/withConfig.tsx"],"sourcesContent":["import {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\nfunction ComingSoon() {\n  return (\n    <Alert type=\"info\" showIcon>\n      {t('This feature is coming soon!')}\n    </Alert>\n  );\n}\n\nexport default ComingSoon;\n","import {Component} from 'react';\n\nimport HookStore from 'sentry/stores/hookStore';\nimport {Config, Organization, Project} from 'sentry/types';\nimport {FeatureDisabledHooks} from 'sentry/types/hooks';\nimport {isRenderFunc} from 'sentry/utils/isRenderFunc';\nimport withConfig from 'sentry/utils/withConfig';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProject from 'sentry/utils/withProject';\n\nimport ComingSoon from './comingSoon';\n\ntype Props = {\n  /**\n   * If children is a function then will be treated as a render prop and\n   * passed FeatureRenderProps.\n   *\n   * The other interface is more simple, only show `children` if org/project has\n   * all the required feature.\n   */\n  children: React.ReactNode | ChildrenRenderFn;\n  config: Config;\n  /**\n   * List of required feature tags. Note we do not enforce uniqueness of tags anywhere.\n   * On the backend end, feature tags have a scope prefix string that is stripped out on the\n   * frontend (since feature tags are attached to a context object).\n   *\n   * Use `organizations:` or `projects:` prefix strings to specify a feature with context.\n   */\n  features: string[];\n  /**\n   * The following properties will be set by the HoCs\n   */\n  organization: Organization;\n  /**\n   * Specify the key to use for hookstore functionality.\n   *\n   * The hookName should be prefixed with `feature-disabled`.\n   *\n   * When specified, the hookstore will be checked if the feature is\n   * disabled, and the first available hook will be used as the render\n   * function.\n   */\n  hookName?: keyof FeatureDisabledHooks;\n  project?: Project;\n  /**\n   * Custom renderer function for when the feature is not enabled.\n   *\n   *  - [default] Set this to false to disable rendering anything. If the\n   *    feature is not enabled no children will be rendered.\n   *\n   *  - Set this to `true` to use the default `ComingSoon` alert component.\n   *\n   *  - Provide a custom render function to customize the rendered component.\n   *\n   * When a custom render function is used, the same object that would be\n   * passed to `children` if a func is provided there, will be used here,\n   * additionally `children` will also be passed.\n   */\n  renderDisabled?: boolean | RenderDisabledFn;\n  /**\n   * Should the component require all features or just one or more.\n   */\n  requireAll?: boolean;\n};\n\n/**\n * Common props passed to children and disabled render handlers.\n */\ntype FeatureRenderProps = {\n  features: string[];\n  hasFeature: boolean;\n  organization: Organization;\n  project?: Project;\n};\n\n/**\n * When a feature is disabled the caller of Feature may provide a `renderDisabled`\n * prop. This prop can be overridden by getsentry via hooks. Often getsentry will\n * call the original children function  but override the `renderDisabled`\n * with another function/component.\n */\ntype RenderDisabledProps = FeatureRenderProps & {\n  children: React.ReactNode | ChildrenRenderFn;\n  renderDisabled?: (props: FeatureRenderProps) => React.ReactNode;\n};\n\nexport type RenderDisabledFn = (props: RenderDisabledProps) => React.ReactNode;\n\ntype ChildRenderProps = FeatureRenderProps & {\n  renderDisabled?: undefined | boolean | RenderDisabledFn;\n};\n\nexport type ChildrenRenderFn = (props: ChildRenderProps) => React.ReactNode;\n\ntype AllFeatures = {\n  configFeatures: string[];\n  organization: string[];\n  project: string[];\n};\n\n/**\n * Component to handle feature flags.\n */\nclass Feature extends Component<Props> {\n  static defaultProps = {\n    renderDisabled: false,\n    requireAll: true,\n  };\n\n  getAllFeatures(): AllFeatures {\n    const {organization, project, config} = this.props;\n\n    return {\n      configFeatures: config.features ? Array.from(config.features) : [],\n      organization: (organization && organization.features) || [],\n      project: (project && project.features) || [],\n    };\n  }\n\n  hasFeature(feature: string, features: AllFeatures) {\n    const shouldMatchOnlyProject = feature.match(/^projects:(.+)/);\n    const shouldMatchOnlyOrg = feature.match(/^organizations:(.+)/);\n\n    // Array of feature strings\n    const {configFeatures, organization, project} = features;\n\n    // Check config store first as this overrides features scoped to org or\n    // project contexts.\n    if (configFeatures.includes(feature)) {\n      return true;\n    }\n\n    if (shouldMatchOnlyProject) {\n      return project.includes(shouldMatchOnlyProject[1]);\n    }\n\n    if (shouldMatchOnlyOrg) {\n      return organization.includes(shouldMatchOnlyOrg[1]);\n    }\n\n    // default, check all feature arrays\n    return organization.includes(feature) || project.includes(feature);\n  }\n\n  render() {\n    const {\n      children,\n      features,\n      renderDisabled,\n      hookName,\n      organization,\n      project,\n      requireAll,\n    } = this.props;\n\n    const allFeatures = this.getAllFeatures();\n    const method = requireAll ? 'every' : 'some';\n    const hasFeature =\n      !features || features[method](feat => this.hasFeature(feat, allFeatures));\n\n    // Default renderDisabled to the ComingSoon component\n    let customDisabledRender =\n      renderDisabled === false\n        ? false\n        : typeof renderDisabled === 'function'\n        ? renderDisabled\n        : () => <ComingSoon />;\n\n    // Override the renderDisabled function with a hook store function if there\n    // is one registered for the feature.\n    if (hookName) {\n      const hooks = HookStore.get(hookName);\n\n      if (hooks.length > 0) {\n        customDisabledRender = hooks[0];\n      }\n    }\n    const renderProps = {\n      organization,\n      project,\n      features,\n      hasFeature,\n    };\n\n    if (!hasFeature && customDisabledRender !== false) {\n      return customDisabledRender({children, ...renderProps});\n    }\n\n    if (isRenderFunc<ChildrenRenderFn>(children)) {\n      return children({renderDisabled, ...renderProps});\n    }\n\n    return hasFeature && children ? children : null;\n  }\n}\n\nexport default withOrganization(withProject(withConfig(Feature)));\n","import {Fragment, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Alert} from 'sentry/components/alert';\nimport {Button, ButtonLabel} from 'sentry/components/button';\nimport Clipboard from 'sentry/components/clipboard';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {CONFIG_DOCS_URL} from 'sentry/constants';\nimport {IconChevron, IconCopy} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {selectText} from 'sentry/utils/selectText';\n\nconst installText = (features: string[], featureName: string): string =>\n  `# ${t('Enables the %s feature', featureName)}\\n${features\n    .map(f => `SENTRY_FEATURES['${f}'] = True`)\n    .join('\\n')}`;\n\ntype Props = {\n  /**\n   * The English name of the feature. This is used in the comment that will\n   * be outputted above the example line of code to enable the feature.\n   */\n  featureName: string;\n  /**\n   * The feature flag keys that should be displayed in the code example for\n   * enabling the feature.\n   */\n  features: string[];\n  /**\n   * Render the disabled message within a warning Alert. A custom Alert\n   * component may be provided.\n   *\n   * Attaches additional styles to the FeatureDisabled component to make it\n   * look consistent within the Alert.\n   */\n  alert?: boolean | React.ElementType;\n  /**\n   * Do not show the help toggle. The description will always be rendered.\n   */\n  hideHelpToggle?: boolean;\n  /**\n   * A custom message to display. Defaults to a generic disabled message.\n   */\n  message?: string;\n};\n\n/**\n * DisabledInfo renders a component informing that a feature has been disabled.\n *\n * By default this component will render a help button which toggles more\n * information about why the feature is disabled, showing the missing feature\n * flag and linking to documentation for managing sentry server feature flags.\n */\nfunction FeatureDisabled({\n  features,\n  featureName,\n  alert,\n  hideHelpToggle,\n  message = t('This feature is not enabled on your Sentry installation.'),\n}: Props) {\n  const [showHelp, setShowHelp] = useState(false);\n\n  function renderHelp() {\n    return (\n      <Fragment>\n        <HelpText>\n          {tct(\n            `Enable this feature on your sentry installation by adding the\n              following configuration into your [configFile:sentry.conf.py].\n              See [configLink:the configuration documentation] for more\n              details.`,\n            {\n              configFile: <code />,\n              configLink: <ExternalLink href={CONFIG_DOCS_URL} />,\n            }\n          )}\n        </HelpText>\n        <Clipboard hideUnsupported value={installText(features, featureName)}>\n          <CopyButton borderless size=\"xs\" icon={<IconCopy size=\"xs\" />}>\n            {t('Copy to Clipboard')}\n          </CopyButton>\n        </Clipboard>\n        <Pre onClick={e => selectText(e.target as HTMLElement)}>\n          <code>{installText(features, featureName)}</code>\n        </Pre>\n      </Fragment>\n    );\n  }\n\n  if (!alert) {\n    const showDescription = hideHelpToggle || showHelp;\n    return (\n      <Fragment>\n        <FeatureDisabledMessage>\n          {message}\n          {!hideHelpToggle && (\n            <ToggleButton\n              priority=\"link\"\n              size=\"xs\"\n              onClick={() => setShowHelp(!showHelp)}\n            >\n              {t('Help')}\n              <IconChevron direction={showDescription ? 'up' : 'down'} />\n            </ToggleButton>\n          )}\n        </FeatureDisabledMessage>\n        {showDescription && <HelpDescription>{renderHelp()}</HelpDescription>}\n      </Fragment>\n    );\n  }\n\n  const AlertComponent = typeof alert === 'boolean' ? Alert : alert;\n  return (\n    <AlertComponent type=\"warning\" showIcon expand={renderHelp()}>\n      {message}\n    </AlertComponent>\n  );\n}\n\nconst FeatureDisabledMessage = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  line-height: ${p => p.theme.text.lineHeightBody};\n`;\n\nconst HelpDescription = styled('div')`\n  margin-top: ${space(1)};\n\n  pre,\n  code {\n    margin-bottom: 0;\n    white-space: pre;\n  }\n\n  button {\n    margin-bottom: ${space(0.5)};\n  }\n`;\n\nconst HelpText = styled('p')`\n  margin-bottom: ${space(1)};\n`;\n\nconst ToggleButton = styled(Button)`\n  color: ${p => p.theme.active};\n  height: ${p => p.theme.text.lineHeightBody}em;\n  min-height: ${p => p.theme.text.lineHeightBody}em;\n\n  &:hover {\n    color: ${p => p.theme.activeHover};\n  }\n\n  ${ButtonLabel} {\n    display: grid;\n    grid-auto-flow: column;\n    gap: ${space(1)};\n  }\n`;\n\nconst CopyButton = styled(Button)`\n  margin-left: auto;\n`;\n\nconst Pre = styled('pre')`\n  margin-bottom: 0;\n  overflow: auto;\n`;\n\nexport default FeatureDisabled;\n","import {cloneElement, isValidElement, useCallback, useEffect, useState} from 'react';\nimport {findDOMNode} from 'react-dom';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {t} from 'sentry/locale';\n\ntype Props = {\n  children: React.ReactNode;\n  /**\n   * Text to be copied on click\n   */\n  value: string;\n  /**\n   * Toast message to show on copy failures\n   */\n  errorMessage?: string;\n  /**\n   * Do not show a toast message on success\n   */\n  hideMessages?: boolean;\n  /**\n   * Hide children if browser does not support copying\n   */\n  hideUnsupported?: boolean;\n  /**\n   * Triggered if we fail to copy\n   */\n  onError?: () => void;\n  /**\n   * Trigger if we successfully copy\n   */\n  onSuccess?: () => void;\n  /**\n   * Message to show when we successfully copy\n   */\n  successMessage?: string;\n};\n\n/**\n * copy-text-to-clipboard relies on `document.execCommand('copy')`\n */\nfunction isSupported() {\n  return !!document.queryCommandSupported?.('copy');\n}\n\nfunction Clipboard({\n  hideMessages = false,\n  successMessage = t('Copied to clipboard'),\n  errorMessage = t('Error copying to clipboard'),\n  value,\n  onSuccess,\n  onError,\n  hideUnsupported,\n  children,\n}: Props) {\n  const [element, setElement] = useState<ReturnType<typeof findDOMNode>>();\n\n  const handleClick = useCallback(() => {\n    navigator.clipboard\n      .writeText(value)\n      .then(() => {\n        onSuccess?.();\n        if (!hideMessages) {\n          addSuccessMessage(successMessage);\n        }\n      })\n      .catch(() => {\n        onError?.();\n        if (!hideMessages) {\n          addErrorMessage(errorMessage);\n        }\n      });\n  }, [value, onError, onSuccess, errorMessage, successMessage, hideMessages]);\n\n  useEffect(() => {\n    element?.addEventListener('click', handleClick);\n    return () => element?.removeEventListener('click', handleClick);\n  }, [handleClick, element]);\n\n  // XXX: Instead of assigning the `onClick` to the cloned child element, we\n  // attach a event listener, otherwise we would wipeout whatever click handler\n  // may be assigned on the child.\n  const handleMount = useCallback((ref: HTMLElement) => {\n    // eslint-disable-next-line react/no-find-dom-node\n    setElement(findDOMNode(ref));\n  }, []);\n\n  // Browser doesn't support `execCommand`\n  if (hideUnsupported && !isSupported()) {\n    return null;\n  }\n\n  if (!isValidElement(children)) {\n    return null;\n  }\n\n  return cloneElement<any>(children, {ref: handleMount});\n}\n\nexport default Clipboard;\n","import {Component, lazy, Suspense} from 'react';\n\nimport HookStore from 'sentry/stores/hookStore';\nimport {HookName, Hooks} from 'sentry/types/hooks';\n\ntype Params<H extends HookName> = {\n  /**\n   * The name of the hook as listed in hookstore.add(hookName, callback)\n   */\n  hookName: H;\n  /**\n   * Component that will be shown if no hook is available\n   */\n  defaultComponent?: ReturnType<Hooks[H]>;\n  /**\n   * This is a function that returns a promise (more specifically a function\n   * that returns the result of a dynamic import using `import()`. This will\n   * use React.Suspense and React.lazy to render the component.\n   */\n  defaultComponentPromise?: () => Promise<ReturnType<Hooks[H]>>;\n};\n\n/**\n * Use this instead of the usual ternery operator when using getsentry hooks.\n * So in lieu of:\n *\n *  HookStore.get('component:org-auth-view').length\n *   ? HookStore.get('component:org-auth-view')[0]()\n *   : OrganizationAuth\n *\n * do this instead:\n *\n *   const HookedOrganizationAuth = HookOrDefault({\n *     hookName:'component:org-auth-view',\n *     defaultComponent: OrganizationAuth,\n *   })\n *\n * Note, you will need to add the hookstore function in getsentry [0] first and\n * then register the types [2] and validHookName [1] in sentry.\n *\n * [0] /getsentry/static/getsentry/gsApp/registerHooks.jsx\n * [1] /sentry/app/stores/hookStore.tsx\n * [2] /sentry/app/types/hooks.ts\n */\nfunction HookOrDefault<H extends HookName>({\n  hookName,\n  defaultComponent,\n  defaultComponentPromise,\n}: Params<H>) {\n  type Props = React.ComponentProps<ReturnType<Hooks[H]>>;\n  type State = {hooks: Hooks[H][]};\n\n  class HookOrDefaultComponent extends Component<Props, State> {\n    static displayName = `HookOrDefaultComponent(${hookName})`;\n\n    state: State = {\n      hooks: HookStore.get(hookName),\n    };\n\n    componentWillUnmount() {\n      this.unlistener?.();\n    }\n\n    unlistener = HookStore.listen(\n      (name: string, hooks: Hooks[HookName][]) =>\n        name === hookName && this.setState({hooks}),\n      undefined\n    );\n\n    get defaultComponent() {\n      // If `defaultComponentPromise` is passed, then return a Suspended component\n      if (defaultComponentPromise) {\n        const DefaultComponent = lazy(defaultComponentPromise);\n\n        return function (props: Props) {\n          return (\n            <Suspense fallback={null}>\n              <DefaultComponent {...props} />\n            </Suspense>\n          );\n        };\n      }\n\n      return defaultComponent;\n    }\n\n    render() {\n      const hookExists = this.state.hooks && this.state.hooks.length;\n      const componentFromHook = this.state.hooks[0]?.();\n      const HookComponent =\n        hookExists && componentFromHook ? componentFromHook : this.defaultComponent;\n\n      return HookComponent ? <HookComponent {...this.props} /> : null;\n    }\n  }\n\n  return HookOrDefaultComponent;\n}\n\nexport default HookOrDefault;\n","/**\n * Select the text of the provided HTML Element\n */\nexport function selectText(node: HTMLElement): void {\n  if (node instanceof HTMLInputElement && node.type === 'text') {\n    node.select();\n    return;\n  }\n\n  if (node instanceof Node && window.getSelection) {\n    const range = document.createRange();\n    range.selectNode(node);\n\n    const selection = window.getSelection();\n    selection?.removeAllRanges();\n    selection?.addRange(range);\n  }\n}\n","import ConfigStore from 'sentry/stores/configStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport {Config} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedConfigProps = {\n  config: Config;\n};\n\n/**\n * Higher order component that passes the config object to the wrapped\n * component\n */\nfunction withConfig<P extends InjectedConfigProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  type Props = Omit<P, keyof InjectedConfigProps> & Partial<InjectedConfigProps>;\n\n  function Wrapper(props: Props) {\n    const config = useLegacyStore(ConfigStore);\n    const allProps = {config, ...props} as P;\n\n    return <WrappedComponent {...allProps} />;\n  }\n\n  Wrapper.displayName = `withConfig(${getDisplayName(WrappedComponent)})`;\n\n  return Wrapper;\n}\n\nexport default withConfig;\n"],"names":["ComingSoon","_jsx","Alert","type","showIcon","children","t","displayName","Feature","Component","getAllFeatures","organization","project","config","this","props","configFeatures","features","Array","from","hasFeature","feature","shouldMatchOnlyProject","match","shouldMatchOnlyOrg","includes","render","renderDisabled","hookName","requireAll","allFeatures","feat","customDisabledRender","hooks","HookStore","length","renderProps","isRenderFunc","_defineProperty","withOrganization","withProject","withConfig","installText","featureName","map","f","join","FeatureDisabled","_ref","alert","hideHelpToggle","message","showHelp","setShowHelp","useState","renderHelp","_jsxs","Fragment","HelpText","tct","configFile","configLink","ExternalLink","href","CONFIG_DOCS_URL","Clipboard","hideUnsupported","value","CopyButton","borderless","size","icon","IconCopy","Pre","onClick","e","selectText","target","showDescription","FeatureDisabledMessage","ToggleButton","priority","IconChevron","direction","HelpDescription","AlertComponent","expand","_styled","p","theme","text","lineHeightBody","space","Button","active","activeHover","ButtonLabel","name","styles","hideMessages","successMessage","errorMessage","onSuccess","onError","element","setElement","handleClick","useCallback","navigator","clipboard","writeText","then","addSuccessMessage","catch","addErrorMessage","useEffect","addEventListener","removeEventListener","handleMount","ref","findDOMNode","document","queryCommandSupported","isValidElement","cloneElement","defaultComponent","defaultComponentPromise","HookOrDefaultComponent","constructor","arguments","setState","undefined","componentWillUnmount","unlistener","DefaultComponent","lazy","Suspense","fallback","hookExists","state","componentFromHook","HookComponent","node","HTMLInputElement","select","Node","window","getSelection","range","createRange","selectNode","selection","removeAllRanges","addRange","WrappedComponent","Wrapper","allProps","useLegacyStore","ConfigStore","getDisplayName"],"sourceRoot":""}