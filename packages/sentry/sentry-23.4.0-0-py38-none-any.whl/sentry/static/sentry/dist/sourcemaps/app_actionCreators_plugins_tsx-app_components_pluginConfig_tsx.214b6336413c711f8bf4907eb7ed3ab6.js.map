{"version":3,"file":"chunks/app_actionCreators_plugins_tsx-app_components_pluginConfig_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/plugins.tsx","webpack:///./app/components/pluginConfig.tsx","webpack:///./app/stores/pluginsStore.tsx"],"sourcesContent":["import {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {Client, RequestOptions} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport PluginsStore from 'sentry/stores/pluginsStore';\nimport {Plugin} from 'sentry/types';\n\nconst activeFetch = {};\n// PluginsStore always exists, so api client should be independent of component lifecycle\nconst api = new Client();\n\ntype Slugs = {\n  /**\n   * Organization slug\n   */\n  orgId: string;\n\n  /**\n   * Plugin slug\n   */\n  pluginId: string;\n\n  /**\n   * Project slug\n   */\n  projectId: string;\n};\n\ntype DoUpdateParams = Slugs & {\n  update: Partial<Plugin>;\n} & Partial<RequestOptions>;\n\nfunction doUpdate({orgId, projectId, pluginId, update, ...params}: DoUpdateParams) {\n  PluginsStore.onUpdate(pluginId, update);\n  const request = api.requestPromise(\n    `/projects/${orgId}/${projectId}/plugins/${pluginId}/`,\n    {\n      ...params,\n    }\n  );\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(() => {\n      PluginsStore.onUpdateSuccess(pluginId, update);\n    })\n    .catch(resp => {\n      const err =\n        resp && resp.responseJSON && typeof resp.responseJSON.detail === 'string'\n          ? new Error(resp.responseJSON.detail)\n          : new Error('Unable to update plugin');\n      PluginsStore.onUpdateError(pluginId, update, err);\n    });\n\n  return request;\n}\n\ntype FetchPluginsOptions = {\n  /**\n   * Reset will set loading state = true\n   */\n  resetLoading?: boolean;\n};\n\n/**\n * Fetches list of available plugins for a project\n */\nexport function fetchPlugins(\n  {orgId, projectId}: Pick<Slugs, 'orgId' | 'projectId'>,\n  options?: FetchPluginsOptions\n): Promise<Plugin[]> {\n  const path = `/projects/${orgId}/${projectId}/plugins/`;\n\n  // Make sure we throttle fetches\n  if (activeFetch[path]) {\n    return activeFetch[path];\n  }\n\n  PluginsStore.onFetchAll(options);\n  const request = api.requestPromise(path, {\n    method: 'GET',\n    includeAllArgs: true,\n  });\n\n  activeFetch[path] = request;\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(([data, _, resp]) => {\n      PluginsStore.onFetchAllSuccess(data, {\n        pageLinks: resp?.getResponseHeader('Link') ?? undefined,\n      });\n\n      return data;\n    })\n    .catch(err => {\n      PluginsStore.onFetchAllError(err);\n      throw new Error('Unable to fetch plugins');\n    })\n    .then(() => (activeFetch[path] = null));\n\n  return request;\n}\n\ntype EnableDisablePluginParams = Slugs;\n\n/**\n * Enables a plugin\n */\nexport function enablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Enabling...'));\n  return doUpdate({...params, update: {enabled: true}, method: 'POST'})\n    .then(() => addSuccessMessage(t('Plugin was enabled')))\n    .catch(() => addErrorMessage(t('Unable to enable plugin')));\n}\n\n/**\n * Disables a plugin\n */\nexport function disablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Disabling...'));\n  return doUpdate({...params, update: {enabled: false}, method: 'DELETE'})\n    .then(() => addSuccessMessage(t('Plugin was disabled')))\n    .catch(() => addErrorMessage(t('Unable to disable plugin')));\n}\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {Button} from 'sentry/components/button';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport plugins from 'sentry/plugins';\nimport PluginIcon from 'sentry/plugins/components/pluginIcon';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = {\n  api: Client;\n  data: Plugin;\n  onDisablePlugin: (data: Plugin) => void;\n  organization: Organization;\n  project: Project;\n  enabled?: boolean;\n};\n\ntype State = {\n  testResults: string;\n  loading?: boolean;\n};\n\nclass PluginConfig extends Component<Props, State> {\n  static defaultProps = {\n    onDisablePlugin: () => {},\n  };\n\n  state: State = {\n    loading: !plugins.isLoaded(this.props.data),\n    testResults: '',\n  };\n\n  componentDidMount() {\n    this.loadPlugin(this.props.data);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    this.loadPlugin(nextProps.data);\n  }\n\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return !isEqual(nextState, this.state) || !isEqual(nextProps.data, this.props.data);\n  }\n\n  loadPlugin(data: Plugin) {\n    this.setState(\n      {\n        loading: true,\n      },\n      () => {\n        plugins.load(data, () => {\n          this.setState({loading: false});\n        });\n      }\n    );\n  }\n\n  getPluginEndpoint() {\n    const {organization, project, data} = this.props;\n    return `/projects/${organization.slug}/${project.slug}/plugins/${data.id}/`;\n  }\n\n  handleDisablePlugin = () => {\n    this.props.onDisablePlugin(this.props.data);\n  };\n\n  handleTestPlugin = async () => {\n    this.setState({testResults: ''});\n    addLoadingMessage(t('Sending test...'));\n\n    try {\n      const data = await this.props.api.requestPromise(this.getPluginEndpoint(), {\n        method: 'POST',\n        data: {\n          test: true,\n        },\n      });\n\n      this.setState({testResults: JSON.stringify(data.detail)});\n      addSuccessMessage(t('Test Complete!'));\n    } catch (_err) {\n      addErrorMessage(\n        t('An unexpected error occurred while testing your plugin. Please try again.')\n      );\n    }\n  };\n\n  createMarkup() {\n    return {__html: this.props.data.doc};\n  }\n\n  render() {\n    const {data} = this.props;\n    // If passed via props, use that value instead of from `data`\n    const enabled =\n      typeof this.props.enabled !== 'undefined' ? this.props.enabled : data.enabled;\n\n    return (\n      <Panel\n        className={`plugin-config ref-plugin-config-${data.id}`}\n        data-test-id=\"plugin-config\"\n      >\n        <PanelHeader hasButtons>\n          <PluginName>\n            <StyledPluginIcon pluginId={data.id} />\n            <span>{data.name}</span>\n          </PluginName>\n\n          {data.canDisable && enabled && (\n            <Actions>\n              {data.isTestable && (\n                <TestPluginButton onClick={this.handleTestPlugin} size=\"sm\">\n                  {t('Test Plugin')}\n                </TestPluginButton>\n              )}\n              <Button size=\"sm\" onClick={this.handleDisablePlugin}>\n                {t('Disable')}\n              </Button>\n            </Actions>\n          )}\n        </PanelHeader>\n\n        {data.status === 'beta' && (\n          <PanelAlert type=\"warning\">\n            {t('This plugin is considered beta and may change in the future.')}\n          </PanelAlert>\n        )}\n\n        {this.state.testResults !== '' && (\n          <PanelAlert type=\"info\">\n            <strong>Test Results</strong>\n            <div>{this.state.testResults}</div>\n          </PanelAlert>\n        )}\n\n        <StyledPanelBody>\n          <div dangerouslySetInnerHTML={this.createMarkup()} />\n          {this.state.loading ? (\n            <LoadingIndicator />\n          ) : (\n            plugins.get(data).renderSettings({\n              organization: this.props.organization,\n              project: this.props.project,\n            })\n          )}\n        </StyledPanelBody>\n      </Panel>\n    );\n  }\n}\n\nexport {PluginConfig};\nexport default withApi(PluginConfig);\n\nconst PluginName = styled('div')`\n  display: flex;\n  align-items: center;\n  flex: 1;\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  margin-right: ${space(1)};\n`;\n\nconst Actions = styled('div')`\n  display: flex;\n`;\nconst TestPluginButton = styled(Button)`\n  margin-right: ${space(1)};\n`;\n\nconst StyledPanelBody = styled(PanelBody)`\n  padding: ${space(2)};\n  padding-bottom: 0;\n`;\n","import {createStore, StoreDefinition} from 'reflux';\n\nimport {Plugin} from 'sentry/types';\n\ninterface InternalDefinition {\n  plugins: Map<string, Plugin> | null;\n  state: {\n    error: Error | null;\n    loading: boolean;\n    pageLinks: string | null;\n    plugins: Plugin[];\n  };\n  updating: Map<string, Plugin>;\n}\n\ninterface PluginStoreDefinition extends StoreDefinition, InternalDefinition {\n  onFetchAll: (options?: {resetLoading?: boolean}) => void;\n  onFetchAllError: (err) => void;\n  onFetchAllSuccess: (data: Plugin[], links: {pageLinks?: string}) => void;\n\n  onUpdate: (id: string, updateObj: Partial<Plugin>) => void;\n  onUpdateError: (id: string, _updateObj: Partial<Plugin>, err) => void;\n  onUpdateSuccess: (id: string, _updateObj: Partial<Plugin>) => void;\n}\n\nconst defaultState = {\n  loading: true,\n  plugins: [],\n  error: null,\n  pageLinks: null,\n};\n\nconst storeConfig: PluginStoreDefinition = {\n  plugins: null,\n  state: {...defaultState},\n  updating: new Map(),\n\n  reset() {\n    // reset our state\n    this.plugins = null;\n    this.state = {...defaultState};\n    this.updating = new Map();\n    return this.state;\n  },\n\n  getInitialState() {\n    return this.getState();\n  },\n\n  getState() {\n    const {plugins: _plugins, ...state} = this.state;\n\n    return {\n      ...state,\n      plugins: this.plugins ? Array.from(this.plugins.values()) : [],\n    };\n  },\n\n  init() {\n    // XXX: Do not use `this.listenTo` in this store. We avoid usage of reflux\n    // listeners due to their leaky nature in tests.\n\n    this.reset();\n  },\n\n  triggerState() {\n    this.trigger(this.getState());\n  },\n\n  onFetchAll({resetLoading} = {}) {\n    if (resetLoading) {\n      this.state.loading = true;\n      this.state.error = null;\n      this.plugins = null;\n    }\n\n    this.triggerState();\n  },\n\n  onFetchAllSuccess(data, {pageLinks}) {\n    this.plugins = new Map(data.map(plugin => [plugin.id, plugin]));\n    this.state.pageLinks = pageLinks || null;\n    this.state.loading = false;\n    this.triggerState();\n  },\n\n  onFetchAllError(err) {\n    this.plugins = null;\n    this.state.loading = false;\n    this.state.error = err;\n    this.triggerState();\n  },\n\n  onUpdate(id: string, updateObj: Partial<Plugin>) {\n    if (!this.plugins) {\n      return;\n    }\n\n    const plugin = this.plugins.get(id);\n    if (!plugin) {\n      return;\n    }\n    const newPlugin = {\n      ...plugin,\n      ...updateObj,\n    };\n\n    this.plugins.set(id, newPlugin);\n    this.updating.set(id, plugin);\n    this.triggerState();\n  },\n\n  onUpdateSuccess(id: string, _updateObj: Partial<Plugin>) {\n    this.updating.delete(id);\n  },\n\n  onUpdateError(id: string, _updateObj: Partial<Plugin>, err) {\n    const origPlugin = this.updating.get(id);\n    if (!origPlugin || !this.plugins) {\n      return;\n    }\n\n    this.plugins.set(id, origPlugin);\n    this.updating.delete(id);\n    this.state.error = err;\n    this.triggerState();\n  },\n};\n\nconst PluginStore = createStore(storeConfig);\nexport default PluginStore;\n"],"names":["activeFetch","api","Client","doUpdate","_ref","orgId","projectId","pluginId","update","params","PluginsStore","request","requestPromise","then","catch","resp","err","responseJSON","detail","Error","fetchPlugins","_ref2","options","path","method","includeAllArgs","_ref3","data","_","pageLinks","getResponseHeader","undefined","enablePlugin","addLoadingMessage","t","enabled","addSuccessMessage","addErrorMessage","disablePlugin","PluginConfig","Component","constructor","arguments","_defineProperty","loading","plugins","this","props","testResults","onDisablePlugin","async","setState","getPluginEndpoint","test","JSON","stringify","_err","componentDidMount","loadPlugin","UNSAFE_componentWillReceiveProps","nextProps","shouldComponentUpdate","nextState","isEqual","state","organization","project","slug","id","createMarkup","__html","doc","render","_jsxs","Panel","className","children","PanelHeader","hasButtons","PluginName","_jsx","StyledPluginIcon","name","canDisable","Actions","isTestable","TestPluginButton","onClick","handleTestPlugin","size","Button","handleDisablePlugin","status","PanelAlert","type","StyledPanelBody","dangerouslySetInnerHTML","LoadingIndicator","renderSettings","displayName","withApi","_styled","target","styles","PluginIcon","space","PanelBody","defaultState","error","storeConfig","updating","Map","reset","getInitialState","getState","_plugins","Array","from","values","init","triggerState","trigger","onFetchAll","resetLoading","length","onFetchAllSuccess","map","plugin","onFetchAllError","onUpdate","updateObj","get","newPlugin","set","onUpdateSuccess","_updateObj","delete","onUpdateError","origPlugin","createStore"],"sourceRoot":""}