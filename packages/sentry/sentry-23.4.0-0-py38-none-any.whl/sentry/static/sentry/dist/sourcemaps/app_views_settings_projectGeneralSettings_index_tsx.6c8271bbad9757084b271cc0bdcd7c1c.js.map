{"version":3,"file":"chunks/app_views_settings_projectGeneralSettings_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/data/forms/projectGeneralSettings.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectGeneralSettings/index.tsx"],"sourcesContent":["import {createFilter} from 'react-select';\nimport styled from '@emotion/styled';\nimport {PlatformIcon} from 'platformicons';\n\nimport {Field} from 'sentry/components/forms/types';\nimport platforms from 'sentry/data/platforms';\nimport {t, tct, tn} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {convertMultilineFieldValue, extractMultilineFields} from 'sentry/utils';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport slugify from 'sentry/utils/slugify';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/';\n\nconst getResolveAgeAllowedValues = () => {\n  let i = 0;\n  const values: number[] = [];\n  while (i <= 720) {\n    values.push(i);\n    if (i < 12) {\n      i += 1;\n    } else if (i < 24) {\n      i += 3;\n    } else if (i < 36) {\n      i += 6;\n    } else if (i < 48) {\n      i += 12;\n    } else {\n      i += 24;\n    }\n  }\n  return values;\n};\n\nconst RESOLVE_AGE_ALLOWED_VALUES = getResolveAgeAllowedValues();\n\nconst ORG_DISABLED_REASON = t(\n  \"This option is enforced by your organization's settings and cannot be customized per-project.\"\n);\n\nconst PlatformWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\nconst StyledPlatformIcon = styled(PlatformIcon)`\n  margin-right: ${space(1)};\n`;\n\nexport const fields: Record<string, Field> = {\n  name: {\n    name: 'name',\n    type: 'string',\n    required: true,\n    label: t('Name'),\n    placeholder: t('my-awesome-project'),\n    help: t('A name for this project'),\n    transformInput: slugify,\n    getData: (data: {name?: string}) => {\n      return {\n        name: data.name,\n        slug: data.name,\n      };\n    },\n\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t('You will be redirected to the new project slug after saving'),\n  },\n\n  platform: {\n    name: 'platform',\n    type: 'select',\n    label: t('Platform'),\n    options: platforms.map(({id, name}) => ({\n      value: id,\n      label: (\n        <PlatformWrapper key={id}>\n          <StyledPlatformIcon platform={id} />\n          {name}\n        </PlatformWrapper>\n      ),\n    })),\n    help: t('The primary platform for this project'),\n    filterOption: createFilter({\n      stringify: option => {\n        const matchedPlatform = platforms.find(({id}) => id === option.value);\n        return `${matchedPlatform?.name} ${option.value}`;\n      },\n    }),\n  },\n\n  subjectPrefix: {\n    name: 'subjectPrefix',\n    type: 'string',\n    label: t('Subject Prefix'),\n    placeholder: t('e.g. [my-org]'),\n    help: t('Choose a custom prefix for emails from this project'),\n  },\n\n  resolveAge: {\n    name: 'resolveAge',\n    type: 'range',\n    allowedValues: RESOLVE_AGE_ALLOWED_VALUES,\n    label: t('Auto Resolve'),\n    help: t(\n      \"Automatically resolve an issue if it hasn't been seen for this amount of time\"\n    ),\n    formatLabel: val => {\n      val = Number(val);\n      if (val === 0) {\n        return t('Disabled');\n      }\n\n      if (val > 23 && val % 24 === 0) {\n        // Based on allowed values, val % 24 should always be true\n        val = val / 24;\n        return tn('%s day', '%s days', val);\n      }\n\n      return tn('%s hour', '%s hours', val);\n    },\n    saveOnBlur: false,\n    saveMessage: tct(\n      '[strong:Caution]: Enabling auto resolve will immediately resolve anything that has not been seen within this period of time. There is no undo!',\n      {\n        strong: <strong />,\n      }\n    ),\n    saveMessageAlertType: 'warning',\n  },\n  allowedDomains: {\n    name: 'allowedDomains',\n    type: 'string',\n    multiline: true,\n    autosize: true,\n    maxRows: 10,\n    rows: 1,\n    placeholder: t('https://example.com or example.com'),\n    label: t('Allowed Domains'),\n    help: t(\n      'Examples: https://example.com, *, *.example.com, *:80. Separate multiple entries with a newline'\n    ),\n    getValue: val => extractMultilineFields(val),\n    setValue: val => convertMultilineFieldValue(val),\n  },\n  scrapeJavaScript: {\n    name: 'scrapeJavaScript',\n    type: 'boolean',\n    // if this is off for the organization, it cannot be enabled for the project\n    disabled: ({organization, name}) => !organization[name],\n    disabledReason: ORG_DISABLED_REASON,\n    // `props` are the props given to FormField\n    setValue: (val, props) => props.organization && props.organization[props.name] && val,\n    label: t('Enable JavaScript source fetching'),\n    help: t('Allow Sentry to scrape missing JavaScript source context when possible'),\n  },\n  securityToken: {\n    name: 'securityToken',\n    type: 'string',\n    label: t('Security Token'),\n    help: t(\n      'Outbound requests matching Allowed Domains will have the header \"{token_header}: {token}\" appended'\n    ),\n    setValue: value => getDynamicText({value, fixed: '__SECURITY_TOKEN__'}),\n  },\n  securityTokenHeader: {\n    name: 'securityTokenHeader',\n    type: 'string',\n    placeholder: t('X-Sentry-Token'),\n    label: t('Security Token Header'),\n    help: t(\n      'Outbound requests matching Allowed Domains will have the header \"{token_header}: {token}\" appended'\n    ),\n  },\n  verifySSL: {\n    name: 'verifySSL',\n    type: 'boolean',\n    label: t('Verify TLS/SSL'),\n    help: t('Outbound requests will verify TLS (sometimes known as SSL) connections'),\n  },\n};\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","/**\n * Transforms the given string to a slugified version. (e.g. \"My Project\" => \"my-project\")\n *\n * Allows only lowercase alphanumeric values, hyphens, and underscores (should match backend validation rules).\n * Normalizes special characters to a-z where applicable (accents, ligatures, etc).\n * Converts spaces to hyphens.\n */\nexport default function slugify(str: string): string {\n  return str\n    .normalize('NFKD') // Converts accents/ligatures/etc to latin alphabet\n    .toLowerCase()\n    .replace(' ', '-')\n    .replace(/[^a-z0-9-_]/g, ''); // Remove all invalid characters\n}\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nfunction PermissionAlert({access = ['project:write'], ...props}: Props) {\n  return (\n    <Access access={access}>\n      {({hasAccess}) =>\n        !hasAccess && (\n          <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n            {t(\n              'These settings can only be edited by users with the organization owner, manager, or admin role.'\n            )}\n          </Alert>\n        )\n      }\n    </Access>\n  );\n}\n\nexport default PermissionAlert;\n","import {Component} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {\n  changeProjectSlug,\n  removeProject,\n  transferProject,\n} from 'sentry/actionCreators/projects';\nimport {Button} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport TextField from 'sentry/components/forms/fields/textField';\nimport Form, {FormProps} from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport {FieldValue} from 'sentry/components/forms/model';\nimport Hook from 'sentry/components/hook';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {removePageFiltersStorage} from 'sentry/components/organizations/pageFilters/persistence';\nimport {Panel, PanelAlert, PanelHeader} from 'sentry/components/panels';\nimport {fields} from 'sentry/data/forms/projectGeneralSettings';\nimport {t, tct} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {Organization, Project} from 'sentry/types';\nimport handleXhrErrorResponse from 'sentry/utils/handleXhrErrorResponse';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\ntype Props = AsyncView['props'] &\n  RouteComponentProps<{projectId: string}, {}> & {\n    onChangeSlug: (slug: string) => void;\n    organization: Organization;\n  };\n\ntype State = AsyncView['state'] & {\n  data: Project;\n};\n\nclass ProjectGeneralSettings extends AsyncView<Props, State> {\n  private _form: Record<string, FieldValue> = {};\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Project Settings'), projectId, false);\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n\n    return [['data', `/projects/${organization.slug}/${projectId}/`]];\n  }\n\n  handleTransferFieldChange = (id: string, value: FieldValue) => {\n    this._form[id] = value;\n  };\n\n  handleRemoveProject = () => {\n    const {organization} = this.props;\n    const project = this.state.data;\n\n    removePageFiltersStorage(organization.slug);\n\n    if (!project) {\n      return;\n    }\n\n    removeProject(this.api, organization.slug, project.slug)\n      .then(\n        () => {\n          addSuccessMessage(\n            tct('[project] was successfully removed', {project: project.slug})\n          );\n        },\n        err => {\n          addErrorMessage(tct('Error removing [project]', {project: project.slug}));\n          throw err;\n        }\n      )\n      .then(() => {\n        // Need to hard reload because lots of components do not listen to Projects Store\n        window.location.assign('/');\n      }, handleXhrErrorResponse('Unable to remove project'));\n  };\n\n  handleTransferProject = async () => {\n    const {organization} = this.props;\n    const project = this.state.data;\n    if (!project) {\n      return;\n    }\n    if (typeof this._form.email !== 'string' || this._form.email.length < 1) {\n      return;\n    }\n\n    try {\n      await transferProject(this.api, organization.slug, project, this._form.email);\n      // Need to hard reload because lots of components do not listen to Projects Store\n      window.location.assign('/');\n    } catch (err) {\n      if (err.status >= 500) {\n        handleXhrErrorResponse('Unable to transfer project')(err);\n      }\n    }\n  };\n\n  isProjectAdmin = () => this.props.organization.access.includes('project:admin');\n\n  renderRemoveProject() {\n    const project = this.state.data;\n    const isProjectAdmin = this.isProjectAdmin();\n    const {isInternal} = project;\n\n    return (\n      <FieldGroup\n        label={t('Remove Project')}\n        help={tct(\n          'Remove the [project] project and all related data. [linebreak] Careful, this action cannot be undone.',\n          {\n            project: <strong>{project.slug}</strong>,\n            linebreak: <br />,\n          }\n        )}\n      >\n        {!isProjectAdmin &&\n          t('You do not have the required permission to remove this project.')}\n\n        {isInternal &&\n          t(\n            'This project cannot be removed. It is used internally by the Sentry server.'\n          )}\n\n        {isProjectAdmin && !isInternal && (\n          <Confirm\n            onConfirm={this.handleRemoveProject}\n            priority=\"danger\"\n            confirmText={t('Remove Project')}\n            message={\n              <div>\n                <TextBlock>\n                  <strong>\n                    {t('Removing this project is permanent and cannot be undone!')}\n                  </strong>\n                </TextBlock>\n                <TextBlock>\n                  {t('This will also remove all associated event data.')}\n                </TextBlock>\n              </div>\n            }\n          >\n            <div>\n              <Button priority=\"danger\">{t('Remove Project')}</Button>\n            </div>\n          </Confirm>\n        )}\n      </FieldGroup>\n    );\n  }\n\n  renderTransferProject() {\n    const project = this.state.data;\n    const isProjectAdmin = this.isProjectAdmin();\n    const {isInternal} = project;\n\n    return (\n      <FieldGroup\n        label={t('Transfer Project')}\n        help={tct(\n          'Transfer the [project] project and all related data. [linebreak] Careful, this action cannot be undone.',\n          {\n            project: <strong>{project.slug}</strong>,\n            linebreak: <br />,\n          }\n        )}\n      >\n        {!isProjectAdmin &&\n          t('You do not have the required permission to transfer this project.')}\n\n        {isInternal &&\n          t(\n            'This project cannot be transferred. It is used internally by the Sentry server.'\n          )}\n\n        {isProjectAdmin && !isInternal && (\n          <Confirm\n            onConfirm={this.handleTransferProject}\n            priority=\"danger\"\n            confirmText={t('Transfer project')}\n            renderMessage={({confirm}) => (\n              <div>\n                <TextBlock>\n                  <strong>\n                    {t('Transferring this project is permanent and cannot be undone!')}\n                  </strong>\n                </TextBlock>\n                <TextBlock>\n                  {t(\n                    'Please enter the email of an organization owner to whom you would like to transfer this project.'\n                  )}\n                </TextBlock>\n                <Panel>\n                  <Form\n                    hideFooter\n                    onFieldChange={this.handleTransferFieldChange}\n                    onSubmit={(_data, _onSuccess, _onError, e) => {\n                      e.stopPropagation();\n                      confirm();\n                    }}\n                  >\n                    <TextField\n                      name=\"email\"\n                      label={t('Organization Owner')}\n                      placeholder=\"admin@example.com\"\n                      required\n                      help={t(\n                        'A request will be emailed to this address, asking the organization owner to accept the project transfer.'\n                      )}\n                    />\n                  </Form>\n                </Panel>\n              </div>\n            )}\n          >\n            <div>\n              <Button priority=\"danger\">{t('Transfer Project')}</Button>\n            </div>\n          </Confirm>\n        )}\n      </FieldGroup>\n    );\n  }\n\n  renderBody() {\n    const {organization} = this.props;\n    const project = this.state.data;\n    const {projectId} = this.props.params;\n    const endpoint = `/projects/${organization.slug}/${projectId}/`;\n    const access = new Set(organization.access);\n    const jsonFormProps = {\n      additionalFieldProps: {\n        organization,\n      },\n      features: new Set(organization.features),\n      access,\n      disabled: !access.has('project:write'),\n    };\n    const team = project.teams.length ? project.teams?.[0] : undefined;\n\n    /*\n    HACK: The <Form /> component applies its props to its children meaning the hooked component\n          would need to conform to the form settings applied in a separate repository. This is\n          not feasible to maintain and may introduce compatability errors if something changes\n          in either repository. For that reason, the Form component is split in two, since the\n          fields do not depend on one another, allowing for the Hook to manage it's own state.\n    */\n    const formProps: FormProps = {\n      saveOnBlur: true,\n      allowUndo: true,\n      initialData: {\n        ...project,\n        team,\n      },\n      apiMethod: 'PUT' as const,\n      apiEndpoint: endpoint,\n      onSubmitSuccess: resp => {\n        this.setState({data: resp});\n        if (projectId !== resp.slug) {\n          changeProjectSlug(projectId, resp.slug);\n          // Container will redirect after stores get updated with new slug\n          this.props.onChangeSlug(resp.slug);\n        }\n        // This will update our project context\n        ProjectsStore.onUpdateSuccess(resp);\n      },\n    };\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Project Settings')} />\n        <PermissionAlert />\n\n        <Form {...formProps}>\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Project Details')}\n            fields={[fields.name, fields.platform]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Email')}\n            fields={[fields.subjectPrefix]}\n          />\n        </Form>\n        <Hook\n          name=\"spend-visibility:spike-protection-project-settings\"\n          project={project}\n        />\n        <Form {...formProps}>\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Event Settings')}\n            fields={[fields.resolveAge]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Client Security')}\n            fields={[\n              fields.allowedDomains,\n              fields.scrapeJavaScript,\n              fields.securityToken,\n              fields.securityTokenHeader,\n              fields.verifySSL,\n            ]}\n            renderHeader={() => (\n              <PanelAlert type=\"info\">\n                <TextBlock noMargin>\n                  {tct(\n                    'Configure origin URLs which Sentry should accept events from. This is used for communication with clients like [link].',\n                    {\n                      link: (\n                        <ExternalLink href=\"https://github.com/getsentry/sentry-javascript\">\n                          sentry-javascript\n                        </ExternalLink>\n                      ),\n                    }\n                  )}{' '}\n                  {tct(\n                    'This will restrict requests based on the [Origin] and [Referer] headers.',\n                    {\n                      Origin: <code>Origin</code>,\n                      Referer: <code>Referer</code>,\n                    }\n                  )}\n                </TextBlock>\n              </PanelAlert>\n            )}\n          />\n        </Form>\n\n        <Panel>\n          <PanelHeader>{t('Project Administration')}</PanelHeader>\n          {this.renderRemoveProject()}\n          {this.renderTransferProject()}\n        </Panel>\n      </div>\n    );\n  }\n}\n\ntype ContainerProps = {\n  organization: Organization;\n} & RouteComponentProps<{projectId: string}, {}>;\n\nclass ProjectGeneralSettingsContainer extends Component<ContainerProps> {\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  changedSlug: string | undefined = undefined;\n  unsubscribe = ProjectsStore.listen(() => this.onProjectsUpdate(), undefined);\n\n  onProjectsUpdate() {\n    if (!this.changedSlug) {\n      return;\n    }\n    const project = ProjectsStore.getBySlug(this.changedSlug);\n\n    if (!project) {\n      return;\n    }\n\n    browserHistory.replace(\n      recreateRoute('', {\n        ...this.props,\n        params: {\n          ...this.props.params,\n          projectId: this.changedSlug,\n        },\n      })\n    );\n  }\n\n  render() {\n    return (\n      <ProjectGeneralSettings\n        onChangeSlug={(newSlug: string) => (this.changedSlug = newSlug)}\n        {...this.props}\n      />\n    );\n  }\n}\n\nexport default withOrganization(ProjectGeneralSettingsContainer);\n"],"names":["route","RESOLVE_AGE_ALLOWED_VALUES","getResolveAgeAllowedValues","i","values","push","ORG_DISABLED_REASON","t","PlatformWrapper","_styled","target","name","styles","StyledPlatformIcon","PlatformIcon","space","fields","type","required","label","placeholder","help","transformInput","slugify","getData","data","slug","saveOnBlur","saveMessageAlertType","saveMessage","platform","options","platforms","_ref","id","value","_jsxs","children","_jsx","filterOption","createFilter","stringify","option","matchedPlatform","_ref2","subjectPrefix","resolveAge","allowedValues","formatLabel","val","Number","tn","tct","strong","allowedDomains","multiline","autosize","maxRows","rows","getValue","extractMultilineFields","setValue","convertMultilineFieldValue","scrapeJavaScript","disabled","_ref3","organization","disabledReason","props","securityToken","getDynamicText","fixed","securityTokenHeader","verifySSL","routeName","orgSlug","projectSlug","arguments","length","undefined","tmplBase","tmpl","str","normalize","toLowerCase","replace","AsyncView","AsyncComponent","getTitle","render","SentryDocumentTitle","title","this","renderComponent","displayName","PermissionAlert","access","Access","hasAccess","Alert","ProjectGeneralSettings","constructor","_defineProperty","_form","project","state","removePageFiltersStorage","removeProject","api","then","addSuccessMessage","err","addErrorMessage","window","location","assign","handleXhrErrorResponse","async","email","transferProject","status","includes","projectId","params","routeTitleGen","getEndpoints","renderRemoveProject","isProjectAdmin","isInternal","FieldGroup","linebreak","Confirm","onConfirm","handleRemoveProject","priority","confirmText","message","TextBlock","Button","renderTransferProject","handleTransferProject","renderMessage","confirm","Panel","Form","hideFooter","onFieldChange","handleTransferFieldChange","onSubmit","_data","_onSuccess","_onError","e","stopPropagation","TextField","renderBody","endpoint","Set","jsonFormProps","additionalFieldProps","features","has","team","teams","formProps","allowUndo","initialData","apiMethod","apiEndpoint","onSubmitSuccess","resp","setState","changeProjectSlug","onChangeSlug","ProjectsStore","SettingsPageHeader","JsonForm","Hook","renderHeader","PanelAlert","noMargin","link","ExternalLink","href","Origin","Referer","PanelHeader","ProjectGeneralSettingsContainer","Component","onProjectsUpdate","componentWillUnmount","unsubscribe","changedSlug","browserHistory","recreateRoute","newSlug","withOrganization"],"sourceRoot":""}