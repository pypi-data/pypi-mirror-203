{"version":3,"file":"chunks/app_views_settings_projectAlerts_settings_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/inactivePlugins.tsx","webpack:///./app/components/pluginList.tsx","webpack:///./app/data/forms/projectAlerts.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectAlerts/settings.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport {t} from 'sentry/locale';\nimport PluginIcon from 'sentry/plugins/components/pluginIcon';\nimport {space} from 'sentry/styles/space';\nimport {Plugin} from 'sentry/types';\n\ntype Props = {\n  onEnablePlugin: (plugin: Plugin) => void;\n  plugins: Plugin[];\n};\n\nfunction InactivePlugins({plugins, onEnablePlugin}: Props) {\n  if (plugins.length === 0) {\n    return null;\n  }\n\n  return (\n    <Panel>\n      <PanelHeader>{t('Inactive Integrations')}</PanelHeader>\n\n      <PanelBody>\n        <Plugins>\n          {plugins.map(plugin => (\n            <IntegrationButton\n              key={plugin.id}\n              onClick={() => onEnablePlugin(plugin)}\n              className={`ref-plugin-enable-${plugin.id}`}\n            >\n              <Label>\n                <StyledPluginIcon pluginId={plugin.id} />\n                <TextOverflow>{plugin.shortName || plugin.name}</TextOverflow>\n              </Label>\n            </IntegrationButton>\n          ))}\n        </Plugins>\n      </PanelBody>\n    </Panel>\n  );\n}\n\nconst Plugins = styled('div')`\n  display: flex;\n  padding: ${space(1)};\n  flex: 1;\n  flex-wrap: wrap;\n`;\n\nconst IntegrationButton = styled('button')`\n  margin: ${space(1)};\n  width: 175px;\n  text-align: center;\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: #889ab0;\n  letter-spacing: 0.1px;\n  font-weight: 600;\n  text-transform: uppercase;\n  border: 1px solid #eee;\n  background: inherit;\n  border-radius: ${p => p.theme.borderRadius};\n  padding: 10px;\n\n  &:hover {\n    border-color: #ccc;\n  }\n`;\n\nconst Label = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  margin-right: ${space(1)};\n`;\n\nexport default InactivePlugins;\n","import {disablePlugin, enablePlugin} from 'sentry/actionCreators/plugins';\nimport InactivePlugins from 'sentry/components/inactivePlugins';\nimport {Panel, PanelItem} from 'sentry/components/panels';\nimport PluginConfig from 'sentry/components/pluginConfig';\nimport {t} from 'sentry/locale';\nimport {Organization, Plugin, Project} from 'sentry/types';\n\ntype Props = {\n  organization: Organization;\n  pluginList: Plugin[];\n  project: Project;\n  onDisablePlugin?: (plugin: Plugin) => void;\n  onEnablePlugin?: (plugin: Plugin) => void;\n};\n\nfunction PluginList({\n  organization,\n  project,\n  pluginList,\n  onDisablePlugin = () => {},\n  onEnablePlugin = () => {},\n}: Props) {\n  const handleEnablePlugin = (plugin: Plugin) => {\n    enablePlugin({\n      projectId: project.slug,\n      orgId: organization.slug,\n      pluginId: plugin.slug,\n    });\n\n    onEnablePlugin(plugin);\n  };\n\n  const handleDisablePlugin = (plugin: Plugin) => {\n    disablePlugin({\n      projectId: project.slug,\n      orgId: organization.slug,\n      pluginId: plugin.slug,\n    });\n\n    onDisablePlugin(plugin);\n  };\n\n  if (!pluginList.length) {\n    return (\n      <Panel>\n        <PanelItem>\n          {t(\"Oops! Looks like there aren't any available integrations installed.\")}\n        </PanelItem>\n      </Panel>\n    );\n  }\n\n  return (\n    <div>\n      {pluginList\n        .filter(p => p.enabled)\n        .map(data => (\n          <PluginConfig\n            data={data}\n            organization={organization}\n            project={project}\n            key={data.id}\n            onDisablePlugin={handleDisablePlugin}\n          />\n        ))}\n\n      <InactivePlugins\n        plugins={pluginList.filter(p => !p.enabled && !p.isHidden)}\n        onEnablePlugin={handleEnablePlugin}\n      />\n    </div>\n  );\n}\n\nexport default PluginList;\n","import {Field} from 'sentry/components/forms/types';\nimport {t, tn} from 'sentry/locale';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/alerts/';\n\nconst formatMinutes = (value: number | '') => {\n  value = Number(value) / 60;\n  return tn('%s minute', '%s minutes', value);\n};\n\nexport const fields: {[key: string]: Field} = {\n  subjectTemplate: {\n    name: 'subjectTemplate',\n    type: 'string',\n\n    // additional data/props that is related to rendering of form field rather than data\n    label: t('Subject Template'),\n    placeholder: 'e.g. $shortID - $title',\n    help: t(\n      'The email subject to use (excluding the prefix) for individual alerts. Usable variables include: $title, $shortID, $projectID, $orgID, and ${tag:key}, such as ${tag:environment} or ${tag:release}.'\n    ),\n  },\n  digestsMinDelay: {\n    name: 'digestsMinDelay',\n    type: 'range',\n    min: 60,\n    max: 3600,\n    step: 60,\n    defaultValue: 300,\n    label: t('Minimum delivery interval'),\n    help: t('Notifications will be delivered at most this often.'),\n    formatLabel: formatMinutes,\n  },\n  digestsMaxDelay: {\n    name: 'digestsMaxDelay',\n    type: 'range',\n    min: 60,\n    max: 3600,\n    step: 60,\n    defaultValue: 300,\n    label: t('Maximum delivery interval'),\n    help: t('Notifications will be delivered at least this often.'),\n    formatLabel: formatMinutes,\n  },\n};\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nfunction PermissionAlert({access = ['project:write'], ...props}: Props) {\n  return (\n    <Access access={access}>\n      {({hasAccess}) =>\n        !hasAccess && (\n          <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n            {t(\n              'These settings can only be edited by users with the organization owner, manager, or admin role.'\n            )}\n          </Alert>\n        )\n      }\n    </Access>\n  );\n}\n\nexport default PermissionAlert;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport AlertLink from 'sentry/components/alertLink';\nimport {Button} from 'sentry/components/button';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport {PanelAlert} from 'sentry/components/panels';\nimport PluginList from 'sentry/components/pluginList';\nimport {fields} from 'sentry/data/forms/projectAlerts';\nimport {IconMail} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\ntype RouteParams = {projectId: string};\n\ntype Props = RouteComponentProps<RouteParams, {}> &\n  AsyncView['props'] & {\n    canEditRule: boolean;\n    organization: Organization;\n  };\n\ntype State = AsyncView['state'] & {\n  pluginList: Array<Plugin> | null;\n  project: Project | null;\n};\n\nclass Settings extends AsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      project: null,\n      pluginList: [],\n    };\n  }\n\n  getProjectEndpoint() {\n    const {organization, params} = this.props;\n    return `/projects/${organization.slug}/${params.projectId}/`;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization, params} = this.props;\n    const projectEndpoint = this.getProjectEndpoint();\n    return [\n      ['project', projectEndpoint],\n      ['pluginList', `/projects/${organization.slug}/${params.projectId}/plugins/`],\n    ];\n  }\n\n  handleEnablePlugin = (plugin: Plugin) => {\n    this.setState(prevState => ({\n      pluginList: (prevState.pluginList ?? []).map(p => {\n        if (p.id !== plugin.id) {\n          return p;\n        }\n        return {\n          ...plugin,\n          enabled: true,\n        };\n      }),\n    }));\n  };\n\n  handleDisablePlugin = (plugin: Plugin) => {\n    this.setState(prevState => ({\n      pluginList: (prevState.pluginList ?? []).map(p => {\n        if (p.id !== plugin.id) {\n          return p;\n        }\n        return {\n          ...plugin,\n          enabled: false,\n        };\n      }),\n    }));\n  };\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Alerts Settings'), projectId, false);\n  }\n\n  renderBody() {\n    const {canEditRule, organization} = this.props;\n    const {project, pluginList} = this.state;\n\n    if (!project) {\n      return null;\n    }\n\n    const projectEndpoint = this.getProjectEndpoint();\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={t('Alerts Settings')}\n          action={\n            <Button\n              to={{\n                pathname: `/organizations/${organization.slug}/alerts/rules/`,\n                query: {project: project.id},\n              }}\n              size=\"sm\"\n            >\n              {t('View Alert Rules')}\n            </Button>\n          }\n        />\n        <PermissionAlert />\n        <AlertLink to=\"/settings/account/notifications/\" icon={<IconMail />}>\n          {t(\n            'Looking to fine-tune your personal notification preferences? Visit your Account Settings'\n          )}\n        </AlertLink>\n\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={{\n            subjectTemplate: project.subjectTemplate,\n            digestsMinDelay: project.digestsMinDelay,\n            digestsMaxDelay: project.digestsMaxDelay,\n          }}\n          apiMethod=\"PUT\"\n          apiEndpoint={projectEndpoint}\n        >\n          <JsonForm\n            disabled={!canEditRule}\n            title={t('Email Settings')}\n            fields={[fields.subjectTemplate]}\n          />\n\n          <JsonForm\n            title={t('Digests')}\n            disabled={!canEditRule}\n            fields={[fields.digestsMinDelay, fields.digestsMaxDelay]}\n            renderHeader={() => (\n              <PanelAlert type=\"info\">\n                {t(\n                  'Sentry will automatically digest alerts sent by some services to avoid flooding your inbox with individual issue notifications. To control how frequently notifications are delivered, use the sliders below.'\n                )}\n              </PanelAlert>\n            )}\n          />\n        </Form>\n\n        {canEditRule && (\n          <PluginList\n            organization={organization}\n            project={project}\n            pluginList={(pluginList ?? []).filter(\n              p => p.type === 'notification' && p.hasConfiguration\n            )}\n            onEnablePlugin={this.handleEnablePlugin}\n            onDisablePlugin={this.handleDisablePlugin}\n          />\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default Settings;\n"],"names":["InactivePlugins","_ref","plugins","onEnablePlugin","length","_jsxs","Panel","children","_jsx","PanelHeader","t","PanelBody","Plugins","map","plugin","IntegrationButton","onClick","className","id","Label","StyledPluginIcon","pluginId","TextOverflow","shortName","name","displayName","_styled","target","space","p","theme","fontSizeSmall","borderRadius","styles","PluginIcon","PluginList","organization","project","pluginList","onDisablePlugin","handleDisablePlugin","disablePlugin","projectId","slug","orgId","filter","enabled","data","PluginConfig","isHidden","enablePlugin","PanelItem","route","formatMinutes","value","Number","tn","fields","subjectTemplate","type","label","placeholder","help","digestsMinDelay","min","max","step","defaultValue","formatLabel","digestsMaxDelay","routeName","orgSlug","projectSlug","arguments","undefined","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","SentryDocumentTitle","title","this","renderComponent","PermissionAlert","access","props","Access","_ref2","hasAccess","Alert","Settings","constructor","_defineProperty","setState","prevState","getDefaultState","super","getProjectEndpoint","params","getEndpoints","routeTitleGen","renderBody","canEditRule","state","projectEndpoint","Fragment","SettingsPageHeader","action","Button","to","pathname","query","size","AlertLink","icon","IconMail","Form","saveOnBlur","allowUndo","initialData","apiMethod","apiEndpoint","JsonForm","disabled","renderHeader","PanelAlert","hasConfiguration","handleEnablePlugin"],"sourceRoot":""}