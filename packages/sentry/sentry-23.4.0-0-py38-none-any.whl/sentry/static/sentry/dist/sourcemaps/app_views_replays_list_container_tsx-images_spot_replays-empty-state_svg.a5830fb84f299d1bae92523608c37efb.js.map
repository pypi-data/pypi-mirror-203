{"version":3,"file":"chunks/app_views_replays_list_container_tsx-images_spot_replays-empty-state_svg.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/components/replays/replaysFeatureBadge.tsx","webpack:///./app/utils/replays/hooks/useReplayOnboarding.tsx","webpack:///./app/utils/replays/hooks/useReplayPageview.tsx","webpack:///./app/utils/useTags.tsx","webpack:///./app/views/replays/replaySearchBar.tsx","webpack:///./app/views/replays/filters.tsx","webpack:///./app/views/replays/list/replayOnboardingPanel.tsx","webpack:///./app/views/replays/list/replaysList.tsx","webpack:///./app/views/replays/list/container.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport {space} from 'sentry/styles/space';\n\ninterface Props extends React.ComponentProps<typeof Panel> {\n  children: React.ReactNode;\n  image?: React.ReactNode;\n  noCenter?: boolean;\n}\n\nfunction OnboardingPanel({image, noCenter, children, ...props}: Props) {\n  return (\n    <Panel {...props}>\n      <Container>\n        {image ? <IlloBox>{image}</IlloBox> : null}\n        <StyledBox centered={!image && !noCenter}>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')<{centered?: boolean}>`\n  min-width: 0;\n  z-index: 1;\n\n  ${p => (p.centered ? 'text-align: center;' : '')}\n  ${p => (p.centered ? 'max-width: 600px;' : '')}\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  min-width: 150px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import FeatureBadge from 'sentry/components/featureBadge';\n\nfunction ReplaysFeatureBadge(\n  props: Omit<React.ComponentProps<typeof FeatureBadge>, 'type'>\n) {\n  return <FeatureBadge {...props} type=\"new\" />;\n}\n\nexport default ReplaysFeatureBadge;\n","import {useCallback, useEffect, useMemo} from 'react';\n\nimport {SidebarPanelKey} from 'sentry/components/sidebar/types';\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport SidebarPanelStore from 'sentry/stores/sidebarPanelStore';\nimport {Project} from 'sentry/types';\nimport {PageFilters} from 'sentry/types/core';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport useProjects from 'sentry/utils/useProjects';\nimport {useRouteContext} from 'sentry/utils/useRouteContext';\n\nfunction getSelectedProjectList(\n  selectedProjects: PageFilters['projects'],\n  projects: Project[]\n) {\n  if (selectedProjects[0] === ALL_ACCESS_PROJECTS || selectedProjects.length === 0) {\n    return projects;\n  }\n\n  const projectsByProjectId = projects.reduce<Record<string, Project>>((acc, project) => {\n    acc[project.id] = project;\n    return acc;\n  }, {});\n  return selectedProjects.map(id => projectsByProjectId[id]).filter(Boolean);\n}\n\nexport function useHaveSelectedProjectsSentAnyReplayEvents() {\n  const {projects, fetching} = useProjects();\n  const {selection} = usePageFilters();\n\n  const orgSentOneOrMoreReplayEvent = useMemo(() => {\n    const selectedProjects = getSelectedProjectList(selection.projects, projects);\n    const hasSentOneReplay = selectedProjects.some(project => project.hasReplays);\n    return hasSentOneReplay;\n  }, [selection.projects, projects]);\n\n  return {\n    hasSentOneReplay: orgSentOneOrMoreReplayEvent,\n    fetching,\n  };\n}\n\nexport function useReplayOnboardingSidebarPanel() {\n  const {location} = useRouteContext();\n  const organization = useOrganization();\n\n  useEffect(() => {\n    if (location.hash === '#replay-sidequest') {\n      SidebarPanelStore.activatePanel(SidebarPanelKey.ReplaysOnboarding);\n      trackAdvancedAnalyticsEvent('replay.list-view-setup-sidebar', {\n        organization,\n      });\n    }\n  }, [location.hash, organization]);\n\n  const activateSidebar = useCallback((event: {preventDefault: () => void}) => {\n    event.preventDefault();\n    window.location.hash = 'replay-sidequest';\n    SidebarPanelStore.activatePanel(SidebarPanelKey.ReplaysOnboarding);\n  }, []);\n\n  return {activateSidebar};\n}\n","import {useEffect, useRef} from 'react';\n\nimport ConfigStore from 'sentry/stores/configStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nfunction useReplayPageview(type: 'replay.details-time-spent' | 'replay.list-time-spent') {\n  const config = useLegacyStore(ConfigStore);\n  const location = useLocation();\n  const organization = useOrganization();\n  const startTimeRef = useRef(Date.now());\n\n  useEffect(() => {\n    const startTime = startTimeRef.current;\n\n    trackAdvancedAnalyticsEvent('replay.details-viewed', {\n      organization,\n      referrer: decodeScalar(location.query.referrer),\n      user_email: config.user.email,\n    });\n\n    return () => {\n      const endTime = Date.now();\n      trackAdvancedAnalyticsEvent(type, {\n        organization,\n        seconds: (endTime - startTime) / 1000,\n        user_email: config.user.email,\n      });\n    };\n  }, [organization, type, location.query.referrer, config.user.email]);\n}\n\nexport default useReplayPageview;\n","import TagStore from 'sentry/stores/tagStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport {TagCollection} from 'sentry/types';\n\nfunction useTags(): TagCollection {\n  return useLegacyStore(TagStore);\n}\n\nexport default useTags;\n","import {useCallback, useEffect} from 'react';\n\nimport {fetchTagValues, loadOrganizationTags} from 'sentry/actionCreators/tags';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {MAX_QUERY_LENGTH, NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {\n  Organization,\n  PageFilters,\n  SavedSearchType,\n  Tag,\n  TagCollection,\n  TagValue,\n} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {isAggregateField} from 'sentry/utils/discover/fields';\nimport {\n  FieldKind,\n  getFieldDefinition,\n  REPLAY_CLICK_FIELDS,\n  REPLAY_FIELDS,\n} from 'sentry/utils/fields';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport useApi from 'sentry/utils/useApi';\nimport useTags from 'sentry/utils/useTags';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\n/**\n * Prepare query string (e.g. strip special characters like negation operator)\n */\nfunction prepareQuery(searchQuery: string) {\n  return searchQuery.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n}\nconst getReplayFieldDefinition = (key: string) => getFieldDefinition(key, 'replay');\n\nfunction fieldDefinitionsToTagCollection(fieldKeys: string[]): TagCollection {\n  return Object.fromEntries(\n    fieldKeys.map(key => [\n      key,\n      {\n        key,\n        name: key,\n        ...getReplayFieldDefinition(key),\n      },\n    ])\n  );\n}\n\nconst REPLAY_FIELDS_AS_TAGS = fieldDefinitionsToTagCollection(REPLAY_FIELDS);\nconst REPLAY_CLICK_FIELDS_AS_TAGS = fieldDefinitionsToTagCollection(REPLAY_CLICK_FIELDS);\n\nfunction getSupportedTags(supportedTags: TagCollection, organization: Organization) {\n  return {\n    ...Object.fromEntries(\n      Object.keys(supportedTags).map(key => [\n        key,\n        {\n          ...supportedTags[key],\n          kind: getReplayFieldDefinition(key)?.kind ?? FieldKind.TAG,\n        },\n      ])\n    ),\n    ...(organization && organization.features.includes('session-replay-dom-search')\n      ? REPLAY_CLICK_FIELDS_AS_TAGS\n      : {}),\n    ...REPLAY_FIELDS_AS_TAGS,\n  };\n}\n\ntype Props = React.ComponentProps<typeof SmartSearchBar> & {\n  organization: Organization;\n  pageFilters: PageFilters;\n};\n\nfunction ReplaySearchBar(props: Props) {\n  const {organization, pageFilters} = props;\n  const api = useApi();\n  const projectIdStrings = pageFilters.projects?.map(String);\n  const tags = useTags();\n  useEffect(() => {\n    loadOrganizationTags(api, organization.slug, pageFilters);\n  }, [api, organization.slug, pageFilters]);\n\n  const getTagValues = useCallback(\n    (tag: Tag, searchQuery: string, _params: object): Promise<string[]> => {\n      if (isAggregateField(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues({\n        api,\n        orgSlug: organization.slug,\n        tagKey: tag.key,\n        search: searchQuery,\n        projectIds: projectIdStrings,\n        includeReplays: true,\n      }).then(\n        tagValues => (tagValues as TagValue[]).map(({value}) => value),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    [api, organization.slug, projectIdStrings]\n  );\n\n  return (\n    <SmartSearchBar\n      {...props}\n      onGetTagValues={getTagValues}\n      supportedTags={getSupportedTags(tags, organization)}\n      placeholder={t('Search for users, duration, count_errors, and more')}\n      prepareQuery={prepareQuery}\n      maxQueryLength={MAX_QUERY_LENGTH}\n      searchSource=\"replay_index\"\n      savedSearchType={SavedSearchType.REPLAY}\n      maxMenuHeight={500}\n      hasRecentSearches\n      fieldDefinitionGetter={getReplayFieldDefinition}\n      onSearch={(query: string) => {\n        props.onSearch?.(query);\n        const conditions = new MutableSearch(query);\n        const searchKeys = conditions.tokens.map(({key}) => key).filter(Boolean);\n\n        if (searchKeys.length > 0) {\n          trackAdvancedAnalyticsEvent('replay.search', {\n            search_keys: searchKeys.join(','),\n            organization,\n          });\n        }\n      }}\n    />\n  );\n}\n\nexport default ReplaySearchBar;\n","import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport {space} from 'sentry/styles/space';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport ReplaySearchBar from 'sentry/views/replays/replaySearchBar';\n\nfunction ReplaysFilters() {\n  const {selection} = usePageFilters();\n  const {pathname, query} = useLocation();\n  const organization = useOrganization();\n\n  return (\n    <FilterContainer>\n      <PageFilterBar condensed>\n        <ProjectPageFilter resetParamsOnChange={['cursor']} />\n        <EnvironmentPageFilter resetParamsOnChange={['cursor']} />\n        <DatePageFilter alignDropdown=\"left\" resetParamsOnChange={['cursor']} />\n      </PageFilterBar>\n      <ReplaySearchBar\n        organization={organization}\n        pageFilters={selection}\n        defaultQuery=\"\"\n        query={decodeScalar(query.query, '')}\n        onSearch={searchQuery => {\n          browserHistory.push({\n            pathname,\n            query: {\n              ...query,\n              cursor: undefined,\n              query: searchQuery.trim(),\n            },\n          });\n        }}\n      />\n    </FilterContainer>\n  );\n}\n\nconst FilterContainer = styled('div')`\n  display: inline-grid;\n  grid-template-columns: minmax(0, max-content) minmax(20rem, 1fr);\n  gap: ${space(2)};\n  width: 100%;\n  margin-bottom: ${space(2)};\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: minmax(0, 1fr);\n  }\n`;\n\nexport default ReplaysFilters;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport emptyStateImg from 'sentry-images/spot/replays-empty-state.svg';\n\nimport Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport HookOrDefault from 'sentry/components/hookOrDefault';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {replayPlatforms} from 'sentry/data/platformCategories';\nimport {IconInfo} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport PreferencesStore from 'sentry/stores/preferencesStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport {useReplayOnboardingSidebarPanel} from 'sentry/utils/replays/hooks/useReplayOnboarding';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport useProjects from 'sentry/utils/useProjects';\n\ntype Breakpoints = {\n  large: string;\n  medium: string;\n  small: string;\n  xlarge: string;\n};\n\nconst OnboardingCTAHook = HookOrDefault({\n  hookName: 'component:replay-onboarding-cta',\n  defaultComponent: ({children}) => <Fragment>{children}</Fragment>,\n});\n\nconst OnboardingAlertHook = HookOrDefault({\n  hookName: 'component:replay-onboarding-alert',\n  defaultComponent: ({children}) => <Fragment>{children}</Fragment>,\n});\n\nexport default function ReplayOnboardingPanel() {\n  const preferences = useLegacyStore(PreferencesStore);\n  const pageFilters = usePageFilters();\n  const projects = useProjects();\n  const organization = useOrganization();\n  const canCreateProjects = organization.access.includes('project:admin');\n\n  const selectedProjects = projects.projects.filter(p =>\n    pageFilters.selection.projects.includes(Number(p.id))\n  );\n\n  const hasSelectedProjects = selectedProjects.length > 0;\n\n  const allProjectsUnsupported = projects.projects.every(\n    p => !replayPlatforms.includes(p.platform!)\n  );\n\n  const allSelectedProjectsUnsupported = selectedProjects.every(\n    p => !replayPlatforms.includes(p.platform!)\n  );\n\n  // if all projects are unsupported we should prompt the user to create a project\n  // else we prompt to setup\n  const primaryAction = allProjectsUnsupported ? 'create' : 'setup';\n  // disable \"create\" if the user has insufficient permissions\n  // disable \"setup\" if the current selected pageFilters are not supported\n  const primaryActionDisabled =\n    primaryAction === 'create'\n      ? !canCreateProjects\n      : allSelectedProjectsUnsupported && hasSelectedProjects;\n\n  const breakpoints = preferences.collapsed\n    ? {\n        small: '800px',\n        medium: '992px',\n        large: '1210px',\n        xlarge: '1450px',\n      }\n    : {\n        small: '800px',\n        medium: '1175px',\n        large: '1375px',\n        xlarge: '1450px',\n      };\n\n  return (\n    <Fragment>\n      <OnboardingAlertHook>\n        {hasSelectedProjects && allSelectedProjectsUnsupported && (\n          <Alert icon={<IconInfo />}>\n            {tct(\n              `[projectMsg] [action] a project using our [link], or equivalent framework SDK.`,\n              {\n                action: primaryAction === 'create' ? t('Create') : t('Select'),\n                projectMsg: (\n                  <strong>\n                    {t(\n                      `Session Replay isn't available for project %s.`,\n                      selectedProjects[0].slug\n                    )}\n                  </strong>\n                ),\n                link: (\n                  <ExternalLink href=\"https://docs.sentry.io/platforms/javascript/session-replay/\">\n                    {t('Sentry browser SDK package')}\n                  </ExternalLink>\n                ),\n              }\n            )}\n          </Alert>\n        )}\n      </OnboardingAlertHook>\n      <OnboardingPanel\n        image={<HeroImage src={emptyStateImg} breakpoints={breakpoints} />}\n      >\n        <Feature\n          features={['session-replay-ga']}\n          organization={organization}\n          renderDisabled={() => (\n            <SetupReplaysCTA\n              orgSlug={organization.slug}\n              primaryAction={primaryAction}\n              disabled={primaryActionDisabled}\n            />\n          )}\n        >\n          <OnboardingCTAHook organization={organization}>\n            <SetupReplaysCTA\n              orgSlug={organization.slug}\n              primaryAction={primaryAction}\n              disabled={primaryActionDisabled}\n            />\n          </OnboardingCTAHook>\n        </Feature>\n      </OnboardingPanel>\n    </Fragment>\n  );\n}\n\ninterface SetupReplaysCTAProps {\n  orgSlug: string;\n  primaryAction: 'setup' | 'create';\n  disabled?: boolean;\n}\n\nexport function SetupReplaysCTA({\n  disabled,\n  primaryAction = 'setup',\n  orgSlug,\n}: SetupReplaysCTAProps) {\n  const {activateSidebar} = useReplayOnboardingSidebarPanel();\n\n  function renderCTA() {\n    if (primaryAction === 'setup') {\n      return (\n        <Tooltip\n          title={\n            <span data-test-id=\"setup-replays-tooltip\">\n              {t('Select a supported project from the projects dropdown.')}\n            </span>\n          }\n          disabled={!disabled} // we only want to show the tooltip when the button is disabled\n        >\n          <Button\n            data-test-id=\"setup-replays-btn\"\n            onClick={activateSidebar}\n            priority=\"primary\"\n            disabled={disabled}\n          >\n            {t('Set Up Replays')}\n          </Button>\n        </Tooltip>\n      );\n    }\n\n    return (\n      <Tooltip\n        title={\n          <span data-test-id=\"create-project-tooltip\">\n            {t('Only admins, managers, and owners, can create projects.')}\n          </span>\n        }\n        disabled={!disabled}\n      >\n        <Button\n          data-test-id=\"create-project-btn\"\n          to={`/organizations/${orgSlug}/projects/new/`}\n          priority=\"primary\"\n          disabled={disabled}\n        >\n          {t('Create Project')}\n        </Button>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <Fragment>\n      <h3>{t('Get to the root cause faster')}</h3>\n      <p>\n        {t(\n          'See a video-like reproduction of your user sessions so you can see what happened before, during, and after an error or latency issue occurred.'\n        )}\n      </p>\n      <ButtonList gap={1}>\n        {renderCTA()}\n        <Button\n          href=\"https://docs.sentry.io/platforms/javascript/session-replay/\"\n          external\n        >\n          {t('Read Docs')}\n        </Button>\n      </ButtonList>\n    </Fragment>\n  );\n}\n\nconst HeroImage = styled('img')<{breakpoints: Breakpoints}>`\n  @media (min-width: ${p => p.breakpoints.small}) {\n    user-select: none;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 220px;\n    margin-top: auto;\n    margin-bottom: auto;\n    transform: translateX(-50%);\n    left: 50%;\n  }\n\n  @media (min-width: ${p => p.breakpoints.medium}) {\n    transform: translateX(-55%);\n    width: 300px;\n    min-width: 300px;\n  }\n\n  @media (min-width: ${p => p.breakpoints.large}) {\n    transform: translateX(-60%);\n    width: 380px;\n    min-width: 380px;\n  }\n\n  @media (min-width: ${p => p.breakpoints.xlarge}) {\n    transform: translateX(-65%);\n    width: 420px;\n    min-width: 420px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n","import {Fragment, useMemo} from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport Pagination from 'sentry/components/pagination';\nimport type {Organization} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {DEFAULT_SORT} from 'sentry/utils/replays/fetchReplayList';\nimport useReplayList from 'sentry/utils/replays/hooks/useReplayList';\nimport {useHaveSelectedProjectsSentAnyReplayEvents} from 'sentry/utils/replays/hooks/useReplayOnboarding';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport ReplayOnboardingPanel from 'sentry/views/replays/list/replayOnboardingPanel';\nimport ReplayTable from 'sentry/views/replays/replayTable';\nimport {ReplayColumns} from 'sentry/views/replays/replayTable/types';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\nimport {REPLAY_LIST_FIELDS} from 'sentry/views/replays/types';\n\nfunction ReplaysList() {\n  const location = useLocation<ReplayListLocationQuery>();\n  const organization = useOrganization();\n\n  const eventView = useMemo(() => {\n    const query = decodeScalar(location.query.query, '');\n    const conditions = new MutableSearch(query);\n\n    return EventView.fromNewQueryWithLocation(\n      {\n        id: '',\n        name: '',\n        version: 2,\n        fields: REPLAY_LIST_FIELDS,\n        projects: [],\n        query: conditions.formatString(),\n        orderby: decodeScalar(location.query.sort, DEFAULT_SORT),\n      },\n      location\n    );\n  }, [location]);\n\n  const hasSessionReplay = organization.features.includes('session-replay');\n  const {hasSentOneReplay, fetching} = useHaveSelectedProjectsSentAnyReplayEvents();\n\n  return hasSessionReplay && !fetching && hasSentOneReplay ? (\n    <ReplaysListTable\n      eventView={eventView}\n      location={location}\n      organization={organization}\n    />\n  ) : (\n    <ReplayOnboardingPanel />\n  );\n}\n\nfunction ReplaysListTable({\n  eventView,\n  location,\n  organization,\n}: {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n}) {\n  const {replays, pageLinks, isFetching, fetchError} = useReplayList({\n    eventView,\n    location,\n    organization,\n  });\n\n  return (\n    <Fragment>\n      <ReplayTable\n        fetchError={fetchError}\n        isFetching={isFetching}\n        replays={replays}\n        sort={eventView.sorts[0]}\n        visibleColumns={[\n          ReplayColumns.replay,\n          ReplayColumns.os,\n          ReplayColumns.browser,\n          ReplayColumns.duration,\n          ReplayColumns.countErrors,\n          ReplayColumns.activity,\n        ]}\n      />\n      <Pagination\n        pageLinks={pageLinks}\n        onCursor={(cursor, path, searchQuery) => {\n          trackAdvancedAnalyticsEvent('replay.list-paginated', {\n            organization,\n            direction: cursor?.endsWith(':1') ? 'prev' : 'next',\n          });\n          browserHistory.push({\n            pathname: path,\n            query: {...searchQuery, cursor},\n          });\n        }}\n      />\n    </Fragment>\n  );\n}\n\nexport default ReplaysList;\n","import * as Layout from 'sentry/components/layouts/thirds';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport {PageHeadingQuestionTooltip} from 'sentry/components/pageHeadingQuestionTooltip';\nimport ReplaysFeatureBadge from 'sentry/components/replays/replaysFeatureBadge';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport useReplayPageview from 'sentry/utils/replays/hooks/useReplayPageview';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport ReplaysFilters from 'sentry/views/replays/filters';\nimport ReplaysList from 'sentry/views/replays/list/replaysList';\n\nfunction ReplaysListContainer() {\n  useReplayPageview('replay.list-time-spent');\n  const {slug: orgSlug} = useOrganization();\n\n  return (\n    <SentryDocumentTitle title={`Session Replay - ${orgSlug}`}>\n      <Layout.Header>\n        <Layout.HeaderContent>\n          <Layout.Title>\n            {t('Session Replay')}\n            <PageHeadingQuestionTooltip\n              title={t(\n                'A view of available video-like reproductions of user sessions so you can visualize repro steps to debug issues faster.'\n              )}\n              docsUrl=\"https://docs.sentry.io/product/session-replay/\"\n            />\n            <ReplaysFeatureBadge />\n          </Layout.Title>\n        </Layout.HeaderContent>\n      </Layout.Header>\n      <PageFiltersContainer>\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <ReplaysFilters />\n            <ReplaysList />\n          </Layout.Main>\n        </Layout.Body>\n      </PageFiltersContainer>\n    </SentryDocumentTitle>\n  );\n}\n\nexport default ReplaysListContainer;\n"],"names":["OnboardingPanel","_ref","image","noCenter","children","props","_jsx","Panel","_jsxs","Container","IlloBox","StyledBox","centered","displayName","_styled","target","space","p","theme","breakpoints","small","medium","ReplaysFeatureBadge","FeatureBadge","type","useHaveSelectedProjectsSentAnyReplayEvents","projects","fetching","useProjects","selection","usePageFilters","orgSentOneOrMoreReplayEvent","useMemo","selectedProjects","ALL_ACCESS_PROJECTS","length","projectsByProjectId","reduce","acc","project","id","map","filter","Boolean","getSelectedProjectList","some","hasReplays","hasSentOneReplay","useReplayOnboardingSidebarPanel","location","useRouteContext","organization","useOrganization","useEffect","hash","SidebarPanelStore","SidebarPanelKey","trackAdvancedAnalyticsEvent","activateSidebar","useCallback","event","preventDefault","window","config","useLegacyStore","ConfigStore","useLocation","startTimeRef","useRef","Date","now","startTime","current","referrer","decodeScalar","query","user_email","user","email","endTime","seconds","TagStore","SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","prepareQuery","searchQuery","replace","getReplayFieldDefinition","key","getFieldDefinition","fieldDefinitionsToTagCollection","fieldKeys","Object","fromEntries","name","REPLAY_FIELDS_AS_TAGS","REPLAY_FIELDS","REPLAY_CLICK_FIELDS_AS_TAGS","REPLAY_CLICK_FIELDS","getSupportedTags","supportedTags","keys","kind","FieldKind","features","includes","ReplaySearchBar","pageFilters","api","useApi","projectIdStrings","String","tags","useTags","loadOrganizationTags","slug","getTagValues","tag","_params","isAggregateField","Promise","resolve","fetchTagValues","orgSlug","tagKey","search","projectIds","includeReplays","then","tagValues","value","Error","SmartSearchBar","onGetTagValues","placeholder","t","maxQueryLength","MAX_QUERY_LENGTH","searchSource","savedSearchType","SavedSearchType","maxMenuHeight","hasRecentSearches","fieldDefinitionGetter","onSearch","searchKeys","MutableSearch","tokens","_ref2","search_keys","join","ReplaysFilters","pathname","FilterContainer","PageFilterBar","condensed","ProjectPageFilter","resetParamsOnChange","EnvironmentPageFilter","DatePageFilter","alignDropdown","defaultQuery","browserHistory","cursor","undefined","trim","OnboardingCTAHook","HookOrDefault","hookName","defaultComponent","Fragment","OnboardingAlertHook","ReplayOnboardingPanel","preferences","PreferencesStore","canCreateProjects","access","Number","hasSelectedProjects","allProjectsUnsupported","every","replayPlatforms","platform","allSelectedProjectsUnsupported","primaryAction","primaryActionDisabled","collapsed","large","xlarge","Alert","icon","IconInfo","tct","action","projectMsg","link","ExternalLink","href","HeroImage","src","emptyStateImg","Feature","renderDisabled","SetupReplaysCTA","disabled","_ref3","ButtonList","gap","Tooltip","title","Button","onClick","priority","to","external","ButtonBar","styles","ReplaysListTable","eventView","replays","pageLinks","isFetching","fetchError","useReplayList","ReplayTable","sort","sorts","visibleColumns","ReplayColumns","Pagination","onCursor","path","direction","endsWith","conditions","EventView","version","fields","REPLAY_LIST_FIELDS","formatString","orderby","DEFAULT_SORT","hasSessionReplay","ReplaysListContainer","useReplayPageview","SentryDocumentTitle","Layout","PageHeadingQuestionTooltip","docsUrl","PageFiltersContainer","fullWidth","ReplaysList"],"sourceRoot":""}