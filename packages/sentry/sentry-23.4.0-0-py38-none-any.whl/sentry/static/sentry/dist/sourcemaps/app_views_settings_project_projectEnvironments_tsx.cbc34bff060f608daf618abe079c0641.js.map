{"version":3,"file":"chunks/app_views_settings_project_projectEnvironments_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"slBA6BA,SAASA,EAAQC,GAUP,IAVQ,SAChBC,EAAQ,UACRC,EAAS,SACTC,EAAQ,MACRC,EAAK,GACLC,EAAE,gBACFC,EAAkB,SAAQ,MAC1BC,GAAQ,EAAK,SACbC,GAAW,KACRC,GACGT,EACN,MAAMU,GAASC,EAAAA,EAAAA,KACTC,EAAYR,EAAQS,EAAAA,MAAST,QAASU,EACtCC,EAA+B,iBAAPV,EAAkB,CAACW,SAAUX,EAAID,MAAOQ,GAAaP,EAC7EY,GAASC,EAAAA,EAAAA,GAAaH,GAEtBI,EAAShB,IAAWc,EAAQV,IAAUG,EAAOP,SAASc,EAAQV,GAEpE,OACEa,EAAAA,EAAAA,IAACC,EAAQ,CACPnB,UAAWoB,IAAW,CAAC,CAAChB,GAAkBa,GAASjB,GACnDM,SAAUA,EAASP,UAEnBmB,EAAAA,EAAAA,IAACG,EAAAA,KAAU,IAAKd,EAAOe,kBAAmBjB,EAAOF,GAAIG,EAAW,GAAKS,EAAOhB,SACzEA,KAIT,CA5BSF,EAAQ0B,YAAA,WA8BjB,UAEMJ,GAAWK,EAAAA,EAAAA,GAAO,KAAI,CAC1BC,kBAAmBC,GAAiB,aAATA,EAAmBX,OAAA,aAD/BS,EAGbG,GACAA,EAAErB,UACD,uBAEOqB,EAAEC,MAAMtB,+EAGLqB,EAAEC,MAAMtB,wCAGtB,I,mECxED,MAAMuB,EAA6B,OAC7BC,EAAyB,mBAExB,SAASC,EAAkBC,GAChC,OAAIA,EAAIC,KACCC,mBAAmBF,EAAIC,MAG5BD,EAAIT,YACCW,mBAAmBF,EAAIT,aAEzBM,CACT,CAEO,SAASM,EAAeH,GAC7B,OAAOA,EAAIC,MAAQD,EAAIT,aAAeO,CACxC,C,qRCXA,SAASM,EAAetC,GAAgD,IAA/C,OAACuC,EAAS,CAAC,oBAAqB9B,GAAaT,EACpE,OACEoB,EAAAA,EAAAA,IAACoB,EAAAA,EAAM,CAACD,OAAQA,EAAOtC,SACpBwC,IAAA,IAAC,UAACC,GAAUD,EAAA,OACVC,IACCtB,EAAAA,EAAAA,IAACuB,EAAAA,GAAK,CAAC,eAAa,2BAA2BC,KAAK,aAAcnC,EAAKR,UACpE4C,EAAAA,EAAAA,GACC,oGAGL,GAIT,CAdSP,EAAeb,YAAA,kBAgBxB,S,mkCCYA,MAAMqB,UAA4BC,EAAAA,UAAwBC,cAAA,SAAAC,YAAAC,EAAAA,EAAAA,GAAA,aACzC,CACbC,QAAS,KACTC,aAAc,KACdC,WAAW,KA6CbH,EAAAA,EAAAA,GAAA,kBACY,CAAChB,EAAkBoB,KAC7B,MAAM,aAACC,GAAgBC,KAAK/C,OACtB,UAACgD,GAAaD,KAAK/C,MAAMiD,OAE/BF,KAAK/C,MAAMkD,IAAIC,QACZ,aAAYL,EAAaM,QAAQJ,mBAA0BxB,EAAAA,EAAAA,GAC1DC,MAEF,CACE4B,OAAQ,MACRC,KAAM,CACJ5B,KAAMD,EAAIC,KACV6B,SAAUV,GAEZW,QAASA,MACPC,EAAAA,EAAAA,KACEC,EAAAA,EAAAA,IAAI,wBAAyB,CAC3BC,aAAa/B,EAAAA,EAAAA,GAAeH,KAE/B,EAEHmC,MAAOA,MACLC,EAAAA,EAAAA,KACEH,EAAAA,EAAAA,IAAI,iCAAkC,CACpCC,aAAa/B,EAAAA,EAAAA,GAAeH,KAE/B,EAEHqC,SAAUf,KAAKgB,UAAUC,KAAKjB,OAEjC,GACF,CA1EDkB,oBACElB,KAAKgB,WACP,CAEAG,mBAAmBC,GAEfpB,KAAK/C,MAAMoE,SAAS7D,SAAS8D,SAAS,aACtCF,EAAUC,SAAS7D,SAAS8D,SAAS,YAErCtB,KAAKgB,WAET,CAEAA,YACE,MAAMR,EAAWR,KAAK/C,MAAMoE,SAAS7D,SAAS8D,SAAS,WAElDtB,KAAKuB,MAAM1B,WACdG,KAAKwB,SAAS,CAAC3B,WAAW,IAG5B,MAAM,aAACE,GAAgBC,KAAK/C,OACtB,UAACgD,GAAaD,KAAK/C,MAAMiD,OAC/BF,KAAK/C,MAAMkD,IAAIC,QAAS,aAAYL,EAAaM,QAAQJ,kBAA2B,CAClFrD,MAAO,CACL6E,WAAYjB,EAAW,SAAW,WAEpCC,QAASb,IACPI,KAAKwB,SAAS,CAAC5B,eAAcC,WAAW,GAAO,GAGrD,CAEA6B,sBACE,MAAM,aAAC3B,GAAgBC,KAAK/C,OACtB,UAACgD,GAAaD,KAAK/C,MAAMiD,OAC/BF,KAAK/C,MAAMkD,IAAIC,QAAS,aAAYL,EAAaM,QAAQJ,KAAc,CACrEQ,QAASd,IACPK,KAAKwB,SAAS,CAAC7B,WAAS,GAG9B,CAoCAgC,cACE,MACMC,EADW5B,KAAK/C,MAAMoE,SAAS7D,SAAS8D,SAAS,YAEnDjC,EAAAA,EAAAA,GAAE,4CACFA,EAAAA,EAAAA,GAAE,wCACN,OAAOzB,EAAAA,EAAAA,IAACiE,EAAAA,EAAY,CAAApF,SAAEmF,GACxB,CAQAE,iCAGE,OADiB9B,KAAK/C,MAAMoE,SAAS7D,SAAS8D,SAAS,WAE9C,MAGP1D,EAAAA,EAAAA,IAACmE,EAAc,CACbpD,KAAMqD,EAAAA,GACNpB,YAAa,CACXqB,GAAID,EAAAA,GACJrD,KAAMqD,EAAAA,GACN/D,YAAa+D,EAAAA,IAEfE,aAAW,GAGjB,CAEAC,sBAAsBC,GACpB,MAAM5B,EAAWR,KAAK/C,MAAMoE,SAAS7D,SAAS8D,SAAS,WACjDe,EAAa7B,GAAWnB,EAAAA,EAAAA,GAAE,SAAUA,EAAAA,EAAAA,GAAE,QAE5C,OACEiD,EAAAA,EAAAA,IAACC,EAAAA,SAAQ,CAAA9F,SAAA,CACNuD,KAAK8B,iCACLM,EAAKI,KAAI9D,IACRd,EAAAA,EAAAA,IAACmE,EAAc,CAEbpD,KAAMD,EAAIC,KACViC,YAAalC,EACb8B,SAAUA,EACViC,OAAQzC,KAAK0C,UACbC,WAAYN,EACZO,kBAAgB,GANXlE,EAAIuD,QAWnB,CAEAY,aACE,MAAM,aAACjD,EAAY,UAAEC,GAAaG,KAAKuB,MAEvC,OAAI1B,GACKjC,EAAAA,EAAAA,IAACkF,EAAAA,EAAgB,KAIxBlF,EAAAA,EAAAA,IAACmF,EAAAA,EAAS,CAAAtG,SACPmD,GAAcoD,OACXhD,KAAKmC,sBAAsBvC,GAC3BI,KAAK2B,eAGf,CAEAsB,SACE,MAAM,OAACC,EAAM,OAAEhD,EAAM,SAAEmB,GAAYrB,KAAK/C,MAClCuD,EAAWa,EAAS7D,SAAS8D,SAAS,WAEtC6B,GAAUC,EAAAA,EAAAA,GAAc,GAAI,CAACF,SAAQhD,SAAQmD,UAAW,IAC9D,OACEf,EAAAA,EAAAA,IAAA,OAAA7F,SAAA,EACEmB,EAAAA,EAAAA,IAAC0F,EAAAA,EAAmB,CAACC,OAAOlE,EAAAA,EAAAA,GAAE,gBAAiBmE,YAAatD,EAAOD,aACnErC,EAAAA,EAAAA,IAAC6F,EAAAA,EAAkB,CACjBF,OAAOlE,EAAAA,EAAAA,GAAE,uBACTqE,MACEpB,EAAAA,EAAAA,IAACqB,EAAAA,EAAO,CAACC,YAAU,EAAAnH,SAAA,EACjBmB,EAAAA,EAAAA,IAACrB,EAAAA,EAAQ,CAACM,GAAIsG,EAASpG,OAAK,EAACJ,SAAUA,KAAO6D,EAAS/D,UACpD4C,EAAAA,EAAAA,GAAE,mBAELzB,EAAAA,EAAAA,IAACrB,EAAAA,EAAQ,CAACM,GAAK,GAAEsG,WAAkBpG,OAAK,EAACJ,SAAUA,IAAM6D,EAAS/D,UAC/D4C,EAAAA,EAAAA,GAAE,kBAKXzB,EAAAA,EAAAA,IAACkB,EAAAA,EAAe,KAEhBwD,EAAAA,EAAAA,IAACuB,EAAAA,GAAK,CAAApH,SAAA,EACJmB,EAAAA,EAAAA,IAACkG,EAAAA,GAAW,CAAArH,SAAE+D,GAAWnB,EAAAA,EAAAA,GAAE,WAAYA,EAAAA,EAAAA,GAAE,yBACxCW,KAAK6C,kBAId,EAaF,SAASd,EAAcvF,GAQV,IARW,YACtBoE,EAAW,KACXjC,EAAI,OACJ8D,EAAM,iBACNG,GAAmB,EAAK,YACxBV,GAAc,EAAK,SACnB1B,GAAW,EAAK,WAChBmC,EAAa,IACJnG,EACT,OACE8F,EAAAA,EAAAA,IAACyB,EAAe,CAAAtH,SAAA,EACdmB,EAAAA,EAAAA,IAACoG,EAAI,CAAAvH,SAAEyF,GAAc7C,EAAAA,EAAAA,GAAE,oBAAsBV,KAC7Cf,EAAAA,EAAAA,IAACoB,EAAAA,EAAM,CAACD,OAAQ,CAAC,iBAAiBtC,SAC/BwC,IAAA,IAAC,UAACC,GAAUD,EAAA,OACXrB,EAAAA,EAAAA,IAAC2E,EAAAA,SAAQ,CAAA9F,SACNmG,GAAoBH,IACnB7E,EAAAA,EAAAA,IAACqG,EAAiB,CAChBC,KAAK,KACLlH,UAAWkC,EACXiF,QAASA,IAAM1B,EAAO7B,GAAcJ,GAAU/D,SAE7CkG,KAGI,MAKrB,CAjOMrD,EAAmBrB,YAAA,sBAoMhB8D,EAAc9D,YAAA,iBA+BvB,MAAM8F,GAAkB7F,EAAAA,EAAAA,GAAOkG,EAAAA,GAAS,CAAA3G,OAAA,YAAhBS,CAAiB,CAAAS,KAAA,UAAA0F,OAAA,qDAKnCL,GAAO9F,EAAAA,EAAAA,GAAO,MAAK,CAAAT,OAAA,YAAZS,CAAa,CAAAS,KAAA,SAAA0F,OAAA,oCAKpBJ,GAAoB/F,EAAAA,EAAAA,GAAOoG,EAAAA,GAAM,CAAA7G,OAAA,YAAbS,CAAc,gBACvBqG,EAAAA,EAAAA,GAAM,IAAI,KAI3B,GAAeC,EAAAA,EAAAA,GAAQlF,E","sources":["webpack:///./app/components/links/listLink.tsx","webpack:///./app/utils/environment.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/project/projectEnvironments.tsx"],"sourcesContent":["import {Link as RouterLink} from 'react-router';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\nimport {LocationDescriptor} from 'history';\nimport * as qs from 'query-string';\n\nimport useRouter from 'sentry/utils/useRouter';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\ntype LinkProps = Omit<React.ComponentProps<typeof RouterLink>, 'to'>;\n\ntype Props = LinkProps & {\n  /**\n   * Link target. We don't want to expose the ToLocationFunction on this component.\n   */\n  to: LocationDescriptor;\n  /**\n   * The class to apply when the link is 'active'\n   */\n  activeClassName?: string;\n  disabled?: boolean;\n  index?: boolean;\n  /**\n   * Should be should be supplied by the parent component\n   */\n  isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;\n  query?: string;\n};\n\nfunction ListLink({\n  children,\n  className,\n  isActive,\n  query,\n  to,\n  activeClassName = 'active',\n  index = false,\n  disabled = false,\n  ...props\n}: Props) {\n  const router = useRouter();\n  const queryData = query ? qs.parse(query) : undefined;\n  const targetLocation = typeof to === 'string' ? {pathname: to, query: queryData} : to;\n  const target = normalizeUrl(targetLocation);\n\n  const active = isActive?.(target, index) ?? router.isActive(target, index);\n\n  return (\n    <StyledLi\n      className={classNames({[activeClassName]: active}, className)}\n      disabled={disabled}\n    >\n      <RouterLink {...props} onlyActiveOnIndex={index} to={disabled ? '' : target}>\n        {children}\n      </RouterLink>\n    </StyledLi>\n  );\n}\n\nexport default ListLink;\n\nconst StyledLi = styled('li', {\n  shouldForwardProp: prop => prop !== 'disabled',\n})<{disabled?: boolean}>`\n  ${p =>\n    p.disabled &&\n    `\n   a {\n    color:${p.theme.disabled} !important;\n    pointer-events: none;\n    :hover {\n      color: ${p.theme.disabled}  !important;\n    }\n   }\n`}\n`;\n","import {Environment} from 'sentry/types';\n\nconst DEFAULT_EMPTY_ROUTING_NAME = 'none';\nconst DEFAULT_EMPTY_ENV_NAME = '(No Environment)';\n\nexport function getUrlRoutingName(env: Partial<Environment>) {\n  if (env.name) {\n    return encodeURIComponent(env.name);\n  }\n\n  if (env.displayName) {\n    return encodeURIComponent(env.displayName);\n  }\n  return DEFAULT_EMPTY_ROUTING_NAME;\n}\n\nexport function getDisplayName(env: Partial<Environment>) {\n  return env.name || env.displayName || DEFAULT_EMPTY_ENV_NAME;\n}\n","import Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nfunction PermissionAlert({access = ['project:write'], ...props}: Props) {\n  return (\n    <Access access={access}>\n      {({hasAccess}) =>\n        !hasAccess && (\n          <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n            {t(\n              'These settings can only be edited by users with the organization owner, manager, or admin role.'\n            )}\n          </Alert>\n        )\n      }\n    </Access>\n  );\n}\n\nexport default PermissionAlert;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport Access from 'sentry/components/acl/access';\nimport {Button} from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport ListLink from 'sentry/components/links/listLink';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport NavTabs from 'sentry/components/navTabs';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {ALL_ENVIRONMENTS_KEY} from 'sentry/constants';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Environment, Organization, Project} from 'sentry/types';\nimport {getDisplayName, getUrlRoutingName} from 'sentry/utils/environment';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport withApi from 'sentry/utils/withApi';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n} & RouteComponentProps<{projectId: string}, {}>;\n\ntype State = {\n  environments: null | Environment[];\n  isLoading: boolean;\n  project: null | Project;\n};\n\nclass ProjectEnvironments extends Component<Props, State> {\n  state: State = {\n    project: null,\n    environments: null,\n    isLoading: true,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      this.props.location.pathname.endsWith('hidden/') !==\n      prevProps.location.pathname.endsWith('hidden/')\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData() {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n\n    if (!this.state.isLoading) {\n      this.setState({isLoading: true});\n    }\n\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n    this.props.api.request(`/projects/${organization.slug}/${projectId}/environments/`, {\n      query: {\n        visibility: isHidden ? 'hidden' : 'visible',\n      },\n      success: environments => {\n        this.setState({environments, isLoading: false});\n      },\n    });\n  }\n\n  fetchProjectDetails() {\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n    this.props.api.request(`/projects/${organization.slug}/${projectId}/`, {\n      success: project => {\n        this.setState({project});\n      },\n    });\n  }\n\n  // Toggle visibility of environment\n  toggleEnv = (env: Environment, shouldHide: boolean) => {\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n\n    this.props.api.request(\n      `/projects/${organization.slug}/${projectId}/environments/${getUrlRoutingName(\n        env\n      )}/`,\n      {\n        method: 'PUT',\n        data: {\n          name: env.name,\n          isHidden: shouldHide,\n        },\n        success: () => {\n          addSuccessMessage(\n            tct('Updated [environment]', {\n              environment: getDisplayName(env),\n            })\n          );\n        },\n        error: () => {\n          addErrorMessage(\n            tct('Unable to update [environment]', {\n              environment: getDisplayName(env),\n            })\n          );\n        },\n        complete: this.fetchData.bind(this),\n      }\n    );\n  };\n\n  renderEmpty() {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    const message = isHidden\n      ? t(\"You don't have any hidden environments.\")\n      : t(\"You don't have any environments yet.\");\n    return <EmptyMessage>{message}</EmptyMessage>;\n  }\n\n  /**\n   * Renders rows for \"system\" environments:\n   * - \"All Environments\"\n   * - \"No Environment\"\n   *\n   */\n  renderAllEnvironmentsSystemRow() {\n    // Not available in \"Hidden\" tab\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    if (isHidden) {\n      return null;\n    }\n    return (\n      <EnvironmentRow\n        name={ALL_ENVIRONMENTS_KEY}\n        environment={{\n          id: ALL_ENVIRONMENTS_KEY,\n          name: ALL_ENVIRONMENTS_KEY,\n          displayName: ALL_ENVIRONMENTS_KEY,\n        }}\n        isSystemRow\n      />\n    );\n  }\n\n  renderEnvironmentList(envs: Environment[]) {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    const buttonText = isHidden ? t('Show') : t('Hide');\n\n    return (\n      <Fragment>\n        {this.renderAllEnvironmentsSystemRow()}\n        {envs.map(env => (\n          <EnvironmentRow\n            key={env.id}\n            name={env.name}\n            environment={env}\n            isHidden={isHidden}\n            onHide={this.toggleEnv}\n            actionText={buttonText}\n            shouldShowAction\n          />\n        ))}\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {environments, isLoading} = this.state;\n\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    return (\n      <PanelBody>\n        {environments?.length\n          ? this.renderEnvironmentList(environments)\n          : this.renderEmpty()}\n      </PanelBody>\n    );\n  }\n\n  render() {\n    const {routes, params, location} = this.props;\n    const isHidden = location.pathname.endsWith('hidden/');\n\n    const baseUrl = recreateRoute('', {routes, params, stepBack: -1});\n    return (\n      <div>\n        <SentryDocumentTitle title={t('Environments')} projectSlug={params.projectId} />\n        <SettingsPageHeader\n          title={t('Manage Environments')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink to={baseUrl} index isActive={() => !isHidden}>\n                {t('Environments')}\n              </ListLink>\n              <ListLink to={`${baseUrl}hidden/`} index isActive={() => isHidden}>\n                {t('Hidden')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n        <PermissionAlert />\n\n        <Panel>\n          <PanelHeader>{isHidden ? t('Hidden') : t('Active Environments')}</PanelHeader>\n          {this.renderBody()}\n        </Panel>\n      </div>\n    );\n  }\n}\n\ntype RowProps = {\n  environment: Environment;\n  name: string;\n  actionText?: string;\n  isHidden?: boolean;\n  isSystemRow?: boolean;\n  onHide?: (env: Environment, isHidden: boolean) => void;\n  shouldShowAction?: boolean;\n};\n\nfunction EnvironmentRow({\n  environment,\n  name,\n  onHide,\n  shouldShowAction = false,\n  isSystemRow = false,\n  isHidden = false,\n  actionText = '',\n}: RowProps) {\n  return (\n    <EnvironmentItem>\n      <Name>{isSystemRow ? t('All Environments') : name}</Name>\n      <Access access={['project:write']}>\n        {({hasAccess}) => (\n          <Fragment>\n            {shouldShowAction && onHide && (\n              <EnvironmentButton\n                size=\"xs\"\n                disabled={!hasAccess}\n                onClick={() => onHide(environment, !isHidden)}\n              >\n                {actionText}\n              </EnvironmentButton>\n            )}\n          </Fragment>\n        )}\n      </Access>\n    </EnvironmentItem>\n  );\n}\n\nconst EnvironmentItem = styled(PanelItem)`\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Name = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst EnvironmentButton = styled(Button)`\n  margin-left: ${space(0.5)};\n`;\n\nexport {ProjectEnvironments};\nexport default withApi(ProjectEnvironments);\n"],"names":["ListLink","_ref","children","className","isActive","query","to","activeClassName","index","disabled","props","router","useRouter","queryData","qs","undefined","targetLocation","pathname","target","normalizeUrl","active","_jsx","StyledLi","classNames","RouterLink","onlyActiveOnIndex","displayName","_styled","shouldForwardProp","prop","p","theme","DEFAULT_EMPTY_ROUTING_NAME","DEFAULT_EMPTY_ENV_NAME","getUrlRoutingName","env","name","encodeURIComponent","getDisplayName","PermissionAlert","access","Access","_ref2","hasAccess","Alert","type","t","ProjectEnvironments","Component","constructor","arguments","_defineProperty","project","environments","isLoading","shouldHide","organization","this","projectId","params","api","request","slug","method","data","isHidden","success","addSuccessMessage","tct","environment","error","addErrorMessage","complete","fetchData","bind","componentDidMount","componentDidUpdate","prevProps","location","endsWith","state","setState","visibility","fetchProjectDetails","renderEmpty","message","EmptyMessage","renderAllEnvironmentsSystemRow","EnvironmentRow","ALL_ENVIRONMENTS_KEY","id","isSystemRow","renderEnvironmentList","envs","buttonText","_jsxs","Fragment","map","onHide","toggleEnv","actionText","shouldShowAction","renderBody","LoadingIndicator","PanelBody","length","render","routes","baseUrl","recreateRoute","stepBack","SentryDocumentTitle","title","projectSlug","SettingsPageHeader","tabs","NavTabs","underlined","Panel","PanelHeader","EnvironmentItem","Name","EnvironmentButton","size","onClick","PanelItem","styles","Button","space","withApi"],"sourceRoot":""}