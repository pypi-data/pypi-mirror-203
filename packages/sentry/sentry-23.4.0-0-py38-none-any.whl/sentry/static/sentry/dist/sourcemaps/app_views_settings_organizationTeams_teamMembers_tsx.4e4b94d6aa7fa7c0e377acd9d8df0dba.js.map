{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamMembers_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/roleSelectControl.tsx","webpack:///./app/utils/orgRole.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationTeams/roleOverwriteWarning.tsx","webpack:///./app/views/settings/organizationTeams/teamMembersRow.tsx","webpack:///./app/views/settings/organizationTeams/teamMembers.tsx","webpack:///./app/views/settings/organizationTeams/utils.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport SelectControl, {\n  ControlProps,\n} from 'sentry/components/forms/controls/selectControl';\nimport {MemberRole} from 'sentry/types';\n\ntype OptionType = {\n  details: React.ReactNode;\n  disabled: boolean;\n  label: string;\n  value: string;\n};\n\ntype Props = Omit<ControlProps<OptionType>, 'onChange' | 'value'> & {\n  disableUnallowed: boolean;\n  roles: MemberRole[];\n  /**\n   * Narrower type than SelectControl because there is no empty value\n   */\n  onChange?: (value: OptionType) => void;\n  value?: string | null;\n};\n\nfunction RoleSelectControl({roles, disableUnallowed, ...props}: Props) {\n  return (\n    <SelectControl\n      options={roles?.map(\n        (r: MemberRole) =>\n          ({\n            value: r.id,\n            label: r.name,\n            disabled: (disableUnallowed && !r.allowed) || r.isRetired,\n            details: <Details>{r.desc}</Details>,\n          } as OptionType)\n      )}\n      showDividers\n      {...props}\n    />\n  );\n}\n\nexport default RoleSelectControl;\n\nconst Details = styled('span')`\n  display: inline-block;\n  width: 20rem;\n`;\n","import {OrgRole} from 'sentry/types';\n\nexport function getEffectiveOrgRole(memberOrgRoles: string[], orgRoleList: OrgRole[]) {\n  const orgRoleMap = orgRoleList.reduce((acc, role, index) => {\n    acc[role.id] = {index, role};\n    return acc;\n  }, {});\n\n  // sort by ascending index (high to low priority)\n  memberOrgRoles.sort((a, b) => orgRoleMap[b].index - orgRoleMap[a].index);\n\n  return orgRoleMap[memberOrgRoles[0]]?.role;\n}\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {PanelAlert} from 'sentry/components/panels';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {IconInfo} from 'sentry/icons';\nimport {tct} from 'sentry/locale';\nimport {OrgRole, TeamRole} from 'sentry/types';\n\ntype Props = {\n  orgRole: OrgRole['id'] | undefined;\n  orgRoleList: OrgRole[];\n  teamRoleList: TeamRole[];\n  isSelf?: boolean;\n};\n\nexport function RoleOverwriteIcon(props: Props) {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <Tooltip title={getOverwriteString(props)}>\n      <IconInfo size=\"sm\" color=\"gray300\" />\n    </Tooltip>\n  );\n}\n\nexport function RoleOverwritePanelAlert(props: Props) {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <PanelAlert data-test-id=\"alert-role-overwrite\">\n      {getOverwriteString(props)}\n    </PanelAlert>\n  );\n}\n\n/**\n * Check that the user's org role has a minimum team role that maps to the lowest\n * possible team role\n */\nexport function hasOrgRoleOverwrite(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList} = props;\n\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  return teamRoleList.findIndex(r => r.id === orgRoleObj?.minimumTeamRole) > 0;\n}\n\n/**\n * Standardize string so situations where org-level vs team-level roles is easier to recognize\n */\nexport function getOverwriteString(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList, isSelf} = props;\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  const teamRoleObj = teamRoleList.find(r => r.id === orgRoleObj?.minimumTeamRole);\n  if (!orgRoleObj || !teamRoleObj) {\n    return '';\n  }\n\n  return tct(\n    '[selfNoun] organization role as [article] [orgRole] has granted [selfPronoun] a minimum team-level role of [teamRole]',\n    {\n      selfNoun: isSelf ? 'Your' : \"This user's\",\n      selfPronoun: isSelf ? 'you' : 'them',\n      article: 'AEIOU'.includes(orgRoleObj.name[0]) ? 'an' : 'a',\n      orgRole: <strong>{orgRoleObj.name}</strong>,\n      teamRole: <strong>{teamRoleObj.name}</strong>,\n    }\n  );\n}\n\nexport default RoleOverwriteIcon;\n","import styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport IdBadge from 'sentry/components/idBadge';\nimport {PanelItem} from 'sentry/components/panels';\nimport RoleSelectControl from 'sentry/components/roleSelectControl';\nimport {IconSubtract} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Member, Organization, Team, TeamMember, User} from 'sentry/types';\nimport {getEffectiveOrgRole} from 'sentry/utils/orgRole';\nimport {\n  hasOrgRoleOverwrite,\n  RoleOverwriteIcon,\n} from 'sentry/views/settings/organizationTeams/roleOverwriteWarning';\nimport {getButtonHelpText} from 'sentry/views/settings/organizationTeams/utils';\n\nfunction TeamMembersRow(props: {\n  hasWriteAccess: boolean;\n  isOrgOwner: boolean;\n  member: TeamMember;\n  organization: Organization;\n  removeMember: (member: Member) => void;\n  team: Team;\n  updateMemberRole: (member: Member, newRole: string) => void;\n  user: User;\n}) {\n  const {\n    organization,\n    team,\n    member,\n    user,\n    hasWriteAccess,\n    isOrgOwner,\n    removeMember,\n    updateMemberRole,\n  } = props;\n\n  return (\n    <TeamRolesPanelItem key={member.id}>\n      <div>\n        <IdBadge avatarSize={36} member={member} useLink orgId={organization.slug} />\n      </div>\n      <div>\n        <TeamRoleSelect\n          hasWriteAccess={hasWriteAccess}\n          updateMemberRole={updateMemberRole}\n          organization={organization}\n          team={team}\n          member={member}\n        />\n      </div>\n      <div>\n        <RemoveButton\n          hasWriteAccess={hasWriteAccess}\n          hasOrgRoleFromTeam={team.orgRole !== null}\n          isOrgOwner={isOrgOwner}\n          onClick={() => removeMember(member)}\n          member={member}\n          user={user}\n        />\n      </div>\n    </TeamRolesPanelItem>\n  );\n}\n\nfunction TeamRoleSelect(props: {\n  hasWriteAccess: boolean;\n  member: TeamMember;\n  organization: Organization;\n  team: Team;\n  updateMemberRole: (member: TeamMember, newRole: string) => void;\n}) {\n  const {hasWriteAccess, organization, team, member, updateMemberRole} = props;\n  const {orgRoleList, teamRoleList, features} = organization;\n  if (!features.includes('team-roles')) {\n    return null;\n  }\n\n  // Determine the team-role, including if the current team has an org role\n  // and if adding the user to the current team changes their minimum team-role\n  const possibleOrgRoles = [member.orgRole];\n  if (member.orgRolesFromTeams && member.orgRolesFromTeams.length > 0) {\n    possibleOrgRoles.push(member.orgRolesFromTeams[0].role.id);\n  }\n  if (team.orgRole) {\n    possibleOrgRoles.push(team.orgRole);\n  }\n  const effectiveOrgRole = getEffectiveOrgRole(possibleOrgRoles, orgRoleList);\n\n  const teamRoleId = member.teamRole || effectiveOrgRole?.minimumTeamRole;\n  const teamRole = teamRoleList.find(r => r.id === teamRoleId) || teamRoleList[0];\n\n  if (\n    !hasWriteAccess ||\n    hasOrgRoleOverwrite({orgRole: effectiveOrgRole?.id, orgRoleList, teamRoleList})\n  ) {\n    return (\n      <RoleName>\n        {teamRole.name}\n        <IconWrapper>\n          <RoleOverwriteIcon\n            orgRole={effectiveOrgRole?.id}\n            orgRoleList={orgRoleList}\n            teamRoleList={teamRoleList}\n          />\n        </IconWrapper>\n      </RoleName>\n    );\n  }\n\n  return (\n    <RoleSelectWrapper>\n      <RoleSelectControl\n        roles={teamRoleList}\n        value={teamRole.id}\n        onChange={option => updateMemberRole(member, option.value)}\n        disableUnallowed\n      />\n    </RoleSelectWrapper>\n  );\n}\n\nfunction RemoveButton(props: {\n  hasOrgRoleFromTeam: boolean;\n  hasWriteAccess: boolean;\n  isOrgOwner: boolean;\n  member: TeamMember;\n  onClick: () => void;\n  user: User;\n}) {\n  const {member, user, hasWriteAccess, isOrgOwner, hasOrgRoleFromTeam, onClick} = props;\n\n  const isSelf = member.email === user.email;\n  const canRemoveMember = hasWriteAccess || isSelf;\n  if (!canRemoveMember) {\n    return null;\n  }\n  const isIdpProvisioned = member.flags['idp:provisioned'];\n  const isPermissionGroup = hasOrgRoleFromTeam && !isOrgOwner;\n\n  const buttonHelpText = getButtonHelpText(isIdpProvisioned, isPermissionGroup);\n\n  if (isIdpProvisioned || isPermissionGroup) {\n    return (\n      <Button\n        size=\"xs\"\n        disabled\n        icon={<IconSubtract size=\"xs\" isCircled />}\n        onClick={onClick}\n        aria-label={t('Remove')}\n        title={buttonHelpText}\n      >\n        {t('Remove')}\n      </Button>\n    );\n  }\n  return (\n    <Button\n      size=\"xs\"\n      disabled={!canRemoveMember}\n      icon={<IconSubtract size=\"xs\" isCircled />}\n      onClick={onClick}\n      aria-label={t('Remove')}\n    >\n      {t('Remove')}\n    </Button>\n  );\n}\n\nconst RoleName = styled('div')`\n  display: flex;\n  align-items: center;\n`;\nconst IconWrapper = styled('div')`\n  height: ${space(2)};\n  margin-left: ${space(1)};\n`;\n\nconst RoleSelectWrapper = styled('div')`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  > div:first-child {\n    flex-grow: 1;\n  }\n`;\n\nconst TeamRolesPanelItem = styled(PanelItem)`\n  display: grid;\n  grid-template-columns: minmax(120px, 4fr) minmax(120px, 2fr) minmax(100px, 1fr);\n  gap: ${space(2)};\n  align-items: center;\n\n  > div:last-child {\n    margin-left: auto;\n  }\n`;\n\nexport default TeamMembersRow;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {\n  openInviteMembersModal,\n  openTeamAccessRequestModal,\n} from 'sentry/actionCreators/modal';\nimport {joinTeam, leaveTeam} from 'sentry/actionCreators/teams';\nimport {Client} from 'sentry/api';\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport DropdownAutoComplete from 'sentry/components/dropdownAutoComplete';\nimport {Item} from 'sentry/components/dropdownAutoComplete/types';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport Link from 'sentry/components/links/link';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel, PanelHeader} from 'sentry/components/panels';\nimport {IconUser} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Config, Member, Organization, Team, TeamMember} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withConfig from 'sentry/utils/withConfig';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport TeamMembersRow from 'sentry/views/settings/organizationTeams/teamMembersRow';\n\ntype RouteParams = {\n  teamId: string;\n};\n\ntype Props = {\n  api: Client;\n  config: Config;\n  organization: Organization;\n  team: Team;\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  dropdownBusy: boolean;\n  error: boolean;\n  loading: boolean;\n  orgMembers: Member[];\n  teamMembers: TeamMember[];\n} & AsyncView['state'];\n\nclass TeamMembers extends AsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      loading: true,\n      error: false,\n      dropdownBusy: false,\n      teamMembers: [],\n      orgMembers: [],\n    };\n  }\n\n  componentDidMount() {\n    // Initialize \"add member\" dropdown with data\n    this.fetchMembersRequest('');\n  }\n\n  debouncedFetchMembersRequest = debounce(\n    (query: string) =>\n      this.setState({dropdownBusy: true}, () => this.fetchMembersRequest(query)),\n    200\n  );\n\n  fetchMembersRequest = async (query: string) => {\n    const {organization, api} = this.props;\n\n    try {\n      const data = await api.requestPromise(\n        `/organizations/${organization.slug}/members/`,\n        {\n          query: {query},\n        }\n      );\n      this.setState({\n        orgMembers: data,\n        dropdownBusy: false,\n      });\n    } catch (_err) {\n      addErrorMessage(t('Unable to load organization members.'), {\n        duration: 2000,\n      });\n\n      this.setState({\n        dropdownBusy: false,\n      });\n    }\n  };\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization, params} = this.props;\n\n    return [\n      [\n        'teamMembers',\n        `/teams/${organization.slug}/${params.teamId}/members/`,\n        {},\n        {paginate: true},\n      ],\n    ];\n  }\n\n  addTeamMember = (selection: Item) => {\n    const {organization, params} = this.props;\n    const {orgMembers, teamMembers} = this.state;\n\n    this.setState({loading: true});\n\n    // Reset members list after adding member to team\n    this.debouncedFetchMembersRequest('');\n\n    joinTeam(\n      this.props.api,\n      {\n        orgId: organization.slug,\n        teamId: params.teamId,\n        memberId: selection.value,\n      },\n      {\n        success: () => {\n          const orgMember = orgMembers.find(member => member.id === selection.value);\n          if (orgMember === undefined) {\n            return;\n          }\n          this.setState({\n            loading: false,\n            error: false,\n            teamMembers: teamMembers.concat([orgMember as TeamMember]),\n          });\n          addSuccessMessage(t('Successfully added member to team.'));\n        },\n        error: () => {\n          this.setState({loading: false});\n          addErrorMessage(t('Unable to add team member.'));\n        },\n      }\n    );\n  };\n\n  removeTeamMember = (member: Member) => {\n    const {organization, params} = this.props;\n    const {teamMembers} = this.state;\n    leaveTeam(\n      this.props.api,\n      {\n        orgId: organization.slug,\n        teamId: params.teamId,\n        memberId: member.id,\n      },\n      {\n        success: () => {\n          this.setState({\n            teamMembers: teamMembers.filter(m => m.id !== member.id),\n          });\n          addSuccessMessage(t('Successfully removed member from team.'));\n        },\n        error: () =>\n          addErrorMessage(\n            t('There was an error while trying to remove a member from the team.')\n          ),\n      }\n    );\n  };\n\n  updateTeamMemberRole = (member: Member, newRole: string) => {\n    const {organization} = this.props;\n    const {teamId} = this.props.params;\n    const endpoint = `/organizations/${organization.slug}/members/${member.id}/teams/${teamId}/`;\n\n    this.props.api.request(endpoint, {\n      method: 'PUT',\n      data: {teamRole: newRole},\n      success: data => {\n        const teamMembers: any = [...this.state.teamMembers];\n        const i = teamMembers.findIndex(m => m.id === member.id);\n        teamMembers[i] = {\n          ...member,\n          teamRole: data.teamRole,\n        };\n        this.setState({teamMembers});\n        addSuccessMessage(t('Successfully changed role for team member.'));\n      },\n      error: () => {\n        addErrorMessage(\n          t('There was an error while trying to change the roles for a team member.')\n        );\n      },\n    });\n  };\n\n  /**\n   * We perform an API request to support orgs with > 100 members (since that's the max API returns)\n   *\n   * @param {Event} e React Event when member filter input changes\n   */\n  handleMemberFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({dropdownBusy: true});\n    this.debouncedFetchMembersRequest(e.target.value);\n  };\n\n  renderDropdown(hasWriteAccess: boolean, isOrgOwner: boolean) {\n    const {organization, params, team} = this.props;\n    const {orgMembers} = this.state;\n    const existingMembers = new Set(this.state.teamMembers.map(member => member.id));\n\n    // members can add other members to a team if the `Open Membership` setting is enabled\n    // otherwise, `org:write` or `team:admin` permissions are required\n    const hasOpenMembership = !!organization?.openMembership;\n    const canAddMembers = hasOpenMembership || hasWriteAccess;\n\n    const isDropdownDisabled =\n      team.flags['idp:provisioned'] || (team.orgRole !== null && !isOrgOwner);\n\n    const items = (orgMembers || [])\n      .filter(m => !existingMembers.has(m.id))\n      .map(m => ({\n        searchKey: `${m.name} ${m.email}`,\n        value: m.id,\n        label: (\n          <StyledUserListElement>\n            <StyledAvatar user={m} size={24} className=\"avatar\" />\n            <StyledNameOrEmail>{m.name || m.email}</StyledNameOrEmail>\n          </StyledUserListElement>\n        ),\n      }));\n\n    const menuHeader = (\n      <StyledMembersLabel>\n        {t('Members')}\n        <StyledCreateMemberLink\n          to=\"\"\n          onClick={() => openInviteMembersModal({source: 'teams'})}\n          data-test-id=\"invite-member\"\n        >\n          {t('Invite Member')}\n        </StyledCreateMemberLink>\n      </StyledMembersLabel>\n    );\n\n    return (\n      <DropdownAutoComplete\n        items={items}\n        alignMenu=\"right\"\n        onSelect={\n          canAddMembers\n            ? this.addTeamMember\n            : selection =>\n                openTeamAccessRequestModal({\n                  teamId: params.teamId,\n                  orgId: organization.slug,\n                  memberId: selection.value,\n                })\n        }\n        menuHeader={menuHeader}\n        emptyMessage={t('No members')}\n        onChange={this.handleMemberFilterChange}\n        busy={this.state.dropdownBusy}\n        onClose={() => this.debouncedFetchMembersRequest('')}\n        disabled={isDropdownDisabled}\n      >\n        {({isOpen}) => (\n          <DropdownButton\n            isOpen={isOpen}\n            size=\"xs\"\n            data-test-id=\"add-member\"\n            disabled={isDropdownDisabled}\n          >\n            {t('Add Member')}\n          </DropdownButton>\n        )}\n      </DropdownAutoComplete>\n    );\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    }\n\n    if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const {organization, config, team} = this.props;\n    const {teamMembersPageLinks} = this.state;\n    const {access} = organization;\n    const hasWriteAccess = access.includes('org:write') || access.includes('team:admin');\n\n    // TODO(team-roles): team admins can also manage membership\n    // org:admin is a unique scope that only org owners have\n    const isOrgOwner = access.includes('org:admin');\n\n    return (\n      <Fragment>\n        <Panel>\n          <PanelHeader hasButtons>\n            <div>{t('Members')}</div>\n            <div style={{textTransform: 'none'}}>\n              {this.renderDropdown(hasWriteAccess, isOrgOwner)}\n            </div>\n          </PanelHeader>\n          {this.state.teamMembers.length ? (\n            this.state.teamMembers.map(member => {\n              return (\n                <TeamMembersRow\n                  key={member.id}\n                  hasWriteAccess={hasWriteAccess}\n                  isOrgOwner={isOrgOwner}\n                  team={team}\n                  member={member}\n                  organization={organization}\n                  removeMember={this.removeTeamMember}\n                  updateMemberRole={this.updateTeamMemberRole}\n                  user={config.user}\n                />\n              );\n            })\n          ) : (\n            <EmptyMessage icon={<IconUser size=\"xl\" />} size=\"large\">\n              {t('This team has no members')}\n            </EmptyMessage>\n          )}\n        </Panel>\n        <Pagination pageLinks={teamMembersPageLinks} />\n      </Fragment>\n    );\n  }\n}\n\nconst StyledUserListElement = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  gap: ${space(0.5)};\n  align-items: center;\n`;\n\nconst StyledNameOrEmail = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  ${p => p.theme.overflowEllipsis};\n`;\n\nconst StyledAvatar = styled(props => <UserAvatar {...props} />)`\n  min-width: 1.75em;\n  min-height: 1.75em;\n  width: 1.5em;\n  height: 1.5em;\n`;\n\nconst StyledMembersLabel = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  padding: ${space(1)} 0;\n  font-size: ${p => p.theme.fontSizeExtraSmall};\n  text-transform: uppercase;\n`;\n\nconst StyledCreateMemberLink = styled(Link)`\n  text-transform: none;\n`;\n\nexport default withConfig(withApi(withOrganization(TeamMembers)));\n","import {t} from 'sentry/locale';\n\nexport function getButtonHelpText(isIdpProvisioned: boolean, isPermissionGroup: boolean) {\n  if (isIdpProvisioned) {\n    return t(\n      \"Membership to this team is managed through your organization's identity provider.\"\n    );\n  }\n  if (isPermissionGroup) {\n    return t('Membership to a team with an organization role is managed by org owners.');\n  }\n  return undefined;\n}\n"],"names":["RoleSelectControl","_ref","roles","disableUnallowed","props","_jsx","SelectControl","options","map","r","value","id","label","name","disabled","allowed","isRetired","details","Details","children","desc","showDividers","displayName","_styled","target","styles","getEffectiveOrgRole","memberOrgRoles","orgRoleList","orgRoleMap","reduce","acc","role","index","sort","a","b","AsyncView","AsyncComponent","getTitle","render","SentryDocumentTitle","title","this","renderComponent","RoleOverwriteIcon","hasOrgRoleOverwrite","Tooltip","getOverwriteString","IconInfo","size","color","RoleOverwritePanelAlert","PanelAlert","orgRole","teamRoleList","orgRoleObj","find","findIndex","minimumTeamRole","isSelf","teamRoleObj","tct","selfNoun","selfPronoun","article","includes","teamRole","TeamMembersRow","organization","team","member","user","hasWriteAccess","isOrgOwner","removeMember","updateMemberRole","_jsxs","TeamRolesPanelItem","IdBadge","avatarSize","useLink","orgId","slug","TeamRoleSelect","RemoveButton","hasOrgRoleFromTeam","onClick","features","possibleOrgRoles","orgRolesFromTeams","length","push","effectiveOrgRole","teamRoleId","RoleName","IconWrapper","RoleSelectWrapper","onChange","option","email","canRemoveMember","isIdpProvisioned","flags","isPermissionGroup","buttonHelpText","getButtonHelpText","Button","icon","IconSubtract","isCircled","t","space","PanelItem","TeamMembers","constructor","arguments","_defineProperty","debounce","query","setState","dropdownBusy","fetchMembersRequest","async","api","data","requestPromise","orgMembers","_err","addErrorMessage","duration","selection","params","teamMembers","state","loading","debouncedFetchMembersRequest","joinTeam","teamId","memberId","success","orgMember","undefined","error","concat","addSuccessMessage","leaveTeam","filter","m","newRole","endpoint","request","method","i","e","getDefaultState","super","componentDidMount","getEndpoints","paginate","renderDropdown","existingMembers","Set","canAddMembers","openMembership","isDropdownDisabled","items","has","searchKey","StyledUserListElement","StyledAvatar","className","StyledNameOrEmail","menuHeader","StyledMembersLabel","StyledCreateMemberLink","to","openInviteMembersModal","source","DropdownAutoComplete","alignMenu","onSelect","addTeamMember","openTeamAccessRequestModal","emptyMessage","handleMemberFilterChange","busy","onClose","isOpen","DropdownButton","LoadingIndicator","LoadingError","onRetry","fetchData","config","teamMembersPageLinks","access","Fragment","Panel","PanelHeader","hasButtons","style","textTransform","removeTeamMember","updateTeamMemberRole","EmptyMessage","IconUser","Pagination","pageLinks","p","theme","fontSizeSmall","overflowEllipsis","UserAvatar","fontSizeExtraSmall","Link","withConfig","withApi","withOrganization"],"sourceRoot":""}