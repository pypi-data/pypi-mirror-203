{"version":3,"file":"chunks/app_utils_performance_contexts_metricsEnhancedSetting_tsx-app_views_performance_transactionSu-898234.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/performance/contexts/metricsEnhancedSetting.tsx","webpack:///./app/views/performance/transactionSummary/transactionThresholdModal.tsx"],"sourcesContent":["import {Dispatch, ReactNode, useCallback, useReducer} from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {Organization} from 'sentry/types';\nimport localStorage from 'sentry/utils/localStorage';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport {createDefinedContext} from './utils';\n\nexport interface MetricsEnhancedSettingContext {\n  autoSampleState: AutoSampleState;\n  memoizationKey: string;\n  metricSettingState: MEPState | null;\n  setAutoSampleState: Dispatch<AutoSampleState>;\n  setMetricSettingState: Dispatch<MEPState>;\n  shouldQueryProvideMEPAutoParams: boolean;\n  shouldQueryProvideMEPMetricParams: boolean;\n  shouldQueryProvideMEPTransactionParams: boolean;\n}\n\nconst [_MEPSettingProvider, _useMEPSettingContext, _MEPSettingContext] =\n  createDefinedContext<MetricsEnhancedSettingContext>({\n    name: 'MetricsEnhancedSettingContext',\n  });\n\nexport const MEPConsumer = _MEPSettingContext.Consumer;\n\n/**\n * These will be called something else in the copy, but functionally the data is coming from metrics / transactions.\n * \"Unset\" should be the initial state before any queries return for the first time.\n */\nexport enum AutoSampleState {\n  unset = 'unset',\n  metrics = 'metrics',\n  transactions = 'transactions',\n}\n\n/**\n * Metrics/transactions will be called something else in the copy, but functionally the data is coming from metrics / transactions.\n */\nexport enum MEPState {\n  auto = 'auto',\n  metricsOnly = 'metricsOnly',\n  transactionsOnly = 'transactionsOnly',\n}\n\nexport const METRIC_SETTING_PARAM = 'metricSetting';\nexport const METRIC_SEARCH_SETTING_PARAM = 'metricSearchSetting'; // TODO: Clean this up since we don't need multiple params in practice.\n\nconst storageKey = 'performance.metrics-enhanced-setting';\nexport class MEPSetting {\n  static get(): MEPState | null {\n    const value = localStorage.getItem(storageKey);\n    if (value) {\n      if (!(value in MEPState)) {\n        localStorage.removeItem(storageKey);\n        return null;\n      }\n      return MEPState[value];\n    }\n    return null;\n  }\n\n  static set(value: MEPState) {\n    localStorage.setItem(storageKey, value);\n  }\n}\n\nexport function canUseMetricsDevUI(organization: Organization) {\n  return organization.features.includes('performance-use-metrics');\n}\n\nexport function canUseMetricsData(organization: Organization) {\n  const isDevFlagOn = canUseMetricsDevUI(organization); // Forces metrics data on as well.\n  const isInternalViewOn = organization.features.includes(\n    'performance-transaction-name-only-search'\n  ); // TODO: Swap this flag out.\n\n  const samplingRolloutFlag = organization.features.includes('dynamic-sampling');\n  const isRollingOut =\n    samplingRolloutFlag && organization.features.includes('mep-rollout-flag');\n\n  return isDevFlagOn || isInternalViewOn || isRollingOut;\n}\n\nexport function MEPSettingProvider({\n  children,\n  location,\n  _hasMEPState,\n  forceTransactions,\n}: {\n  children: ReactNode;\n  _hasMEPState?: MEPState;\n  forceTransactions?: boolean;\n  location?: Location;\n}) {\n  const organization = useOrganization();\n\n  const canUseMEP = canUseMetricsData(organization);\n\n  const allowedStates = [MEPState.metricsOnly, MEPState.transactionsOnly];\n  const _metricSettingFromParam = location\n    ? decodeScalar(location.query[METRIC_SETTING_PARAM])\n    : MEPState.metricsOnly;\n  let defaultMetricsState = MEPState.metricsOnly;\n\n  if (forceTransactions) {\n    defaultMetricsState = MEPState.transactionsOnly;\n  }\n\n  const metricSettingFromParam =\n    allowedStates.find(s => s === _metricSettingFromParam) ?? defaultMetricsState;\n\n  const isControlledMEP = typeof _hasMEPState !== 'undefined';\n\n  const [_metricSettingState, _setMetricSettingState] = useReducer(\n    (_: MEPState, next: MEPState) => next,\n    metricSettingFromParam\n  );\n\n  const setMetricSettingState = useCallback(\n    (settingState: MEPState) => {\n      if (!location) {\n        return;\n      }\n      browserHistory.replace({\n        ...location,\n        query: {\n          ...location.query,\n          [METRIC_SETTING_PARAM]: settingState,\n        },\n      });\n      _setMetricSettingState(settingState);\n    },\n    [location, _setMetricSettingState]\n  );\n\n  const [autoSampleState, setAutoSampleState] = useReducer(\n    (_: AutoSampleState, next: AutoSampleState) => next,\n    AutoSampleState.unset\n  );\n\n  const metricSettingState = isControlledMEP ? _hasMEPState : _metricSettingState;\n\n  const shouldQueryProvideMEPAutoParams =\n    canUseMEP && metricSettingState === MEPState.auto;\n  const shouldQueryProvideMEPMetricParams =\n    canUseMEP && metricSettingState === MEPState.metricsOnly;\n  const shouldQueryProvideMEPTransactionParams =\n    canUseMEP && metricSettingState === MEPState.transactionsOnly;\n\n  const memoizationKey = `${metricSettingState}`;\n\n  return (\n    <_MEPSettingProvider\n      value={{\n        autoSampleState,\n        metricSettingState,\n        shouldQueryProvideMEPAutoParams,\n        shouldQueryProvideMEPMetricParams,\n        shouldQueryProvideMEPTransactionParams,\n        memoizationKey,\n        setMetricSettingState,\n        setAutoSampleState,\n      }}\n    >\n      {children}\n    </_MEPSettingProvider>\n  );\n}\n\nexport const useMEPSettingContext = _useMEPSettingContext;\n","import {Component, Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\nimport set from 'lodash/set';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {Client} from 'sentry/api';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport SelectControl from 'sentry/components/forms/controls/selectControl';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport Input from 'sentry/components/input';\nimport Link from 'sentry/components/links/link';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {transactionSummaryRouteWithQuery} from './utils';\n\nexport enum TransactionThresholdMetric {\n  TRANSACTION_DURATION = 'duration',\n  LARGEST_CONTENTFUL_PAINT = 'lcp',\n}\n\nexport const METRIC_CHOICES = [\n  {label: t('Transaction Duration'), value: 'duration'},\n  {label: t('Largest Contentful Paint'), value: 'lcp'},\n];\n\ntype Props = {\n  api: Client;\n  eventView: EventView;\n  organization: Organization;\n  projects: Project[];\n  transactionName: string;\n  transactionThreshold: number | undefined;\n  transactionThresholdMetric: TransactionThresholdMetric | undefined;\n  onApply?: (threshold, metric) => void;\n  project?: string;\n} & ModalRenderProps;\n\ntype State = {\n  error: string | null;\n  metric: TransactionThresholdMetric | undefined;\n  threshold: number | undefined;\n};\n\nclass TransactionThresholdModal extends Component<Props, State> {\n  state: State = {\n    threshold: this.props.transactionThreshold,\n    metric: this.props.transactionThresholdMetric,\n    error: null,\n  };\n\n  getProject() {\n    const {projects, eventView, project} = this.props;\n\n    if (defined(project)) {\n      return projects.find(proj => proj.id === project);\n    }\n    const projectId = String(eventView.project[0]);\n    return projects.find(proj => proj.id === projectId);\n  }\n\n  handleApply = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const {api, closeModal, organization, transactionName, onApply} = this.props;\n\n    const project = this.getProject();\n    if (!defined(project)) {\n      return;\n    }\n\n    const transactionThresholdUrl = `/organizations/${organization.slug}/project-transaction-threshold-override/`;\n\n    api\n      .requestPromise(transactionThresholdUrl, {\n        method: 'POST',\n        includeAllArgs: true,\n        query: {\n          project: project.id,\n        },\n        data: {\n          transaction: transactionName,\n          threshold: this.state.threshold,\n          metric: this.state.metric,\n        },\n      })\n      .then(() => {\n        closeModal();\n        if (onApply) {\n          onApply(this.state.threshold, this.state.metric);\n        }\n      })\n      .catch(err => {\n        this.setState({\n          error: err,\n        });\n        const errorMessage =\n          err.responseJSON?.threshold ?? err.responseJSON?.non_field_errors ?? null;\n        addErrorMessage(errorMessage);\n      });\n  };\n\n  handleFieldChange = (field: string) => (value: string) => {\n    this.setState(prevState => {\n      const newState = cloneDeep(prevState);\n      set(newState, field, value);\n\n      return {...newState, errors: undefined};\n    });\n  };\n\n  handleReset = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const {api, closeModal, organization, transactionName, onApply} = this.props;\n\n    const project = this.getProject();\n    if (!defined(project)) {\n      return;\n    }\n\n    const transactionThresholdUrl = `/organizations/${organization.slug}/project-transaction-threshold-override/`;\n\n    api\n      .requestPromise(transactionThresholdUrl, {\n        method: 'DELETE',\n        includeAllArgs: true,\n        query: {\n          project: project.id,\n        },\n        data: {\n          transaction: transactionName,\n        },\n      })\n      .then(() => {\n        const projectThresholdUrl = `/projects/${organization.slug}/${project.slug}/transaction-threshold/configure/`;\n        this.props.api\n          .requestPromise(projectThresholdUrl, {\n            method: 'GET',\n            includeAllArgs: true,\n            query: {\n              project: project.id,\n            },\n          })\n          .then(([data]) => {\n            this.setState({\n              threshold: data.threshold,\n              metric: data.metric,\n            });\n            closeModal();\n            if (onApply) {\n              onApply(this.state.threshold, this.state.metric);\n            }\n          })\n          .catch(err => {\n            const errorMessage = err.responseJSON?.threshold ?? null;\n            addErrorMessage(errorMessage);\n          });\n      })\n      .catch(err => {\n        this.setState({\n          error: err,\n        });\n      });\n  };\n\n  renderModalFields() {\n    return (\n      <Fragment>\n        <FieldGroup\n          data-test-id=\"response-metric\"\n          label={t('Calculation Method')}\n          inline={false}\n          help={t(\n            'This determines which duration metric is used for the Response Time Threshold.'\n          )}\n          showHelpInTooltip\n          flexibleControlStateSize\n          stacked\n          required\n        >\n          <SelectControl\n            required\n            options={METRIC_CHOICES.slice()}\n            name=\"responseMetric\"\n            label={t('Calculation Method')}\n            value={this.state.metric}\n            onChange={(option: {label: string; value: string}) => {\n              this.handleFieldChange('metric')(option.value);\n            }}\n          />\n        </FieldGroup>\n        <FieldGroup\n          data-test-id=\"response-time-threshold\"\n          label={t('Response Time Threshold (ms)')}\n          inline={false}\n          help={t(\n            'The satisfactory response time for the calculation method defined above. This is used to calculate Apdex and User Misery scores.'\n          )}\n          showHelpInTooltip\n          flexibleControlStateSize\n          stacked\n          required\n        >\n          <Input\n            type=\"number\"\n            name=\"threshold\"\n            required\n            pattern=\"[0-9]*(\\.[0-9]*)?\"\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              this.handleFieldChange('threshold')(event.target.value);\n            }}\n            value={this.state.threshold}\n            step={100}\n            min={100}\n          />\n        </FieldGroup>\n      </Fragment>\n    );\n  }\n\n  render() {\n    const {Header, Body, Footer, organization, transactionName, eventView} = this.props;\n\n    const project = this.getProject();\n\n    const summaryView = eventView.clone();\n    summaryView.query = summaryView.getQueryWithAdditionalConditions();\n    const target = transactionSummaryRouteWithQuery({\n      orgSlug: organization.slug,\n      transaction: transactionName,\n      query: summaryView.generateQueryStringObject(),\n      projectID: project?.id,\n    });\n\n    return (\n      <Fragment>\n        <Header closeButton>\n          <h4>{t('Transaction Settings')}</h4>\n        </Header>\n        <Body>\n          <Instruction>\n            {tct(\n              'The changes below will only be applied to [transaction]. To set it at a more global level, go to [projectSettings: Project Settings].',\n              {\n                transaction: <Link to={target}>{transactionName}</Link>,\n                projectSettings: (\n                  <Link\n                    to={`/settings/${organization.slug}/projects/${project?.slug}/performance/`}\n                  />\n                ),\n              }\n            )}\n          </Instruction>\n          {this.renderModalFields()}\n        </Body>\n        <Footer>\n          <ButtonBar gap={1}>\n            <Button\n              priority=\"default\"\n              onClick={this.handleReset}\n              data-test-id=\"reset-all\"\n            >\n              {t('Reset All')}\n            </Button>\n            <Button\n              aria-label={t('Apply')}\n              priority=\"primary\"\n              onClick={this.handleApply}\n              data-test-id=\"apply-threshold\"\n            >\n              {t('Apply')}\n            </Button>\n          </ButtonBar>\n        </Footer>\n      </Fragment>\n    );\n  }\n}\n\nconst Instruction = styled('div')`\n  margin-bottom: ${space(4)};\n`;\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 650px;\n`;\n\nexport default withApi(withProjects(TransactionThresholdModal));\n"],"names":["_MEPSettingProvider","_useMEPSettingContext","_MEPSettingContext","createDefinedContext","name","MEPConsumer","Consumer","AutoSampleState","MEPState","METRIC_SETTING_PARAM","METRIC_SEARCH_SETTING_PARAM","canUseMetricsData","organization","isDevFlagOn","features","includes","canUseMetricsDevUI","isInternalViewOn","isRollingOut","MEPSettingProvider","_ref","children","location","_hasMEPState","forceTransactions","canUseMEP","useOrganization","allowedStates","metricsOnly","transactionsOnly","_metricSettingFromParam","decodeScalar","query","defaultMetricsState","metricSettingFromParam","find","s","isControlledMEP","_metricSettingState","_setMetricSettingState","useReducer","_","next","setMetricSettingState","useCallback","settingState","browserHistory","autoSampleState","setAutoSampleState","unset","metricSettingState","shouldQueryProvideMEPAutoParams","auto","shouldQueryProvideMEPMetricParams","shouldQueryProvideMEPTransactionParams","memoizationKey","_jsx","value","displayName","useMEPSettingContext","TransactionThresholdMetric","METRIC_CHOICES","label","t","TransactionThresholdModal","Component","constructor","arguments","_defineProperty","threshold","this","props","transactionThreshold","metric","transactionThresholdMetric","error","event","preventDefault","api","closeModal","transactionName","onApply","project","getProject","defined","transactionThresholdUrl","slug","requestPromise","method","includeAllArgs","id","data","transaction","state","then","catch","err","setState","errorMessage","responseJSON","non_field_errors","addErrorMessage","field","prevState","newState","cloneDeep","set","errors","undefined","projectThresholdUrl","projects","eventView","proj","projectId","String","renderModalFields","_jsxs","Fragment","FieldGroup","inline","help","showHelpInTooltip","flexibleControlStateSize","stacked","required","SelectControl","options","slice","onChange","option","handleFieldChange","Input","type","pattern","target","step","min","render","Header","Body","Footer","summaryView","clone","getQueryWithAdditionalConditions","transactionSummaryRouteWithQuery","orgSlug","generateQueryStringObject","projectID","closeButton","Instruction","tct","Link","to","projectSettings","ButtonBar","gap","Button","priority","onClick","handleReset","handleApply","_styled","space","modalCss","styles","withApi","withProjects"],"sourceRoot":""}