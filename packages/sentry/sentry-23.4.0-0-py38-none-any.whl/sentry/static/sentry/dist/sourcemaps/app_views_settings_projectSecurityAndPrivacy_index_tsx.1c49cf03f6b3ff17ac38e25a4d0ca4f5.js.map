{"version":3,"file":"chunks/app_views_settings_projectSecurityAndPrivacy_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/data/forms/projectSecurityAndPrivacyGroups.tsx","webpack:///./app/views/settings/projectSecurityAndPrivacy/index.tsx"],"sourcesContent":["import {JsonFormObject} from 'sentry/components/forms/types';\nimport Link from 'sentry/components/links/link';\nimport {t, tct} from 'sentry/locale';\nimport {convertMultilineFieldValue, extractMultilineFields} from 'sentry/utils';\nimport {\n  formatStoreCrashReports,\n  getStoreCrashReportsValues,\n  SettingScope,\n} from 'sentry/utils/crashReports';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/security-and-privacy/';\n\nconst ORG_DISABLED_REASON = t(\n  \"This option is enforced by your organization's settings and cannot be customized per-project.\"\n);\n\n// Check if a field has been set AND IS TRUTHY at the organization level.\nconst hasOrgOverride = ({organization, name}) => organization[name];\n\nexport default [\n  {\n    title: t('Security & Privacy'),\n    fields: [\n      {\n        name: 'storeCrashReports',\n        type: 'select',\n        label: t('Store Native Crash Reports'),\n        help: ({organization}) =>\n          tct(\n            'Store native crash reports such as Minidumps for improved processing and download in issue details. Overrides [organizationSettingsLink: organization settings].',\n            {\n              organizationSettingsLink: (\n                <Link to={`/settings/${organization.slug}/security-and-privacy/`} />\n              ),\n            }\n          ),\n        visible: ({features}) => features.has('event-attachments'),\n        placeholder: ({organization, value}) => {\n          // empty value means that this project should inherit organization settings\n          if (value === '') {\n            return tct('Inherit organization settings ([organizationValue])', {\n              organizationValue: formatStoreCrashReports(organization.storeCrashReports),\n            });\n          }\n\n          // HACK: some organization can have limit of stored crash reports a number that's not in the options (legacy reasons),\n          // we therefore display it in a placeholder\n          return formatStoreCrashReports(value);\n        },\n        choices: ({organization}) =>\n          getStoreCrashReportsValues(SettingScope.Project).map(value => [\n            value,\n            formatStoreCrashReports(value, organization.storeCrashReports),\n          ]),\n      },\n    ],\n  },\n  {\n    title: t('Data Scrubbing'),\n    fields: [\n      {\n        name: 'dataScrubber',\n        type: 'boolean',\n        label: t('Data Scrubber'),\n        disabled: hasOrgOverride,\n        disabledReason: ORG_DISABLED_REASON,\n        help: t('Enable server-side data scrubbing'),\n        'aria-label': t('Enable server-side data scrubbing'),\n        // `props` are the props given to FormField\n        setValue: (val, props) =>\n          (props.organization && props.organization[props.name]) || val,\n        confirm: {\n          false: t('Are you sure you want to disable server-side data scrubbing?'),\n        },\n      },\n      {\n        name: 'dataScrubberDefaults',\n        type: 'boolean',\n        disabled: hasOrgOverride,\n        disabledReason: ORG_DISABLED_REASON,\n        label: t('Use Default Scrubbers'),\n        help: t(\n          'Apply default scrubbers to prevent things like passwords and credit cards from being stored'\n        ),\n        'aria-label': t(\n          'Enable to apply default scrubbers to prevent things like passwords and credit cards from being stored'\n        ),\n        // `props` are the props given to FormField\n        setValue: (val, props) =>\n          (props.organization && props.organization[props.name]) || val,\n        confirm: {\n          false: t('Are you sure you want to disable using default scrubbers?'),\n        },\n      },\n      {\n        name: 'scrubIPAddresses',\n        type: 'boolean',\n        disabled: hasOrgOverride,\n        disabledReason: ORG_DISABLED_REASON,\n        // `props` are the props given to FormField\n        setValue: (val, props) =>\n          (props.organization && props.organization[props.name]) || val,\n        label: t('Prevent Storing of IP Addresses'),\n        help: t('Preventing IP addresses from being stored for new events'),\n        'aria-label': t(\n          'Enable to prevent IP addresses from being stored for new events'\n        ),\n        confirm: {\n          false: t('Are you sure you want to disable scrubbing IP addresses?'),\n        },\n      },\n      {\n        name: 'sensitiveFields',\n        type: 'string',\n        multiline: true,\n        autosize: true,\n        maxRows: 10,\n        rows: 1,\n        placeholder: t('email'),\n        label: t('Additional Sensitive Fields'),\n        help: t(\n          'Additional field names to match against when scrubbing data. Separate multiple entries with a newline'\n        ),\n        'aria-label': t(\n          'Enter additional field names to match against when scrubbing data. Separate multiple entries with a newline'\n        ),\n        getValue: val => extractMultilineFields(val),\n        setValue: val => convertMultilineFieldValue(val),\n      },\n      {\n        name: 'safeFields',\n        type: 'string',\n        multiline: true,\n        autosize: true,\n        maxRows: 10,\n        rows: 1,\n        placeholder: t('business-email'),\n        label: t('Safe Fields'),\n        help: t(\n          'Field names which data scrubbers should ignore. Separate multiple entries with a newline'\n        ),\n        'aria-label': t(\n          'Enter field names which data scrubbers should ignore. Separate multiple entries with a newline'\n        ),\n        getValue: val => extractMultilineFields(val),\n        setValue: val => convertMultilineFieldValue(val),\n      },\n    ],\n  },\n] as JsonFormObject[];\n","import {Fragment} from 'react';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport Link from 'sentry/components/links/link';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport projectSecurityAndPrivacyGroups from 'sentry/data/forms/projectSecurityAndPrivacyGroups';\nimport {t, tct} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {Organization, Project} from 'sentry/types';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\nimport {DataScrubbing} from '../components/dataScrubbing';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n};\n\nexport default function ProjectSecurityAndPrivacy({organization, project}: Props) {\n  function handleUpdateProject(data: Project) {\n    // This will update our project global state\n    ProjectsStore.onUpdateSuccess(data);\n  }\n\n  const initialData = project;\n  const projectSlug = project.slug;\n  const endpoint = `/projects/${organization.slug}/${projectSlug}/`;\n  const features = new Set(organization.features);\n  const relayPiiConfig = project.relayPiiConfig;\n  const apiMethod = 'PUT';\n  const title = t('Security & Privacy');\n\n  return (\n    <Fragment>\n      <SentryDocumentTitle title={title} projectSlug={projectSlug} />\n      <SettingsPageHeader title={title} />\n      <Form\n        saveOnBlur\n        allowUndo\n        initialData={initialData}\n        apiMethod={apiMethod}\n        apiEndpoint={endpoint}\n        onSubmitSuccess={handleUpdateProject}\n        onSubmitError={() => addErrorMessage('Unable to save change')}\n      >\n        <JsonForm\n          additionalFieldProps={{organization}}\n          features={features}\n          disabled={!organization.access.includes('project:write')}\n          forms={projectSecurityAndPrivacyGroups}\n        />\n      </Form>\n      <DataScrubbing\n        additionalContext={\n          <span>\n            {tct(\n              'These rules can be configured at the organization level in [linkToOrganizationSecurityAndPrivacy].',\n              {\n                linkToOrganizationSecurityAndPrivacy: (\n                  <Link to={`/settings/${organization.slug}/security-and-privacy/`}>\n                    {title}\n                  </Link>\n                ),\n              }\n            )}\n          </span>\n        }\n        endpoint={endpoint}\n        relayPiiConfig={relayPiiConfig}\n        disabled={!organization.access.includes('project:write')}\n        organization={organization}\n        project={project}\n        onSubmitSuccess={data => handleUpdateProject({...project, ...data})}\n      />\n    </Fragment>\n  );\n}\n"],"names":["route","ORG_DISABLED_REASON","t","hasOrgOverride","_ref","organization","name","title","fields","type","label","help","_ref2","tct","organizationSettingsLink","_jsx","Link","to","slug","visible","_ref3","features","has","placeholder","_ref4","value","organizationValue","formatStoreCrashReports","storeCrashReports","choices","_ref5","getStoreCrashReportsValues","SettingScope","map","disabled","disabledReason","setValue","val","props","confirm","false","multiline","autosize","maxRows","rows","getValue","extractMultilineFields","convertMultilineFieldValue","ProjectSecurityAndPrivacy","project","handleUpdateProject","data","ProjectsStore","initialData","projectSlug","endpoint","Set","relayPiiConfig","_jsxs","Fragment","children","SentryDocumentTitle","SettingsPageHeader","Form","saveOnBlur","allowUndo","apiMethod","apiEndpoint","onSubmitSuccess","onSubmitError","addErrorMessage","JsonForm","additionalFieldProps","access","includes","forms","projectSecurityAndPrivacyGroups","DataScrubbing","additionalContext","linkToOrganizationSecurityAndPrivacy","displayName"],"sourceRoot":""}