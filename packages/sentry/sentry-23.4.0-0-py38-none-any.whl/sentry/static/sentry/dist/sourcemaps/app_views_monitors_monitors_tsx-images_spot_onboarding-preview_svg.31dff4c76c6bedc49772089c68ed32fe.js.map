{"version":3,"file":"chunks/app_views_monitors_monitors_tsx-images_spot_onboarding-preview_svg.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/monitors.tsx","webpack:///./app/utils/logging.tsx","webpack:///./app/components/diamondStatus.tsx","webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/components/searchBar.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/monitors/components/cronsFeedbackButton.tsx","webpack:///./app/views/monitors/components/monitorBadge.tsx","webpack:///./app/views/monitors/components/row.tsx","webpack:///./app/views/monitors/monitors.tsx","webpack:///./app/views/monitors/types.tsx","webpack:///./app/views/monitors/utils.tsx"],"sourcesContent":["import {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport {logException} from 'sentry/utils/logging';\nimport {Monitor} from 'sentry/views/monitors/types';\n\nexport async function deleteMonitor(api: Client, orgId: string, monitorSlug: string) {\n  addLoadingMessage(t('Deleting Monitor...'));\n\n  try {\n    await api.requestPromise(`/organizations/${orgId}/monitors/${monitorSlug}/`, {\n      method: 'DELETE',\n    });\n    clearIndicators();\n  } catch {\n    addErrorMessage(t('Unable to remove monitor.'));\n  }\n}\n\nexport async function updateMonitor(\n  api: Client,\n  orgId: string,\n  monitorSlug: string,\n  data: Partial<Monitor>\n) {\n  addLoadingMessage();\n\n  try {\n    const resp = await api.requestPromise(\n      `/organizations/${orgId}/monitors/${monitorSlug}/`,\n      {method: 'PUT', data}\n    );\n    clearIndicators();\n    return resp;\n  } catch (err) {\n    logException(err);\n    addErrorMessage(t('Unable to update monitor.'));\n  }\n\n  return null;\n}\n","import * as Sentry from '@sentry/react';\n\nexport function logException(ex: Error, context?: any): void {\n  Sentry.withScope(scope => {\n    if (context) {\n      scope.setExtra('context', context);\n    }\n\n    Sentry.captureException(ex);\n  });\n  /* eslint no-console:0 */\n  window.console && console.error && console.error(ex);\n}\n","import styled from '@emotion/styled';\n\nimport {IconDiamond} from 'sentry/icons';\nimport {SVGIconProps} from 'sentry/icons/svgIcon';\nimport {ColorOrAlias} from 'sentry/utils/theme';\n\ninterface DiamondStatusProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Color of the diamond\n   */\n  color: ColorOrAlias;\n  /**\n   * Icon component to render inside of the diamond\n   */\n  icon: React.ComponentType<SVGIconProps>;\n}\n\n/**\n * A status indicator that renders a icon within a diamond\n */\nfunction DiamondStatus({color, icon: Icon, ...props}: DiamondStatusProps) {\n  return (\n    <StatusWrapper role=\"presentation\" color={color} {...props}>\n      <DiamondBackground color={color} />\n      <Icon color=\"white\" />\n    </StatusWrapper>\n  );\n}\n\nexport {DiamondStatus};\n\nconst DiamondBackground = styled(IconDiamond)`\n  width: 36px;\n  height: 36px;\n`;\n\nconst StatusWrapper = styled('div')<{color: ColorOrAlias}>`\n  width: 36px;\n  height: 36px;\n  position: relative;\n\n  svg:last-child {\n    width: 16px;\n    z-index: 2;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    margin: auto;\n  }\n`;\n","import styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport {space} from 'sentry/styles/space';\n\ninterface Props extends React.ComponentProps<typeof Panel> {\n  children: React.ReactNode;\n  image?: React.ReactNode;\n  noCenter?: boolean;\n}\n\nfunction OnboardingPanel({image, noCenter, children, ...props}: Props) {\n  return (\n    <Panel {...props}>\n      <Container>\n        {image ? <IlloBox>{image}</IlloBox> : null}\n        <StyledBox centered={!image && !noCenter}>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')<{centered?: boolean}>`\n  min-width: 0;\n  z-index: 1;\n\n  ${p => (p.centered ? 'text-align: center;' : '')}\n  ${p => (p.centered ? 'max-width: 600px;' : '')}\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  min-width: 150px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import {useCallback, useEffect, useRef, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport {InputGroup, InputProps} from 'sentry/components/inputGroup';\nimport {IconSearch} from 'sentry/icons';\nimport {IconClose} from 'sentry/icons/iconClose';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\n\ninterface SearchBarProps extends Omit<InputProps, 'onChange'> {\n  defaultQuery?: string;\n  onChange?: (query: string) => void;\n  onSearch?: (query: string) => void;\n  query?: string;\n  trailing?: React.ReactNode;\n  width?: string;\n}\n\nfunction SearchBar({\n  query: queryProp,\n  defaultQuery = '',\n  onChange,\n  onSearch,\n  width,\n  size,\n  className,\n  trailing,\n  ...inputProps\n}: SearchBarProps) {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [query, setQuery] = useState(queryProp ?? defaultQuery);\n\n  // if query prop keeps changing we should treat this as\n  // a controlled component and its internal state should be in sync\n  useEffect(() => {\n    if (typeof queryProp === 'string') {\n      setQuery(queryProp);\n    }\n  }, [queryProp]);\n\n  const onQueryChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const {value} = e.target;\n      setQuery(value);\n      onChange?.(value);\n    },\n    [onChange]\n  );\n\n  const onSubmit = useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      inputRef.current?.blur();\n      onSearch?.(query);\n    },\n    [onSearch, query]\n  );\n\n  const clearSearch = useCallback(() => {\n    setQuery('');\n    onChange?.('');\n    onSearch?.('');\n  }, [onChange, onSearch]);\n\n  return (\n    <FormWrap onSubmit={onSubmit} className={className}>\n      <InputGroup>\n        <InputGroup.LeadingItems disablePointerEvents>\n          <IconSearch color=\"subText\" size={size === 'xs' ? 'xs' : 'sm'} />\n        </InputGroup.LeadingItems>\n        <StyledInput\n          {...inputProps}\n          ref={inputRef}\n          type=\"text\"\n          name=\"query\"\n          autoComplete=\"off\"\n          value={query}\n          onChange={onQueryChange}\n          width={width}\n          size={size}\n        />\n        <InputGroup.TrailingItems>\n          {trailing}\n          {!!query && (\n            <SearchBarTrailingButton\n              size=\"zero\"\n              borderless\n              onClick={clearSearch}\n              icon={<IconClose size=\"xs\" />}\n              aria-label={t('Clear')}\n            />\n          )}\n        </InputGroup.TrailingItems>\n      </InputGroup>\n    </FormWrap>\n  );\n}\n\nconst FormWrap = styled('form')`\n  display: block;\n  position: relative;\n`;\n\nconst StyledInput = styled(InputGroup.Input)`\n  ${p => p.width && `width: ${p.width};`}\n`;\n\nexport const SearchBarTrailingButton = styled(Button)`\n  color: ${p => p.theme.subText};\n  padding: ${space(0.5)};\n`;\n\nexport default SearchBar;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {FeatureFeedback} from 'sentry/components/featureFeedback';\n\nconst CRONS_FEEDBACK_NAME = 'crons';\n\nfunction CronsFeedbackButton() {\n  return <FeatureFeedback featureName={CRONS_FEEDBACK_NAME} buttonProps={{size: 'sm'}} />;\n}\n\nexport default CronsFeedbackButton;\n","import {DiamondStatus} from 'sentry/components/diamondStatus';\nimport {\n  IconCheckmark,\n  IconExclamation,\n  IconFire,\n  IconPause,\n  IconTimer,\n} from 'sentry/icons';\nimport {SVGIconProps} from 'sentry/icons/svgIcon';\nimport {ObjectStatus} from 'sentry/types';\nimport {ColorOrAlias} from 'sentry/utils/theme';\n\nimport {MonitorStatus} from '../types';\n\ninterface MonitorBadgeProps {\n  status: MonitorStatus | ObjectStatus;\n}\n\ninterface StatusData {\n  Icon: React.ComponentType<SVGIconProps>;\n  color: ColorOrAlias;\n}\n\nfunction MonitorBadge({status}: MonitorBadgeProps) {\n  const {Icon, color} = statusMap[status] ?? statusMap.ok;\n\n  return <DiamondStatus icon={Icon} color={color} />;\n}\n\n// TODO(ts): Use satisfies\nconst statusMap: Record<MonitorStatus, StatusData> = {\n  ok: {\n    Icon: IconCheckmark,\n    color: 'successText',\n  },\n  error: {\n    Icon: IconFire,\n    color: 'errorText',\n  },\n  missed_checkin: {\n    Icon: IconExclamation,\n    color: 'warningText',\n  },\n  active: {\n    Icon: IconTimer,\n    color: 'subText',\n  },\n  disabled: {\n    Icon: (p: SVGIconProps) => <IconPause {...p} size=\"xs\" />,\n    color: 'subText',\n  },\n};\n\nexport {MonitorBadge};\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {deleteMonitor} from 'sentry/actionCreators/monitors';\nimport {openConfirmModal} from 'sentry/components/confirm';\nimport {DropdownMenu, MenuItemProps} from 'sentry/components/dropdownMenu';\nimport IdBadge from 'sentry/components/idBadge';\nimport Link from 'sentry/components/links/link';\nimport List from 'sentry/components/list';\nimport ListItem from 'sentry/components/list/listItem';\nimport Text from 'sentry/components/text';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport TimeSince from 'sentry/components/timeSince';\nimport {IconEllipsis} from 'sentry/icons';\nimport {t, tct, tn} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport {crontabAsText} from 'sentry/views/monitors/utils';\n\nimport {\n  Monitor,\n  MonitorConfig,\n  MonitorEnvironment,\n  MonitorStatus,\n  ScheduleType,\n} from '../types';\n\nimport {MonitorBadge} from './monitorBadge';\n\ninterface MonitorRowProps {\n  monitor: Monitor;\n  onDelete: () => void;\n  organization: Organization;\n  monitorEnv?: MonitorEnvironment;\n}\n\nfunction scheduleAsText(config: MonitorConfig) {\n  // Crontab format uses cronstrue\n  if (config.schedule_type === ScheduleType.CRONTAB) {\n    const parsedSchedule = crontabAsText(config.schedule);\n    return parsedSchedule ?? t('Unknown schedule');\n  }\n\n  // Interval format is simpler\n  const [value, timeUnit] = config.schedule;\n\n  if (timeUnit === 'minute') {\n    return tn('Every minute', 'Every %s minutes', value);\n  }\n\n  if (timeUnit === 'hour') {\n    return tn('Every hour', 'Every %s hours', value);\n  }\n\n  if (timeUnit === 'day') {\n    return tn('Every day', 'Every %s days', value);\n  }\n\n  if (timeUnit === 'week') {\n    return tn('Every week', 'Every %s weeks', value);\n  }\n\n  if (timeUnit === 'month') {\n    return tn('Every month', 'Every %s months', value);\n  }\n\n  return t('Unknown schedule');\n}\n\nfunction MonitorRow({monitor, monitorEnv, organization, onDelete}: MonitorRowProps) {\n  const api = useApi();\n  const lastCheckin = monitorEnv?.lastCheckIn ? (\n    <TimeSince unitStyle=\"regular\" date={monitorEnv.lastCheckIn} />\n  ) : null;\n\n  const deletionModalMessage = (\n    <Fragment>\n      <Text>\n        {tct('Are you sure you want to permanently delete \"[name]\"?', {\n          name: monitor.name,\n        })}\n      </Text>\n      {monitor.environments.length > 1 && (\n        <AdditionalEnvironmentWarning>\n          <Text>\n            {t(\n              `This will delete check-in data for this monitor associated with these environments:`\n            )}\n          </Text>\n          <List symbol=\"bullet\">\n            {monitor.environments.map(environment => (\n              <ListItem key={environment.name}>{environment.name}</ListItem>\n            ))}\n          </List>\n        </AdditionalEnvironmentWarning>\n      )}\n    </Fragment>\n  );\n  const actions: MenuItemProps[] = [\n    {\n      key: 'edit',\n      label: t('Edit'),\n      // TODO(davidenwang): Right now we have to pass the environment\n      // through the URL so that when we save the monitor and are\n      // redirected back to the details page it queries the backend\n      // for a monitor environment with check-in data\n      to: normalizeUrl({\n        pathname: `/organizations/${organization.slug}/crons/${monitor.slug}/edit/`,\n        query: {environment: monitorEnv?.name},\n      }),\n    },\n    {\n      key: 'delete',\n      label: t('Delete'),\n      priority: 'danger',\n      onAction: () => {\n        openConfirmModal({\n          onConfirm: async () => {\n            await deleteMonitor(api, organization.slug, monitor.slug);\n            onDelete();\n          },\n          header: t('Delete Monitor?'),\n          message: deletionModalMessage,\n          confirmText: t('Delete Monitor'),\n          priority: 'danger',\n        });\n      },\n    },\n  ];\n\n  const monitorDetailUrl = `/organizations/${organization.slug}/crons/${monitor.slug}/${\n    monitorEnv ? `?environment=${monitorEnv.name}` : ''\n  }`;\n\n  // TODO(davidenwang): Change accordingly when we have ObjectStatus on monitor\n  const monitorStatus =\n    monitor.status !== 'disabled' && monitorEnv ? monitorEnv.status : monitor.status;\n\n  return (\n    <Fragment>\n      <MonitorName>\n        <MonitorBadge status={monitorStatus} />\n        <NameAndSlug>\n          <Link to={monitorDetailUrl}>{monitor.name}</Link>\n          <MonitorSlug>{monitor.slug}</MonitorSlug>\n        </NameAndSlug>\n      </MonitorName>\n      <MonitorColumn>\n        <TextOverflow>\n          {monitorStatus === MonitorStatus.DISABLED\n            ? t('Paused')\n            : monitorStatus === MonitorStatus.ACTIVE || !lastCheckin\n            ? t('Waiting for first check-in')\n            : monitorStatus === MonitorStatus.OK\n            ? tct('Check-in [lastCheckin]', {lastCheckin})\n            : monitorStatus === MonitorStatus.MISSED_CHECKIN\n            ? tct('Missed [lastCheckin]', {lastCheckin})\n            : monitorStatus === MonitorStatus.ERROR\n            ? tct('Failed [lastCheckin]', {lastCheckin})\n            : null}\n        </TextOverflow>\n      </MonitorColumn>\n      <MonitorColumn>{scheduleAsText(monitor.config)}</MonitorColumn>\n      <MonitorColumn>\n        {monitorEnv?.nextCheckIn &&\n        monitorEnv.status !== MonitorStatus.DISABLED &&\n        monitorEnv.status !== MonitorStatus.ACTIVE ? (\n          <TimeSince unitStyle=\"regular\" date={monitorEnv.nextCheckIn} />\n        ) : (\n          '\\u2014'\n        )}\n      </MonitorColumn>\n      <MonitorColumn>\n        <IdBadge\n          project={monitor.project}\n          avatarSize={18}\n          avatarProps={{hasTooltip: true, tooltip: monitor.project.slug}}\n        />\n      </MonitorColumn>\n      <MonitorColumn>{monitorEnv?.name ?? '\\u2014'}</MonitorColumn>\n      <ActionsColumn>\n        <DropdownMenu\n          items={actions}\n          position=\"bottom-end\"\n          triggerProps={{\n            'aria-label': t('Actions'),\n            size: 'xs',\n            icon: <IconEllipsis size=\"xs\" />,\n            showChevron: false,\n          }}\n        />\n      </ActionsColumn>\n    </Fragment>\n  );\n}\n\nexport {MonitorRow};\n\nconst MonitorName = styled('div')`\n  display: flex;\n  align-items: center;\n  gap: ${space(2)};\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nconst NameAndSlug = styled('div')`\n  display: flex;\n  flex-direction: column;\n  gap: ${space(0.25)};\n`;\n\nconst MonitorSlug = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: ${p => p.theme.subText};\n`;\n\nconst MonitorColumn = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst ActionsColumn = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst AdditionalEnvironmentWarning = styled('div')`\n  margin: ${space(1)} 0;\n`;\n","import {Fragment} from 'react';\nimport {WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as qs from 'query-string';\n\nimport onboardingImg from 'sentry-images/spot/onboarding-preview.svg';\n\nimport {Button, ButtonProps} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {PageHeadingQuestionTooltip} from 'sentry/components/pageHeadingQuestionTooltip';\nimport Pagination from 'sentry/components/pagination';\nimport {PanelTable} from 'sentry/components/panels';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport SearchBar from 'sentry/components/searchBar';\nimport {IconAdd} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport withRouteAnalytics, {\n  WithRouteAnalyticsProps,\n} from 'sentry/utils/routeAnalytics/withRouteAnalytics';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport withOrganization from 'sentry/utils/withOrganization';\n// eslint-disable-next-line no-restricted-imports\nimport withSentryRouter from 'sentry/utils/withSentryRouter';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport CronsFeedbackButton from './components/cronsFeedbackButton';\nimport {MonitorRow} from './components/row';\nimport {Monitor, MonitorEnvironment} from './types';\n\ntype Props = AsyncView['props'] &\n  WithRouteAnalyticsProps &\n  WithRouterProps<{}> & {\n    organization: Organization;\n  };\n\ntype State = AsyncView['state'] & {\n  monitorList: Monitor[] | null;\n};\n\nfunction NewMonitorButton(props: ButtonProps) {\n  const organization = useOrganization();\n  const {selection} = usePageFilters();\n\n  return (\n    <Button\n      to={{\n        pathname: `/organizations/${organization.slug}/crons/create/`,\n        query: {project: selection.projects},\n      }}\n      priority=\"primary\"\n      {...props}\n    >\n      {props.children}\n    </Button>\n  );\n}\n\nclass Monitors extends AsyncView<Props, State> {\n  get orgSlug() {\n    return this.props.organization.slug;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {location} = this.props;\n    return [\n      [\n        'monitorList',\n        `/organizations/${this.orgSlug}/monitors/?includeNew`,\n        {\n          query: location.query,\n        },\n      ],\n    ];\n  }\n\n  getTitle() {\n    return `Crons - ${this.orgSlug}`;\n  }\n\n  onRequestSuccess(response): void {\n    this.props.setEventNames('monitors.page_viewed', 'Monitors: Page Viewed');\n    this.props.setRouteAnalyticsParams({\n      empty_state: response.data.length === 0,\n    });\n  }\n\n  handleSearch = (query: string) => {\n    const {location, router} = this.props;\n    router.push({\n      pathname: location.pathname,\n      query: normalizeDateTimeParams({\n        ...(location.query || {}),\n        query,\n      }),\n    });\n  };\n\n  renderBody() {\n    const {monitorList, monitorListPageLinks} = this.state;\n    const {organization} = this.props;\n\n    const renderMonitorRow = (monitor: Monitor, monitorEnv?: MonitorEnvironment) => (\n      <MonitorRow\n        key={monitor.slug}\n        monitor={monitor}\n        monitorEnv={monitorEnv}\n        onDelete={() => {\n          if (monitorList) {\n            this.setState({\n              monitorList: monitorList.filter(m => m.slug !== monitor.slug),\n            });\n          }\n        }}\n        organization={organization}\n      />\n    );\n\n    return (\n      <Layout.Page>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Layout.Title>\n              {t('Cron Monitors')}\n              <PageHeadingQuestionTooltip\n                title={t(\n                  'Scheduled monitors that check in on recurring jobs and tell you if they’re running on schedule, failing, or succeeding.'\n                )}\n                docsUrl=\"https://docs.sentry.io/product/crons/\"\n              />\n              <FeatureBadge type=\"beta\" />\n            </Layout.Title>\n          </Layout.HeaderContent>\n          <Layout.HeaderActions>\n            <ButtonBar gap={1}>\n              <CronsFeedbackButton />\n              <NewMonitorButton size=\"sm\" icon={<IconAdd isCircled size=\"xs\" />}>\n                {t('Add Monitor')}\n              </NewMonitorButton>\n            </ButtonBar>\n          </Layout.HeaderActions>\n        </Layout.Header>\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <Filters>\n              <PageFilterBar>\n                <ProjectPageFilter resetParamsOnChange={['cursor']} />\n                <EnvironmentPageFilter resetParamsOnChange={['cursor']} />\n              </PageFilterBar>\n              <SearchBar\n                query={decodeScalar(qs.parse(location.search)?.query, '')}\n                placeholder={t('Search by name')}\n                onSearch={this.handleSearch}\n              />\n            </Filters>\n            {monitorList?.length ? (\n              <Fragment>\n                <StyledPanelTable\n                  headers={[\n                    t('Monitor Name'),\n                    t('Status'),\n                    t('Schedule'),\n                    t('Next Checkin'),\n                    t('Project'),\n                    t('Environment'),\n                    t('Actions'),\n                  ]}\n                >\n                  {monitorList\n                    ?.map(monitor =>\n                      monitor.environments.length > 0\n                        ? monitor.environments.map(monitorEnv =>\n                            renderMonitorRow(monitor, monitorEnv)\n                          )\n                        : renderMonitorRow(monitor)\n                    )\n                    .flat()}\n                </StyledPanelTable>\n                {monitorListPageLinks && (\n                  <Pagination pageLinks={monitorListPageLinks} {...this.props} />\n                )}\n              </Fragment>\n            ) : (\n              <OnboardingPanel image={<img src={onboardingImg} />}>\n                <h3>{t('Let Sentry monitor your recurring jobs')}</h3>\n                <p>\n                  {t(\n                    \"We'll tell you if your recurring jobs are running on schedule, failing, or succeeding.\"\n                  )}\n                </p>\n                <ButtonList gap={1}>\n                  <NewMonitorButton>{t('Set up first cron monitor')}</NewMonitorButton>\n                  <Button href=\"https://docs.sentry.io/product/crons\" external>\n                    {t('Read docs')}\n                  </Button>\n                </ButtonList>\n              </OnboardingPanel>\n            )}\n          </Layout.Main>\n        </Layout.Body>\n      </Layout.Page>\n    );\n  }\n}\n\nconst Filters = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  gap: ${space(1.5)};\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledPanelTable = styled(PanelTable)`\n  grid-template-columns: 1fr max-content 1fr max-content max-content max-content max-content;\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n\nexport default withRouteAnalytics(withSentryRouter(withOrganization(Monitors)));\n","import {ObjectStatus, Project} from 'sentry/types';\n\nexport enum MonitorType {\n  UNKNOWN = 'unknown',\n  CRON_JOB = 'cron_job',\n}\n\n/**\n * Some old monitor configuratiosn do NOT have a schedule_type\n *\n * TODO: This should be removed once we've cleaned up our old data and can\n *       verify we don't have any config objects missing schedule_type\n */\ntype LegacyDefaultSchedule = undefined;\n\nexport enum ScheduleType {\n  CRONTAB = 'crontab',\n  INTERVAL = 'interval',\n}\n\nexport enum MonitorStatus {\n  OK = 'ok',\n  ERROR = 'error',\n  DISABLED = 'disabled',\n  ACTIVE = 'active',\n  MISSED_CHECKIN = 'missed_checkin',\n}\n\nexport enum CheckInStatus {\n  OK = 'ok',\n  ERROR = 'error',\n  IN_PROGRESS = 'in_progress',\n  MISSED = 'missed',\n}\n\ninterface BaseConfig {\n  checkin_margin: number;\n  max_runtime: number;\n  timezone: string;\n}\n\n/**\n * The configuration object used when the schedule is a CRONTAB\n */\nexport interface CrontabConfig extends BaseConfig {\n  /**\n   * The crontab schedule\n   */\n  schedule: string;\n  schedule_type: ScheduleType.CRONTAB | LegacyDefaultSchedule;\n}\n\n/**\n * The configuration object used when the schedule is an INTERVAL\n */\nexport interface IntervalConfig extends BaseConfig {\n  /**\n   * The interval style schedule\n   */\n  schedule: [\n    value: number,\n    interval: 'year' | 'month' | 'week' | 'day' | 'hour' | 'minute'\n  ];\n  schedule_type: ScheduleType.INTERVAL;\n}\n\nexport type MonitorConfig = CrontabConfig | IntervalConfig;\n\nexport interface MonitorEnvironment {\n  dateCreated: string;\n  lastCheckIn: string;\n  name: string;\n  nextCheckIn: string;\n  status: MonitorStatus;\n}\n\nexport interface Monitor {\n  config: MonitorConfig;\n  dateCreated: string;\n  environments: MonitorEnvironment[];\n  id: string;\n  name: string;\n  project: Project;\n  slug: string;\n  status: ObjectStatus;\n  type: MonitorType;\n}\n\nexport interface MonitorStat {\n  duration: number;\n  error: number;\n  missed: number;\n  ok: number;\n  ts: number;\n}\n","import cronstrue from 'cronstrue';\n\nimport {shouldUse24Hours} from 'sentry/utils/dates';\n\nexport function crontabAsText(crontabInput: string | null): string | null {\n  if (!crontabInput) {\n    return null;\n  }\n  let parsedSchedule: string;\n  try {\n    parsedSchedule = cronstrue.toString(crontabInput, {\n      verbose: true,\n      use24HourTimeFormat: shouldUse24Hours(),\n    });\n  } catch (_e) {\n    return null;\n  }\n\n  return parsedSchedule;\n}\n"],"names":["async","deleteMonitor","api","orgId","monitorSlug","addLoadingMessage","t","requestPromise","method","clearIndicators","addErrorMessage","updateMonitor","data","resp","err","ex","Sentry","scope","window","console","error","DiamondStatus","_ref","color","icon","Icon","props","_jsxs","StatusWrapper","role","children","_jsx","DiamondBackground","displayName","_styled","IconDiamond","target","name","styles","OnboardingPanel","image","noCenter","Panel","Container","IlloBox","StyledBox","centered","space","p","theme","breakpoints","small","medium","SearchBar","query","queryProp","defaultQuery","onChange","onSearch","width","size","className","trailing","inputProps","inputRef","useRef","setQuery","useState","useEffect","onQueryChange","useCallback","e","value","onSubmit","preventDefault","current","blur","clearSearch","FormWrap","InputGroup","disablePointerEvents","IconSearch","StyledInput","ref","type","autoComplete","SearchBarTrailingButton","borderless","onClick","IconClose","Button","subText","AsyncView","AsyncComponent","getTitle","render","SentryDocumentTitle","title","this","renderComponent","CronsFeedbackButton","FeatureFeedback","featureName","buttonProps","MonitorBadge","status","statusMap","ok","IconCheckmark","IconFire","missed_checkin","IconExclamation","active","IconTimer","disabled","IconPause","scheduleAsText","config","schedule_type","ScheduleType","crontabAsText","schedule","timeUnit","tn","MonitorRow","monitor","monitorEnv","organization","onDelete","useApi","lastCheckin","lastCheckIn","TimeSince","unitStyle","date","deletionModalMessage","Fragment","Text","tct","environments","length","AdditionalEnvironmentWarning","List","symbol","map","environment","ListItem","actions","key","label","to","normalizeUrl","pathname","slug","priority","onAction","openConfirmModal","onConfirm","header","message","confirmText","monitorDetailUrl","monitorStatus","MonitorName","NameAndSlug","Link","MonitorSlug","MonitorColumn","TextOverflow","MonitorStatus","nextCheckIn","IdBadge","project","avatarSize","avatarProps","hasTooltip","tooltip","ActionsColumn","DropdownMenu","items","position","triggerProps","IconEllipsis","showChevron","fontSizeLarge","fontSizeSmall","NewMonitorButton","useOrganization","selection","usePageFilters","projects","Monitors","constructor","arguments","_defineProperty","location","router","push","normalizeDateTimeParams","orgSlug","getEndpoints","onRequestSuccess","response","setEventNames","setRouteAnalyticsParams","empty_state","renderBody","monitorList","monitorListPageLinks","state","renderMonitorRow","setState","filter","m","Layout","PageHeadingQuestionTooltip","docsUrl","FeatureBadge","ButtonBar","gap","IconAdd","isCircled","fullWidth","Filters","PageFilterBar","ProjectPageFilter","resetParamsOnChange","EnvironmentPageFilter","decodeScalar","qs","search","placeholder","handleSearch","StyledPanelTable","headers","flat","Pagination","pageLinks","src","onboardingImg","ButtonList","href","external","PanelTable","withRouteAnalytics","withSentryRouter","withOrganization","MonitorType","CheckInStatus","crontabInput","parsedSchedule","cronstrue","verbose","use24HourTimeFormat","shouldUse24Hours","_e"],"sourceRoot":""}