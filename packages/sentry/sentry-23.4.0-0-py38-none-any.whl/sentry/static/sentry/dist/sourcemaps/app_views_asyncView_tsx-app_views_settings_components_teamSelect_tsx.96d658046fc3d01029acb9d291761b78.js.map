{"version":3,"file":"chunks/app_views_asyncView_tsx-app_views_settings_components_teamSelect_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/roleSelectControl.tsx","webpack:///./app/utils/orgRole.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/teamSelect.tsx","webpack:///./app/views/settings/organizationTeams/roleOverwriteWarning.tsx","webpack:///./app/views/settings/organizationTeams/utils.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport SelectControl, {\n  ControlProps,\n} from 'sentry/components/forms/controls/selectControl';\nimport {MemberRole} from 'sentry/types';\n\ntype OptionType = {\n  details: React.ReactNode;\n  disabled: boolean;\n  label: string;\n  value: string;\n};\n\ntype Props = Omit<ControlProps<OptionType>, 'onChange' | 'value'> & {\n  disableUnallowed: boolean;\n  roles: MemberRole[];\n  /**\n   * Narrower type than SelectControl because there is no empty value\n   */\n  onChange?: (value: OptionType) => void;\n  value?: string | null;\n};\n\nfunction RoleSelectControl({roles, disableUnallowed, ...props}: Props) {\n  return (\n    <SelectControl\n      options={roles?.map(\n        (r: MemberRole) =>\n          ({\n            value: r.id,\n            label: r.name,\n            disabled: (disableUnallowed && !r.allowed) || r.isRetired,\n            details: <Details>{r.desc}</Details>,\n          } as OptionType)\n      )}\n      showDividers\n      {...props}\n    />\n  );\n}\n\nexport default RoleSelectControl;\n\nconst Details = styled('span')`\n  display: inline-block;\n  width: 20rem;\n`;\n","import {OrgRole} from 'sentry/types';\n\nexport function getEffectiveOrgRole(memberOrgRoles: string[], orgRoleList: OrgRole[]) {\n  const orgRoleMap = orgRoleList.reduce((acc, role, index) => {\n    acc[role.id] = {index, role};\n    return acc;\n  }, {});\n\n  // sort by ascending index (high to low priority)\n  memberOrgRoles.sort((a, b) => orgRoleMap[b].index - orgRoleMap[a].index);\n\n  return orgRoleMap[memberOrgRoles[0]]?.role;\n}\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\nimport startCase from 'lodash/startCase';\n\nimport {Button} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport DropdownAutoComplete from 'sentry/components/dropdownAutoComplete';\nimport {Item} from 'sentry/components/dropdownAutoComplete/types';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport {TeamBadge} from 'sentry/components/idBadge/teamBadge';\nimport Link from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport RoleSelectControl from 'sentry/components/roleSelectControl';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {DEFAULT_DEBOUNCE_DURATION} from 'sentry/constants';\nimport {IconSubtract} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Member, Organization, Team} from 'sentry/types';\nimport {getEffectiveOrgRole} from 'sentry/utils/orgRole';\nimport useTeams from 'sentry/utils/useTeams';\nimport {\n  hasOrgRoleOverwrite,\n  RoleOverwritePanelAlert,\n} from 'sentry/views/settings/organizationTeams/roleOverwriteWarning';\nimport {getButtonHelpText} from 'sentry/views/settings/organizationTeams/utils';\n\ntype Props = {\n  /**\n   * Should button be disabled\n   */\n  disabled: boolean;\n  /**\n   * Used when showing Teams for a Member\n   * Prevent changes to a SCIM-provisioned member\n   */\n  enforceIdpProvisioned: boolean;\n  /**\n   * callback when teams are added\n   */\n  onAddTeam: (teamSlug: string) => void;\n  /**\n   * Callback when teams are removed\n   */\n  onRemoveTeam: (teamSlug: string) => void;\n  organization: Organization;\n  /**\n   * Message to display when the last team is removed\n   * if empty no confirm will be displayed.\n   */\n  confirmLastTeamRemoveMessage?: string;\n  /**\n   * Allow adding to teams with org role\n   * if the user is an org owner\n   */\n  isOrgOwner?: boolean;\n  /**\n   * Used to determine whether we should show a loading state while waiting for teams\n   */\n  loadingTeams?: boolean;\n  /**\n   * Optional menu header.\n   */\n  menuHeader?: React.ReactElement;\n  /**\n   * Used when showing Teams for a Member\n   */\n  onChangeTeamRole?: (teamSlug: string, teamRole: string) => void;\n  /**\n   * Used when showing Teams for a Member\n   */\n  selectedOrgRole?: Member['orgRole'];\n  /**\n   * Used when showing Teams for a Member\n   */\n  selectedTeamRoles?: Member['teamRoles'];\n  /**\n   * Used when showing Teams for a Project\n   */\n  selectedTeams?: Team[];\n};\n\nfunction TeamSelect({\n  disabled,\n  isOrgOwner,\n  loadingTeams,\n  enforceIdpProvisioned,\n  menuHeader,\n  confirmLastTeamRemoveMessage,\n  selectedOrgRole,\n  selectedTeamRoles,\n  selectedTeams,\n  organization,\n  onAddTeam,\n  onRemoveTeam,\n  onChangeTeamRole,\n}: Props) {\n  const {teams, onSearch, fetching} = useTeams();\n  const {orgRoleList, teamRoleList} = organization;\n\n  const slugsToFilter: string[] =\n    selectedTeams?.map(tm => tm.slug) || selectedTeamRoles?.map(tm => tm.teamSlug) || [];\n\n  // Determine if adding a team changes the minimum team-role\n  // Get org roles from team membership, if any\n  const orgRolesFromTeams = teams\n    .filter(team => slugsToFilter.includes(team.slug) && team.orgRole)\n    .map(team => team.orgRole as string);\n\n  if (selectedOrgRole) {\n    orgRolesFromTeams.push(selectedOrgRole);\n  }\n\n  // Sort them and to get the highest priority role\n  // Highest prio role may change minimum team role\n  const effectiveOrgRole = getEffectiveOrgRole(orgRolesFromTeams, orgRoleList)?.id;\n\n  const renderBody = () => {\n    const numTeams = selectedTeams?.length || selectedTeamRoles?.length;\n    if (numTeams === 0) {\n      return <EmptyMessage>{t('No Teams assigned')}</EmptyMessage>;\n    }\n\n    const confirmMessage =\n      numTeams === 1 && confirmLastTeamRemoveMessage\n        ? confirmLastTeamRemoveMessage\n        : null;\n\n    return (\n      <React.Fragment>\n        {organization.features.includes('team-roles') && effectiveOrgRole && (\n          <RoleOverwritePanelAlert\n            orgRole={effectiveOrgRole}\n            orgRoleList={orgRoleList}\n            teamRoleList={teamRoleList}\n          />\n        )}\n\n        {selectedTeams &&\n          selectedTeams.map(team => (\n            <ProjectTeamRow\n              key={team.slug}\n              disabled={disabled}\n              confirmMessage={confirmMessage}\n              organization={organization}\n              team={team}\n              onRemoveTeam={slug => onRemoveTeam(slug)}\n            />\n          ))}\n\n        {effectiveOrgRole &&\n          selectedTeamRoles &&\n          /**\n           * \"Map + Find\" operation is O(n * n), leaving it as it us because it is unlikely to cause performance issues because a Member is unlikely to be in 1000+ teams\n           */\n          selectedTeamRoles.map(r => {\n            const team = teams.find(tm => tm.slug === r.teamSlug);\n            if (!team) {\n              return (\n                <TeamPanelItem key={r.teamSlug}>\n                  {tct(`Cannot find #[slug]`, {slug: r.teamSlug})}\n                </TeamPanelItem>\n              );\n            }\n\n            return (\n              <MemberTeamRow\n                key={r.teamSlug}\n                disabled={disabled}\n                enforceIdpProvisioned={enforceIdpProvisioned}\n                confirmMessage={confirmMessage}\n                organization={organization}\n                team={team}\n                isOrgOwner={isOrgOwner ?? false}\n                selectedOrgRole={effectiveOrgRole}\n                selectedTeamRole={r.role}\n                onChangeTeamRole={onChangeTeamRole}\n                onRemoveTeam={slug => onRemoveTeam(slug)}\n              />\n            );\n          })}\n      </React.Fragment>\n    );\n  };\n\n  // Only show options that aren't selected in the dropdown\n  const options = teams\n    .filter(team => !slugsToFilter.some(slug => slug === team.slug))\n    .map((team, index) => {\n      const isIdpProvisioned = enforceIdpProvisioned && team.flags['idp:provisioned'];\n\n      return {\n        index,\n        value: team.slug,\n        searchKey: team.slug,\n        label: () => {\n          // TODO(team-roles): team admins can also manage membership\n          const isPermissionGroup = team.orgRole !== null && !isOrgOwner;\n          const buttonHelpText = getButtonHelpText(isIdpProvisioned, isPermissionGroup);\n\n          if (isIdpProvisioned || isPermissionGroup) {\n            return (\n              <Tooltip title={buttonHelpText}>\n                <DropdownTeamBadgeDisabled avatarSize={18} team={team} />\n              </Tooltip>\n            );\n          }\n\n          return <DropdownTeamBadge avatarSize={18} team={team} />;\n        },\n        disabled: disabled || isIdpProvisioned || (team.orgRole !== null && !isOrgOwner),\n      };\n    });\n\n  return (\n    <Panel>\n      <PanelHeader hasButtons>\n        {t('Team')}\n        <DropdownAutoComplete\n          items={options}\n          busyItemsStillVisible={fetching}\n          onChange={debounce<(e: React.ChangeEvent<HTMLInputElement>) => void>(\n            e => onSearch(e.target.value),\n            DEFAULT_DEBOUNCE_DURATION\n          )}\n          onSelect={(option: Item) => onAddTeam(option.value)}\n          emptyMessage={t('No teams')}\n          menuHeader={menuHeader}\n          disabled={disabled}\n          alignMenu=\"right\"\n        >\n          {({isOpen}) => (\n            <DropdownButton\n              aria-label={t('Add Team')}\n              isOpen={isOpen}\n              size=\"xs\"\n              disabled={disabled}\n            >\n              {t('Add Team')}\n            </DropdownButton>\n          )}\n        </DropdownAutoComplete>\n      </PanelHeader>\n\n      <PanelBody>{loadingTeams ? <LoadingIndicator /> : renderBody()}</PanelBody>\n    </Panel>\n  );\n}\n\ntype TeamRowProps = {\n  confirmMessage: string | null;\n  disabled: boolean;\n  onRemoveTeam: Props['onRemoveTeam'];\n  organization: Organization;\n  team: Team;\n};\n\ntype ProjectTeamRowProps = {} & TeamRowProps;\n\nfunction ProjectTeamRow({\n  organization,\n  team,\n  onRemoveTeam,\n  disabled,\n  confirmMessage,\n}: ProjectTeamRowProps) {\n  return (\n    <TeamPanelItem data-test-id=\"team-row-for-project\">\n      <StyledLink to={`/settings/${organization.slug}/teams/${team.slug}/`}>\n        <TeamBadge team={team} />\n      </StyledLink>\n\n      <Confirm\n        message={confirmMessage}\n        bypass={!confirmMessage}\n        onConfirm={() => onRemoveTeam(team.slug)}\n        disabled={disabled}\n      >\n        <Button size=\"xs\" icon={<IconSubtract isCircled size=\"xs\" />} disabled={disabled}>\n          {t('Remove')}\n        </Button>\n      </Confirm>\n    </TeamPanelItem>\n  );\n}\n\ntype MemberTeamRowProps = {\n  enforceIdpProvisioned: boolean;\n  isOrgOwner: boolean;\n  onChangeTeamRole: Props['onChangeTeamRole'];\n  selectedOrgRole: Member['orgRole'];\n  selectedTeamRole: Member['teamRoles'][0]['role'];\n} & TeamRowProps;\n\nfunction MemberTeamRow({\n  organization,\n  team,\n  selectedOrgRole,\n  selectedTeamRole,\n  onRemoveTeam,\n  onChangeTeamRole,\n  isOrgOwner,\n  disabled,\n  confirmMessage,\n  enforceIdpProvisioned,\n}: MemberTeamRowProps) {\n  const {teamRoleList, orgRoleList} = organization;\n  const isRoleOverwritten = hasOrgRoleOverwrite({\n    orgRole: selectedOrgRole,\n    orgRoleList,\n    teamRoleList,\n  });\n\n  const teamRoleObj = isRoleOverwritten\n    ? teamRoleList[1] // set as team admin\n    : teamRoleList.find(r => r.id === selectedTeamRole) || teamRoleList[0];\n\n  const orgRoleFromTeam = team.orgRole ? `${startCase(team.orgRole)} Team` : null;\n\n  const isIdpProvisioned = enforceIdpProvisioned && team.flags['idp:provisioned'];\n  const isPermissionGroup = team.orgRole !== null && !isOrgOwner;\n  const isRemoveDisabled = disabled || isIdpProvisioned || isPermissionGroup;\n\n  const buttonHelpText = getButtonHelpText(isIdpProvisioned, isPermissionGroup);\n\n  return (\n    <TeamPanelItem data-test-id=\"team-row-for-member\">\n      <StyledLink to={`/settings/${organization.slug}/teams/${team.slug}/`}>\n        <TeamBadge team={team} />\n      </StyledLink>\n\n      <TeamOrgRole>{orgRoleFromTeam}</TeamOrgRole>\n\n      {organization.features.includes('team-roles') && onChangeTeamRole && (\n        <React.Fragment>\n          <StyledRoleSelectControl\n            disabled={disabled || isRoleOverwritten}\n            disableUnallowed={false}\n            size=\"xs\"\n            roles={teamRoleList}\n            value={teamRoleObj?.id}\n            onChange={option => onChangeTeamRole(team.slug, option.value)}\n          />\n        </React.Fragment>\n      )}\n\n      <Confirm\n        message={confirmMessage}\n        bypass={!confirmMessage}\n        onConfirm={() => onRemoveTeam(team.slug)}\n        disabled={isRemoveDisabled}\n      >\n        <Button\n          size=\"xs\"\n          icon={<IconSubtract isCircled size=\"xs\" />}\n          disabled={isRemoveDisabled}\n          title={buttonHelpText}\n        >\n          {t('Remove')}\n        </Button>\n      </Confirm>\n    </TeamPanelItem>\n  );\n}\n\nconst DropdownTeamBadge = styled(TeamBadge)`\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeMedium};\n  text-transform: none;\n`;\n\nconst DropdownTeamBadgeDisabled = styled(TeamBadge)`\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeMedium};\n  text-transform: none;\n  filter: grayscale(1);\n`;\n\nconst TeamPanelItem = styled(PanelItem)`\n  padding: ${space(2)};\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst StyledLink = styled(Link)`\n  flex-grow: 4;\n`;\n\nconst TeamOrgRole = styled('div')`\n  min-width: 90px;\n  flex-grow: 1;\n  display: flex;\n  justify-content: center;\n`;\n\nconst StyledRoleSelectControl = styled(RoleSelectControl)`\n  min-width: 200px;\n  margin-right: ${space(2)};\n`;\n\nexport default TeamSelect;\n","import {PanelAlert} from 'sentry/components/panels';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {IconInfo} from 'sentry/icons';\nimport {tct} from 'sentry/locale';\nimport {OrgRole, TeamRole} from 'sentry/types';\n\ntype Props = {\n  orgRole: OrgRole['id'] | undefined;\n  orgRoleList: OrgRole[];\n  teamRoleList: TeamRole[];\n  isSelf?: boolean;\n};\n\nexport function RoleOverwriteIcon(props: Props) {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <Tooltip title={getOverwriteString(props)}>\n      <IconInfo size=\"sm\" color=\"gray300\" />\n    </Tooltip>\n  );\n}\n\nexport function RoleOverwritePanelAlert(props: Props) {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <PanelAlert data-test-id=\"alert-role-overwrite\">\n      {getOverwriteString(props)}\n    </PanelAlert>\n  );\n}\n\n/**\n * Check that the user's org role has a minimum team role that maps to the lowest\n * possible team role\n */\nexport function hasOrgRoleOverwrite(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList} = props;\n\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  return teamRoleList.findIndex(r => r.id === orgRoleObj?.minimumTeamRole) > 0;\n}\n\n/**\n * Standardize string so situations where org-level vs team-level roles is easier to recognize\n */\nexport function getOverwriteString(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList, isSelf} = props;\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  const teamRoleObj = teamRoleList.find(r => r.id === orgRoleObj?.minimumTeamRole);\n  if (!orgRoleObj || !teamRoleObj) {\n    return '';\n  }\n\n  return tct(\n    '[selfNoun] organization role as [article] [orgRole] has granted [selfPronoun] a minimum team-level role of [teamRole]',\n    {\n      selfNoun: isSelf ? 'Your' : \"This user's\",\n      selfPronoun: isSelf ? 'you' : 'them',\n      article: 'AEIOU'.includes(orgRoleObj.name[0]) ? 'an' : 'a',\n      orgRole: <strong>{orgRoleObj.name}</strong>,\n      teamRole: <strong>{teamRoleObj.name}</strong>,\n    }\n  );\n}\n\nexport default RoleOverwriteIcon;\n","import {t} from 'sentry/locale';\n\nexport function getButtonHelpText(isIdpProvisioned: boolean, isPermissionGroup: boolean) {\n  if (isIdpProvisioned) {\n    return t(\n      \"Membership to this team is managed through your organization's identity provider.\"\n    );\n  }\n  if (isPermissionGroup) {\n    return t('Membership to a team with an organization role is managed by org owners.');\n  }\n  return undefined;\n}\n"],"names":["RoleSelectControl","_ref","roles","disableUnallowed","props","_jsx","SelectControl","options","map","r","value","id","label","name","disabled","allowed","isRetired","details","Details","children","desc","showDividers","displayName","_styled","target","styles","getEffectiveOrgRole","memberOrgRoles","orgRoleList","orgRoleMap","reduce","acc","role","index","sort","a","b","AsyncView","AsyncComponent","getTitle","render","SentryDocumentTitle","title","this","renderComponent","TeamSelect","isOrgOwner","loadingTeams","enforceIdpProvisioned","menuHeader","confirmLastTeamRemoveMessage","selectedOrgRole","selectedTeamRoles","selectedTeams","organization","onAddTeam","onRemoveTeam","onChangeTeamRole","teams","onSearch","fetching","useTeams","teamRoleList","slugsToFilter","tm","slug","teamSlug","orgRolesFromTeams","filter","team","includes","orgRole","push","effectiveOrgRole","some","isIdpProvisioned","flags","searchKey","isPermissionGroup","buttonHelpText","getButtonHelpText","Tooltip","DropdownTeamBadgeDisabled","avatarSize","DropdownTeamBadge","_jsxs","Panel","PanelHeader","hasButtons","t","DropdownAutoComplete","items","busyItemsStillVisible","onChange","debounce","e","DEFAULT_DEBOUNCE_DURATION","onSelect","option","emptyMessage","alignMenu","_ref2","isOpen","DropdownButton","size","PanelBody","LoadingIndicator","renderBody","numTeams","length","EmptyMessage","confirmMessage","React","features","RoleOverwritePanelAlert","ProjectTeamRow","find","MemberTeamRow","selectedTeamRole","TeamPanelItem","tct","_ref3","StyledLink","to","TeamBadge","Confirm","message","bypass","onConfirm","Button","icon","IconSubtract","isCircled","_ref4","isRoleOverwritten","hasOrgRoleOverwrite","teamRoleObj","orgRoleFromTeam","startCase","isRemoveDisabled","TeamOrgRole","StyledRoleSelectControl","p","theme","fontSizeMedium","PanelItem","space","Link","RoleOverwriteIcon","getOverwriteString","IconInfo","color","PanelAlert","orgRoleObj","findIndex","minimumTeamRole","isSelf","selfNoun","selfPronoun","article","teamRole"],"sourceRoot":""}