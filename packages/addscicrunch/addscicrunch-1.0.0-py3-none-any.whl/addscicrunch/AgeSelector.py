# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'AgeSelector.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PySide6 import QtCore, QtGui, QtWidgets
from PySide6.QtCore import Signal
from PySide6.QtGui import QValidator, QRegularExpressionValidator
from PySide6.QtWidgets import QWidget

class AgeSelector(QWidget):
    editingFinished = Signal()
    
    def __init__(self):
        super(AgeSelector, self).__init__()
        self.agevalidator = QRegularExpressionValidator(QtCore.QRegularExpression(r"(\d)+(.(\d)+)?"))
        self.units = ["Blinded to condition","Days","Weeks","Months","Years"]
        self.setupUi()
        
    def setupUi(self):
        self.setObjectName("wdgAgeSelector")
        self.resize(171, 42)
        self.horizontalLayout = QtWidgets.QHBoxLayout(self)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.ledNumber = QtWidgets.QLineEdit(self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.ledNumber.sizePolicy().hasHeightForWidth())
        self.ledNumber.setSizePolicy(sizePolicy)
        self.ledNumber.setObjectName("ledNumber")
        self.ledNumber.setValidator(self.agevalidator)
        self.horizontalLayout.addWidget(self.ledNumber)
        self.cbxUnits = QtWidgets.QComboBox(self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.cbxUnits.sizePolicy().hasHeightForWidth())
        self.cbxUnits.setSizePolicy(sizePolicy)
        self.cbxUnits.setObjectName("cbxUnits")
        self.cbxUnits.addItems(self.units)
        self.horizontalLayout.addWidget(self.cbxUnits)
        self.horizontalLayout.setStretch(1, 2)
        QtCore.QMetaObject.connectSlotsByName(self)
        self.cbxUnits.currentIndexChanged.connect(self.onUnitsChanged)
        self.ledNumber.editingFinished.connect(self.onNumberChanged)

    def onUnitsChanged(self):
        self.updateState()

    def onNumberChanged(self):
        self.updateState()

    def updateState(self):
        if self.isBlind():
            self.ledNumber.clear()
            self.ledNumber.setDisabled(True)
            self.ledNumber.setStyleSheet("QWidget{background-color:#dddddd}")
        else:
            self.ledNumber.setDisabled(False)
            self.ledNumber.setStyleSheet("QWidget{background-color:white}")
        self.editingFinished.emit()

    def setSaved(self):
        if self.isBlind():
            self.ledNumber.setStyleSheet("QWidget{background-color:#90cccc}")
        else:
            self.ledNumber.setStyleSheet("QWidget{background-color:paleturquoise}")

    def isBlind(self):
        return self.cbxUnits.currentIndex() == 0

    def isEmpty(self):
        if self.getUnit() is None:
            return True
        elif self.isBlind():
            return False
        elif self.getNumber() is None:
            return True
        else:
            return False

    def getUnit(self):
        if self.cbxUnits.currentIndex() >= 0:
            return self.units[self.cbxUnits.currentIndex()]
        else:
            return None

    def getNumber(self):
        if len(self.ledNumber.text()) > 0:
            return self.ledNumber.text()
        else:
            return None

    def __setUnit(self,unit):
        if unit in self.units:
            ind = self.units.index(unit)
            self.cbxUnits.setCurrentIndex(ind)

    def __setNumber(self,num):
        if self.agevalidator.validate(num,0)[0] == QValidator.Acceptable:
            self.ledNumber.setText(num)

    def setData(self,txt):
        if txt is not None:
            if txt == self.units[0]:
                self.__setUnit(self.units[0])
            else:
                ls = txt.split(" ")
                if len(ls) == 2:
                    num = ls[0]
                    unit = ls[1]
                    self.__setNumber(num)
                    self.__setUnit(unit)
            self.updateState()

    def getStr(self):
        if self.isBlind():
            return self.units[0]
        elif not self.isEmpty():
            return "{num} {unit}".format(num=self.getNumber(),unit=self.getUnit())
        else:
            return str()
