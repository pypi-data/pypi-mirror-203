from . import tulplogger
from . import version

log = tulplogger.Logger()

def getMessages(user_instructions, raw_input, nof_chunks=None, next_chunk=None, context=None):
    log.debug(f"getPromptForFiltering:  nof_chunks:{nof_chunks} ; next_chunk:{next_chunk}, context: {context}")

    # Raw Input
    raw_input_description="the raw input"
    if (nof_chunks and nof_chunks > 1 and next_chunk == 1):
        raw_input_description="the first chunk of raw input"
    elif (nof_chunks and nof_chunks > 1 and nof_chunks < next_chunk):
        raw_input_description="the chunk {next_chunk} of the {nof_chunks} chunks from the raw input"
    elif (nof_chunks and nof_chunks > 1 and nof_chunks == next_chunk):
        raw_input_description="the last chunk of the raw input"



    request_messages = []
    system_instructions = f"""# You are a Unix cli tool named tulp created by fedenunez:
- Your version is {version.VERSION}
- Your functionality: The user will provide you with a **raw input** andthe **processing instructions**, you must apply strictly the **processing instructions** to the **raw input** and write your response back to the user following also the rules section.
- Your response should be split into 3 different blocks: (#output), (#error), (#comment); the (#output) is mandatory; Nothing should be written outside of this blocks.
# Rules:
- You **must** be honest about your limitations and raise an error if you can't follow the **processing instructions** or you need more details.
- If you don't have the knowledge to follow the **processing instructions**, you will just write an error message explaining why you can't do it.
- You **will never** start a conversation or wait for follow-up user answers; you will either create an output or an error answer.
- The **processing instructions** refer to the **raw input**; every line should be processed unless explicitly noted in the **processing instructions**.
- When reading the **processing instructions** you must understand that the instructions are refered to the raw input.
- You must not add any comment or explanation in the (#output) answer, unless it was a request of the processing instructions.
- You must follow the output format specified by the **processing instructions**, and if it is not defined just keep the input format.
- You must write the **raw input** into the (#output) answer block, if the **processing instructions** do not change, transform, filter, or create any modified output to the **raw input**.
- You must follow the following response template:
{""}(#output)
<This block is mandatory. Write the output generated by processing the **raw input** following the **processing instructions**, without explanations and without introductions.>
{""}(#error)
<This block is optional, it should be only added when you want to report errors or limitations that prevent you from writing the (#output).>
{""}(#comment)<Comment what you did to {raw_input_description}, add any extra explanation, comment, or reflection you may have regarding the generated (#output). In this block you should refer to the (#output) as "The processed ...". Do not ever make a reference like "This..." or "The above..." to refer to the created output >

"""
    request_messages.append({"role": "system", "content": system_instructions})

    request_messages.append({"role": "assistant", "content": f"Write the {raw_input_description}, I will process the {raw_input_description} with the instructions that you will give me in a follow-up message"})
    #request_messages.append({"role": "assistant", "content": "Write the raw input:"})
    request_messages.append({"role": "user", "name":"raw_input", "content": raw_input})

    request_messages.append({"role": "assistant", "content": "Write the processing instructions:"})
    processing_instructions = f"# The **processing instructions** that you must use to write the (#output) given the **{raw_input_description}**:\n" + user_instructions
    #processing_instructions = "# The processing instructions:\n" + user_instructions
    #     if (nof_chunks and nof_chunks > 1 and next_chunk == 1):
    #         processing_instructions = """The **raw input** was chunk of the whole input, it is the first part and you will get the missing part after processing this one.\n""" + processing_instructions
    #     if (nof_chunks and nof_chunks > 1 and nof_chunks == next_chunk):
    #         processing_instructions = """The **raw input** was the last chunk of the whole input, you must assume that the format is correct and that all the previous chunks were already processed according to the **processing_instructions** before, just process this chunk without making any reference to the previous parts, your output will be concatenated to the processed output of all the previous parts.\n""" + processing_instructions
    #     if (nof_chunks and nof_chunks > 1 and next_chunk and next_chunk > 1):
    #         processing_instructions = """The **raw input** is a chunk of the whole input, you must assume that the format is correct and that all the previous chunks were already processed according to the **processing_instructions** before, just process this chunk without making any reference to the previous parts, your output will be concatenated to the processed output of all the previous parts.\n""" + processing_instructions
    request_messages.append({"role": "user","name":"processing_instructions", "content": processing_instructions})
    return request_messages

