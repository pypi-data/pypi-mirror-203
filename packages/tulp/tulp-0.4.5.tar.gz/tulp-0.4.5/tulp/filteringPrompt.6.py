from . import tulplogger
from . import version

log = tulplogger.Logger()

def getMessages(user_instructions, raw_input, nof_chunks=None, next_chunk=None, context=None):
    log.debug(f"getPromptForFiltering:  nof_chunks:{nof_chunks} ; next_chunk:{next_chunk}, context: {context}")

    # Raw Input
    raw_input_description="**raw input**"
    if (nof_chunks and nof_chunks > 1 and next_chunk == 1):
        raw_input_description="first chunk of raw input"
    elif (nof_chunks and nof_chunks > 1 and nof_chunks < next_chunk):
        raw_input_description="chunk {next_chunk} of the {nof_chunks} chunks from the raw input"
    elif (nof_chunks and nof_chunks > 1 and nof_chunks == next_chunk):
        raw_input_description="last chunk of the raw input"



    request_messages = []
    system_instructions = f"""# You are a Unix cli tool named tulp created by fedenunez:
- Your version is {version.VERSION}
- Your response to the raw_input message may include 3 different blocks: (#output), (#error), (#comment); you should either write (#output) and (#comment), or an (#error) if it is not possible to create an (#output); Nothing should be written outside of this blocks, the user will define the template to use for creating this reply.
- The user will provide you with an **raw input** an the **processing instructions** and some rules, you must apply strictly the **processing instructions** to the **raw input** and write your response back to the user following the rules.
"""
    rules_prompt = f"""
# Rules:
- You must always follow the **processing instructions** that the user will define
- You **must** be honest about your limitations and raise an error if you can't follow the **processing instructions** or you need more details.
- If you don't have the knowledge to follow the **processing instructions**, you will just write an error message explaining why you can't do it.
- You **will never** start a conversation or wait for follow-up user answers; you will either create an (#output) or an (#error) answer.
- The **processing instructions** refer to the **raw input**; every line should be processed unless explicitly noted in the **processing instructions**.
- You must always interpreate the **processing instructions** as written to be applied to **raw input** text.
- You must follow the output format specified by the **processing instructions**, and if it is not defined just keep the same format used by the *raw input**.
- You must write the **raw input** into the (#output) answer block, if applying the **processing instructions** to the **raw input** gives the same output.
- You must not add any comment or explanation in the (#output) answer, unless it is request on the **processing instructions**.
"""
    template_description = f"""# You answer to the raw_input must follow this template:
{""}(#output)
<Write the raw output generated by processing the **raw input** using the **processing instructions**. Explainations are not allowed here, unless the **processing instructions** explicitly ask for them. You may write all the explanations into the (#comment) block. This block is mandatory>
{""}(#error)
<In case of error, report errors or limitations that prevent you from writing the (#output).>
{""}(#comment)
<Write a description of what you did to create the (#output). Add any extra explanation, comment, or reflection you may have regarding the generated (#output). In this block you should refer to the (#output) as "The processed ...". Do not ever make a reference like "This..." or "The above..." to refer to the created output >"""
    #request_messages.append({"role": "system", "content": system_instructions + template_description})
    request_messages.append({"role": "system", "content": system_instructions})
    request_messages.append({"role": "user", "content": rules_prompt + template_description})
    #request_messages.append({"role": "user", "name":"reply_temlpate", "content": template_description})

    request_messages.append({"role": "assistant", "content": "Ok. Please, enter the **processing instructions**:"})
    processing_instructions =  f"{user_instructions}"
    request_messages.append({"role": "user", "name":"processing_instructions", "content": processing_instructions})
    #request_messages.append({"role": "assistant", "content": f"# My processing instructions are:\n {user_instructions}\n\nPlease enter the raw input:"})
    request_messages.append({"role": "assistant", "content": f"Ok, please, enter the {raw_input_description}:"})
    #request_messages.append({"role": "assistant", "content": f"Write the {raw_input_description}, meaning the **raw input** that we will process once we get the **processing instructions** in a follow-up message"})
    #request_messages.append({"role": "user", "content": "# The raw input is all the content of my message named raw_input:"})
    request_messages.append({"role": "user", "name": "raw_input", "content": raw_input})


    return request_messages

