# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
import uuid
from json.decoder import JSONDecodeError

import httpx
import pydantic
from backports.cached_property import cached_property

from .core.api_error import ApiError
from .core.jsonable_encoder import jsonable_encoder
from .core.remove_none_from_headers import remove_none_from_headers
from .environment import VellumEnvironment
from .resources.commons.errors.bad_request_error import BadRequestError
from .resources.commons.errors.internal_server_error import InternalServerError
from .resources.commons.errors.not_found_error import NotFoundError
from .resources.commons.types.error_response import ErrorResponse
from .resources.completion_actuals.client import AsyncCompletionActualsClient, CompletionActualsClient
from .resources.document.client import AsyncDocumentClient, DocumentClient
from .types.generate_options_request import GenerateOptionsRequest
from .types.generate_request import GenerateRequest
from .types.generate_response import GenerateResponse
from .types.search_request_options import SearchRequestOptions
from .types.search_response import SearchResponse


class Vellum:
    def __init__(self, *, environment: VellumEnvironment = VellumEnvironment.PRODUCTION, api_key: str):
        self._environment = environment
        self.api_key = api_key

    def generate(
        self,
        *,
        deployment_id: typing.Optional[uuid.UUID] = None,
        deployment_name: typing.Optional[str] = None,
        requests: typing.List[GenerateRequest],
        options: typing.Optional[GenerateOptionsRequest] = None,
    ) -> GenerateResponse:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.predict}/", "v1/generate"),
            json=jsonable_encoder(
                {
                    "deployment_id": deployment_id,
                    "deployment_name": deployment_name,
                    "requests": requests,
                    "options": options,
                }
            ),
            headers=remove_none_from_headers({"X-API-KEY": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GenerateResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 400:
            raise NotFoundError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 400:
            raise InternalServerError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def search(
        self,
        *,
        index_id: typing.Optional[uuid.UUID] = None,
        index_name: typing.Optional[str] = None,
        query: str,
        options: SearchRequestOptions,
    ) -> SearchResponse:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.predict}/", "v1/search"),
            json=jsonable_encoder({"index_id": index_id, "index_name": index_name, "query": query, "options": options}),
            headers=remove_none_from_headers({"X-API-KEY": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SearchResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 400:
            raise NotFoundError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 400:
            raise InternalServerError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    @cached_property
    def completion_actuals(self) -> CompletionActualsClient:
        return CompletionActualsClient(environment=self._environment, api_key=self.api_key)

    @cached_property
    def document(self) -> DocumentClient:
        return DocumentClient(environment=self._environment, api_key=self.api_key)


class AsyncVellum:
    def __init__(self, *, environment: VellumEnvironment = VellumEnvironment.PRODUCTION, api_key: str):
        self._environment = environment
        self.api_key = api_key

    async def generate(
        self,
        *,
        deployment_id: typing.Optional[uuid.UUID] = None,
        deployment_name: typing.Optional[str] = None,
        requests: typing.List[GenerateRequest],
        options: typing.Optional[GenerateOptionsRequest] = None,
    ) -> GenerateResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.predict}/", "v1/generate"),
                json=jsonable_encoder(
                    {
                        "deployment_id": deployment_id,
                        "deployment_name": deployment_name,
                        "requests": requests,
                        "options": options,
                    }
                ),
                headers=remove_none_from_headers({"X-API-KEY": self.api_key}),
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GenerateResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 400:
            raise NotFoundError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 400:
            raise InternalServerError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def search(
        self,
        *,
        index_id: typing.Optional[uuid.UUID] = None,
        index_name: typing.Optional[str] = None,
        query: str,
        options: SearchRequestOptions,
    ) -> SearchResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.predict}/", "v1/search"),
                json=jsonable_encoder(
                    {"index_id": index_id, "index_name": index_name, "query": query, "options": options}
                ),
                headers=remove_none_from_headers({"X-API-KEY": self.api_key}),
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SearchResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 400:
            raise NotFoundError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 400:
            raise InternalServerError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    @cached_property
    def completion_actuals(self) -> AsyncCompletionActualsClient:
        return AsyncCompletionActualsClient(environment=self._environment, api_key=self.api_key)

    @cached_property
    def document(self) -> AsyncDocumentClient:
        return AsyncDocumentClient(environment=self._environment, api_key=self.api_key)
