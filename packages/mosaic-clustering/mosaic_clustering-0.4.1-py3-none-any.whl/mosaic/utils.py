# -*- coding: utf-8 -*-
"""Class with helper functions.

MIT License
Copyright (c) 2021-2022, Daniel Nagel
All rights reserved.

"""
__all__ = ['load_clusters', 'save_clusters']  # noqa: WPS410

import datetime
import getpass
import importlib
import platform
import sys

import numpy as np
from beartype import beartype

from mosaic._typing import (  # noqa: WPS436
    Object1DArray,
)


def _get_rui(submod):
    """Get the runetime user information, to store as comment."""
    # get time without microseconds
    date = datetime.datetime.now()
    date = date.isoformat(sep=' ', timespec='seconds')

    rui = {
        'user': getpass.getuser(),
        'pc': platform.node(),
        'date': date,
        'args': ' '.join(sys.argv),
        'submod': '' if submod is None else f' {submod}',
    }

    return (
        'This file was generated by mosaic{submod}:\n{args}' +
        '\n\n{date}, {user}@{pc}'
    ).format(**rui)


def savetxt(filename, array, fmt, submodule=None, header=None):
    """Save ndarray with user runtime information."""
    header_generic = _get_rui(submodule)
    if header:
        header_generic = f'{header_generic}\n\n{header}'

    np.savetxt(
        filename,
        array,
        fmt=fmt,
        header=header_generic,
    )


@beartype
def load_clusters(filename: str) -> Object1DArray:
    """Load clusters stored from cli.

    Parameters
    ----------
    filename : str
        Filename of cluster file.

    Returns
    -------
    clusters : ndarray of shape (n_clusters, )
        A list of arrays, each containing all indices (features) for each
        cluster.

    """
    comment = '#'
    with open(filename) as clusters:
        clusters_list = [
            np.array(
                cluster.split()
            ).astype(int).tolist()
            for cluster in clusters if not cluster.startswith(comment)
        ]

    # In case of clusters of same length, numpy casted it as a 2D array.
    # To ensure that the result is an numpy array of list, we need to
    # create an empty list, adding the values in the second step
    clusters: Object1DArray = np.empty(len(clusters_list), dtype=object)
    clusters[:] = clusters_list  # noqa: WPS362
    return clusters


@beartype
def save_clusters(filename: str, clusters: Object1DArray):
    """Save clusters from `mosaic.Clustering.clusters_` to txt file.

    Parameters
    ----------
    filename : str
        Filename of cluster file.
    clusters : ndarray of shape (n_clusters, )
        A list of arrays, each containing all indices (features) for each
        cluster.

    """
    clusters_string = np.array(
        [
            ' '.join([str(state) for state in cluster])
            for cluster in clusters
        ],
        dtype=str,
    )
    savetxt(
        filename,
        clusters_string,
        fmt='%s',
        submodule='clustering',
        header=(
            'In ith row are the indices listed (zero-indexed) corresponding '
            'to cluster i.'
        ),
    )


def _importOptinalRequires(module, error):
    """Import optinal module once needed."""
    try:
        lib = importlib.import_module(module)
    except ImportError:
        raise ImportError(error)
    return lib


def _importUmap():
    """Import optinal module once needed."""
    return _importOptinalRequires(
        'umap',
        (
            'Optinal depedency "umap" is not installed. Please install '
            'mosaic via:\n\tpython -m pip install mosaic-clustering[umap]',
        ),
    )
