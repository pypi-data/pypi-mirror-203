// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.Phone.Management.Deployment.h"


namespace py::cpp::Windows::Phone::Management::Deployment
{
    struct module_state
    {
        PyObject* type_EnterpriseEnrollmentStatus;
        PyObject* type_EnterpriseStatus;
        PyTypeObject* type_Enterprise;
        PyTypeObject* type_EnterpriseEnrollmentManager;
        PyTypeObject* type_EnterpriseEnrollmentResult;
        PyTypeObject* type_InstallationManager;
        PyTypeObject* type_PackageInstallResult;
    };

    static PyObject* register_EnterpriseEnrollmentStatus(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_EnterpriseEnrollmentStatus)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_EnterpriseEnrollmentStatus = type;
        Py_INCREF(state->type_EnterpriseEnrollmentStatus);


        Py_RETURN_NONE;
    }

    static PyObject* register_EnterpriseStatus(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_EnterpriseStatus)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_EnterpriseStatus = type;
        Py_INCREF(state->type_EnterpriseStatus);


        Py_RETURN_NONE;
    }

    // ----- Enterprise class --------------------
    static constexpr const char* const type_name_Enterprise = "Enterprise";

    static PyObject* _new_Enterprise(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_Enterprise);
        return nullptr;
    }

    static void _dealloc_Enterprise(py::wrapper::Windows::Phone::Management::Deployment::Enterprise* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* Enterprise_get_EnrollmentValidFrom(py::wrapper::Windows::Phone::Management::Deployment::Enterprise* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Phone.Management.Deployment.Enterprise", L"EnrollmentValidFrom"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.EnrollmentValidFrom());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Enterprise_get_EnrollmentValidTo(py::wrapper::Windows::Phone::Management::Deployment::Enterprise* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Phone.Management.Deployment.Enterprise", L"EnrollmentValidTo"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.EnrollmentValidTo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Enterprise_get_Id(py::wrapper::Windows::Phone::Management::Deployment::Enterprise* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Phone.Management.Deployment.Enterprise", L"Id"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Enterprise_get_Name(py::wrapper::Windows::Phone::Management::Deployment::Enterprise* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Phone.Management.Deployment.Enterprise", L"Name"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Enterprise_get_Status(py::wrapper::Windows::Phone::Management::Deployment::Enterprise* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Phone.Management.Deployment.Enterprise", L"Status"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Enterprise_get_WorkplaceId(py::wrapper::Windows::Phone::Management::Deployment::Enterprise* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Phone.Management.Deployment.Enterprise", L"WorkplaceId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.WorkplaceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_Enterprise(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Phone::Management::Deployment::Enterprise>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_Enterprise(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Phone::Management::Deployment::Enterprise>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Enterprise[] = {
        { "_assign_array_", _assign_array_Enterprise, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_Enterprise), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_Enterprise[] = {
        { "enrollment_valid_from", reinterpret_cast<getter>(Enterprise_get_EnrollmentValidFrom), nullptr, nullptr, nullptr },
        { "enrollment_valid_to", reinterpret_cast<getter>(Enterprise_get_EnrollmentValidTo), nullptr, nullptr, nullptr },
        { "id", reinterpret_cast<getter>(Enterprise_get_Id), nullptr, nullptr, nullptr },
        { "name", reinterpret_cast<getter>(Enterprise_get_Name), nullptr, nullptr, nullptr },
        { "status", reinterpret_cast<getter>(Enterprise_get_Status), nullptr, nullptr, nullptr },
        { "workplace_id", reinterpret_cast<getter>(Enterprise_get_WorkplaceId), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_Enterprise[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_Enterprise) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_Enterprise) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_Enterprise) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_Enterprise) },
        { },
    };

    static PyType_Spec type_spec_Enterprise =
    {
        "_winsdk_Windows_Phone_Management_Deployment.Enterprise",
        sizeof(py::wrapper::Windows::Phone::Management::Deployment::Enterprise),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Enterprise
    };

    // ----- EnterpriseEnrollmentManager class --------------------
    static constexpr const char* const type_name_EnterpriseEnrollmentManager = "EnterpriseEnrollmentManager";

    static PyObject* _new_EnterpriseEnrollmentManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_EnterpriseEnrollmentManager);
        return nullptr;
    }

    static PyObject* EnterpriseEnrollmentManager_RequestEnrollmentAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.Management.Deployment.EnterpriseEnrollmentManager", L"RequestEnrollmentAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Phone::Management::Deployment::EnterpriseEnrollmentManager::RequestEnrollmentAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* EnterpriseEnrollmentManager_RequestUnenrollmentAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.Management.Deployment.EnterpriseEnrollmentManager", L"RequestUnenrollmentAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Phone::Management::Deployment::Enterprise>(args, 0);

                return py::convert(winrt::Windows::Phone::Management::Deployment::EnterpriseEnrollmentManager::RequestUnenrollmentAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* EnterpriseEnrollmentManager_ValidateEnterprisesAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.Management.Deployment.EnterpriseEnrollmentManager", L"ValidateEnterprisesAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Phone::Management::Deployment::EnterpriseEnrollmentManager::ValidateEnterprisesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* EnterpriseEnrollmentManager_get_CurrentEnterprise(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Phone.Management.Deployment.EnterpriseEnrollmentManager", L"CurrentEnterprise"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Phone::Management::Deployment::EnterpriseEnrollmentManager::CurrentEnterprise());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EnterpriseEnrollmentManager_get_EnrolledEnterprises(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Phone.Management.Deployment.EnterpriseEnrollmentManager", L"EnrolledEnterprises"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Phone::Management::Deployment::EnterpriseEnrollmentManager::EnrolledEnterprises());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_EnterpriseEnrollmentManager[] = {
        { "request_enrollment_async", reinterpret_cast<PyCFunction>(EnterpriseEnrollmentManager_RequestEnrollmentAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "request_unenrollment_async", reinterpret_cast<PyCFunction>(EnterpriseEnrollmentManager_RequestUnenrollmentAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "validate_enterprises_async", reinterpret_cast<PyCFunction>(EnterpriseEnrollmentManager_ValidateEnterprisesAsync), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_EnterpriseEnrollmentManager[] = {
        { }
    };

    static PyType_Slot _type_slots_EnterpriseEnrollmentManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_EnterpriseEnrollmentManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_EnterpriseEnrollmentManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_EnterpriseEnrollmentManager) },
        { },
    };

    static PyType_Spec type_spec_EnterpriseEnrollmentManager =
    {
        "_winsdk_Windows_Phone_Management_Deployment.EnterpriseEnrollmentManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_EnterpriseEnrollmentManager
    };

    static PyGetSetDef getset_EnterpriseEnrollmentManager_Meta[] = {
        { "current_enterprise", reinterpret_cast<getter>(EnterpriseEnrollmentManager_get_CurrentEnterprise), nullptr, nullptr, nullptr },
        { "enrolled_enterprises", reinterpret_cast<getter>(EnterpriseEnrollmentManager_get_EnrolledEnterprises), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot type_slots_EnterpriseEnrollmentManager_Meta[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_EnterpriseEnrollmentManager_Meta) },
        { }
    };

    static PyType_Spec type_spec_EnterpriseEnrollmentManager_Meta =
    {
        "_winsdk_Windows_Phone_Management_Deployment.EnterpriseEnrollmentManager_Meta",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_EnterpriseEnrollmentManager_Meta
    };

    // ----- EnterpriseEnrollmentResult class --------------------
    static constexpr const char* const type_name_EnterpriseEnrollmentResult = "EnterpriseEnrollmentResult";

    static PyObject* _new_EnterpriseEnrollmentResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_EnterpriseEnrollmentResult);
        return nullptr;
    }

    static void _dealloc_EnterpriseEnrollmentResult(py::wrapper::Windows::Phone::Management::Deployment::EnterpriseEnrollmentResult* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* EnterpriseEnrollmentResult_get_EnrolledEnterprise(py::wrapper::Windows::Phone::Management::Deployment::EnterpriseEnrollmentResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Phone.Management.Deployment.EnterpriseEnrollmentResult", L"EnrolledEnterprise"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.EnrolledEnterprise());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EnterpriseEnrollmentResult_get_Status(py::wrapper::Windows::Phone::Management::Deployment::EnterpriseEnrollmentResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Phone.Management.Deployment.EnterpriseEnrollmentResult", L"Status"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_EnterpriseEnrollmentResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Phone::Management::Deployment::EnterpriseEnrollmentResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_EnterpriseEnrollmentResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Phone::Management::Deployment::EnterpriseEnrollmentResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_EnterpriseEnrollmentResult[] = {
        { "_assign_array_", _assign_array_EnterpriseEnrollmentResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_EnterpriseEnrollmentResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_EnterpriseEnrollmentResult[] = {
        { "enrolled_enterprise", reinterpret_cast<getter>(EnterpriseEnrollmentResult_get_EnrolledEnterprise), nullptr, nullptr, nullptr },
        { "status", reinterpret_cast<getter>(EnterpriseEnrollmentResult_get_Status), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_EnterpriseEnrollmentResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_EnterpriseEnrollmentResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_EnterpriseEnrollmentResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_EnterpriseEnrollmentResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_EnterpriseEnrollmentResult) },
        { },
    };

    static PyType_Spec type_spec_EnterpriseEnrollmentResult =
    {
        "_winsdk_Windows_Phone_Management_Deployment.EnterpriseEnrollmentResult",
        sizeof(py::wrapper::Windows::Phone::Management::Deployment::EnterpriseEnrollmentResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_EnterpriseEnrollmentResult
    };

    // ----- InstallationManager class --------------------
    static constexpr const char* const type_name_InstallationManager = "InstallationManager";

    static PyObject* _new_InstallationManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_InstallationManager);
        return nullptr;
    }

    static PyObject* InstallationManager_AddPackageAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.Management.Deployment.InstallationManager", L"AddPackageAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 1);

                return py::convert(winrt::Windows::Phone::Management::Deployment::InstallationManager::AddPackageAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 5)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.Management.Deployment.InstallationManager", L"AddPackageAsync", 5))
            {
                py::set_arg_count_version_error(5);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 4);

                return py::convert(winrt::Windows::Phone::Management::Deployment::InstallationManager::AddPackageAsync(param0, param1, param2, param3, param4));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InstallationManager_FindPackages(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.Management.Deployment.InstallationManager", L"FindPackages", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Phone::Management::Deployment::InstallationManager::FindPackages());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.Management.Deployment.InstallationManager", L"FindPackages", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Phone::Management::Deployment::InstallationManager::FindPackages(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InstallationManager_FindPackagesForCurrentPublisher(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.Management.Deployment.InstallationManager", L"FindPackagesForCurrentPublisher", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Phone::Management::Deployment::InstallationManager::FindPackagesForCurrentPublisher());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InstallationManager_GetPendingPackageInstalls(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.Management.Deployment.InstallationManager", L"GetPendingPackageInstalls", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Phone::Management::Deployment::InstallationManager::GetPendingPackageInstalls());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InstallationManager_RegisterPackageAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.Management.Deployment.InstallationManager", L"RegisterPackageAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Uri>>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Management::Deployment::DeploymentOptions>(args, 2);

                return py::convert(winrt::Windows::Phone::Management::Deployment::InstallationManager::RegisterPackageAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InstallationManager_RemovePackageAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.Management.Deployment.InstallationManager", L"RemovePackageAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Management::Deployment::RemovalOptions>(args, 1);

                return py::convert(winrt::Windows::Phone::Management::Deployment::InstallationManager::RemovePackageAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_InstallationManager[] = {
        { "add_package_async", reinterpret_cast<PyCFunction>(InstallationManager_AddPackageAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "find_packages", reinterpret_cast<PyCFunction>(InstallationManager_FindPackages), METH_VARARGS | METH_STATIC, nullptr },
        { "find_packages_for_current_publisher", reinterpret_cast<PyCFunction>(InstallationManager_FindPackagesForCurrentPublisher), METH_VARARGS | METH_STATIC, nullptr },
        { "get_pending_package_installs", reinterpret_cast<PyCFunction>(InstallationManager_GetPendingPackageInstalls), METH_VARARGS | METH_STATIC, nullptr },
        { "register_package_async", reinterpret_cast<PyCFunction>(InstallationManager_RegisterPackageAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "remove_package_async", reinterpret_cast<PyCFunction>(InstallationManager_RemovePackageAsync), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_InstallationManager[] = {
        { }
    };

    static PyType_Slot _type_slots_InstallationManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_InstallationManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_InstallationManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_InstallationManager) },
        { },
    };

    static PyType_Spec type_spec_InstallationManager =
    {
        "_winsdk_Windows_Phone_Management_Deployment.InstallationManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InstallationManager
    };

    // ----- PackageInstallResult class --------------------
    static constexpr const char* const type_name_PackageInstallResult = "PackageInstallResult";

    static PyObject* _new_PackageInstallResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_PackageInstallResult);
        return nullptr;
    }

    static void _dealloc_PackageInstallResult(py::wrapper::Windows::Phone::Management::Deployment::PackageInstallResult* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PackageInstallResult_get_InstallState(py::wrapper::Windows::Phone::Management::Deployment::PackageInstallResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Phone.Management.Deployment.PackageInstallResult", L"InstallState"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.InstallState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PackageInstallResult_get_ProductId(py::wrapper::Windows::Phone::Management::Deployment::PackageInstallResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Phone.Management.Deployment.PackageInstallResult", L"ProductId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProductId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PackageInstallResult_get_ErrorText(py::wrapper::Windows::Phone::Management::Deployment::PackageInstallResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Phone.Management.Deployment.PackageInstallResult", L"ErrorText"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ErrorText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PackageInstallResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Phone::Management::Deployment::PackageInstallResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PackageInstallResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Phone::Management::Deployment::PackageInstallResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PackageInstallResult[] = {
        { "_assign_array_", _assign_array_PackageInstallResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PackageInstallResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PackageInstallResult[] = {
        { "install_state", reinterpret_cast<getter>(PackageInstallResult_get_InstallState), nullptr, nullptr, nullptr },
        { "product_id", reinterpret_cast<getter>(PackageInstallResult_get_ProductId), nullptr, nullptr, nullptr },
        { "error_text", reinterpret_cast<getter>(PackageInstallResult_get_ErrorText), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PackageInstallResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PackageInstallResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PackageInstallResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PackageInstallResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PackageInstallResult) },
        { },
    };

    static PyType_Spec type_spec_PackageInstallResult =
    {
        "_winsdk_Windows_Phone_Management_Deployment.PackageInstallResult",
        sizeof(py::wrapper::Windows::Phone::Management::Deployment::PackageInstallResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PackageInstallResult
    };

    // ----- Windows.Phone.Management.Deployment Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Phone::Management::Deployment");

    static PyMethodDef module_methods[] = {
        {"_register_EnterpriseEnrollmentStatus", register_EnterpriseEnrollmentStatus, METH_O, "registers type"},
        {"_register_EnterpriseStatus", register_EnterpriseStatus, METH_O, "registers type"},
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_EnterpriseEnrollmentStatus);
        Py_VISIT(state->type_EnterpriseStatus);
        Py_VISIT(state->type_Enterprise);
        Py_VISIT(state->type_EnterpriseEnrollmentManager);
        Py_VISIT(state->type_EnterpriseEnrollmentResult);
        Py_VISIT(state->type_InstallationManager);
        Py_VISIT(state->type_PackageInstallResult);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_EnterpriseEnrollmentStatus);
        Py_CLEAR(state->type_EnterpriseStatus);
        Py_CLEAR(state->type_Enterprise);
        Py_CLEAR(state->type_EnterpriseEnrollmentManager);
        Py_CLEAR(state->type_EnterpriseEnrollmentResult);
        Py_CLEAR(state->type_InstallationManager);
        Py_CLEAR(state->type_PackageInstallResult);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Phone_Management_Deployment",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Phone::Management::Deployment

PyMODINIT_FUNC PyInit__winsdk_Windows_Phone_Management_Deployment(void) noexcept
{
    using namespace py::cpp::Windows::Phone::Management::Deployment;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_Enterprise = py::register_python_type(module.get(), type_name_Enterprise, &type_spec_Enterprise, bases.get(), nullptr);
    if (!state->type_Enterprise)
    {
        return nullptr;
    }

    py::pyobj_handle type_EnterpriseEnrollmentManager_Meta{PyType_FromSpec(&type_spec_EnterpriseEnrollmentManager_Meta)};
    if (!type_EnterpriseEnrollmentManager_Meta)
    {
        return nullptr;
    }

    state->type_EnterpriseEnrollmentManager = py::register_python_type(module.get(), type_name_EnterpriseEnrollmentManager, &type_spec_EnterpriseEnrollmentManager, nullptr, reinterpret_cast<PyTypeObject*>(type_EnterpriseEnrollmentManager_Meta.get()));
    if (!state->type_EnterpriseEnrollmentManager)
    {
        return nullptr;
    }

    state->type_EnterpriseEnrollmentResult = py::register_python_type(module.get(), type_name_EnterpriseEnrollmentResult, &type_spec_EnterpriseEnrollmentResult, bases.get(), nullptr);
    if (!state->type_EnterpriseEnrollmentResult)
    {
        return nullptr;
    }

    state->type_InstallationManager = py::register_python_type(module.get(), type_name_InstallationManager, &type_spec_InstallationManager, nullptr, nullptr);
    if (!state->type_InstallationManager)
    {
        return nullptr;
    }

    state->type_PackageInstallResult = py::register_python_type(module.get(), type_name_PackageInstallResult, &type_spec_PackageInstallResult, bases.get(), nullptr);
    if (!state->type_PackageInstallResult)
    {
        return nullptr;
    }


    return module.detach();
}

PyObject* py::py_type<winrt::Windows::Phone::Management::Deployment::EnterpriseEnrollmentStatus>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Phone::Management::Deployment;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Phone::Management::Deployment");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_EnterpriseEnrollmentStatus;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Phone::Management::Deployment::EnterpriseEnrollmentStatus is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::Phone::Management::Deployment::EnterpriseStatus>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Phone::Management::Deployment;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Phone::Management::Deployment");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_EnterpriseStatus;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Phone::Management::Deployment::EnterpriseStatus is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Phone::Management::Deployment::Enterprise>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Phone::Management::Deployment;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Phone::Management::Deployment");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_Enterprise;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Phone::Management::Deployment::Enterprise is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Phone::Management::Deployment::EnterpriseEnrollmentManager>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Phone::Management::Deployment;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Phone::Management::Deployment");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_EnterpriseEnrollmentManager;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Phone::Management::Deployment::EnterpriseEnrollmentManager is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Phone::Management::Deployment::EnterpriseEnrollmentResult>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Phone::Management::Deployment;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Phone::Management::Deployment");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_EnterpriseEnrollmentResult;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Phone::Management::Deployment::EnterpriseEnrollmentResult is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Phone::Management::Deployment::InstallationManager>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Phone::Management::Deployment;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Phone::Management::Deployment");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_InstallationManager;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Phone::Management::Deployment::InstallationManager is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Phone::Management::Deployment::PackageInstallResult>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Phone::Management::Deployment;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Phone::Management::Deployment");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PackageInstallResult;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Phone::Management::Deployment::PackageInstallResult is not registered");
        return nullptr;
    }

    return python_type;
}
