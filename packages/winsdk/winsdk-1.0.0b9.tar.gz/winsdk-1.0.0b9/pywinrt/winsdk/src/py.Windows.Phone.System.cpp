// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.Phone.System.h"


namespace py::cpp::Windows::Phone::System
{
    struct module_state
    {
        PyTypeObject* type_SystemProtection;
    };

    // ----- SystemProtection class --------------------
    static constexpr const char* const type_name_SystemProtection = "SystemProtection";

    static PyObject* _new_SystemProtection(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_SystemProtection);
        return nullptr;
    }

    static PyObject* SystemProtection_RequestScreenUnlock(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.System.SystemProtection", L"RequestScreenUnlock", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                winrt::Windows::Phone::System::SystemProtection::RequestScreenUnlock();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SystemProtection_get_ScreenLocked(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Phone.System.SystemProtection", L"ScreenLocked"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Phone::System::SystemProtection::ScreenLocked());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SystemProtection[] = {
        { "request_screen_unlock", reinterpret_cast<PyCFunction>(SystemProtection_RequestScreenUnlock), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SystemProtection[] = {
        { }
    };

    static PyType_Slot _type_slots_SystemProtection[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_SystemProtection) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SystemProtection) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SystemProtection) },
        { },
    };

    static PyType_Spec type_spec_SystemProtection =
    {
        "_winsdk_Windows_Phone_System.SystemProtection",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SystemProtection
    };

    static PyGetSetDef getset_SystemProtection_Meta[] = {
        { "screen_locked", reinterpret_cast<getter>(SystemProtection_get_ScreenLocked), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot type_slots_SystemProtection_Meta[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_SystemProtection_Meta) },
        { }
    };

    static PyType_Spec type_spec_SystemProtection_Meta =
    {
        "_winsdk_Windows_Phone_System.SystemProtection_Meta",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_SystemProtection_Meta
    };

    // ----- Windows.Phone.System Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Phone::System");

    static PyMethodDef module_methods[] = {
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_SystemProtection);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_SystemProtection);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Phone_System",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Phone::System

PyMODINIT_FUNC PyInit__winsdk_Windows_Phone_System(void) noexcept
{
    using namespace py::cpp::Windows::Phone::System;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    py::pyobj_handle type_SystemProtection_Meta{PyType_FromSpec(&type_spec_SystemProtection_Meta)};
    if (!type_SystemProtection_Meta)
    {
        return nullptr;
    }

    state->type_SystemProtection = py::register_python_type(module.get(), type_name_SystemProtection, &type_spec_SystemProtection, nullptr, reinterpret_cast<PyTypeObject*>(type_SystemProtection_Meta.get()));
    if (!state->type_SystemProtection)
    {
        return nullptr;
    }


    return module.detach();
}

PyTypeObject* py::winrt_type<winrt::Windows::Phone::System::SystemProtection>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Phone::System;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Phone::System");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_SystemProtection;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Phone::System::SystemProtection is not registered");
        return nullptr;
    }

    return python_type;
}
