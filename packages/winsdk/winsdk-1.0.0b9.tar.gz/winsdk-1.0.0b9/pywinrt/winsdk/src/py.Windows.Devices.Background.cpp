// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.Devices.Background.h"


namespace py::cpp::Windows::Devices::Background
{
    struct module_state
    {
        PyTypeObject* type_DeviceServicingDetails;
        PyTypeObject* type_DeviceUseDetails;
    };

    // ----- DeviceServicingDetails class --------------------
    static constexpr const char* const type_name_DeviceServicingDetails = "DeviceServicingDetails";

    static PyObject* _new_DeviceServicingDetails(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_DeviceServicingDetails);
        return nullptr;
    }

    static void _dealloc_DeviceServicingDetails(py::wrapper::Windows::Devices::Background::DeviceServicingDetails* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DeviceServicingDetails_get_Arguments(py::wrapper::Windows::Devices::Background::DeviceServicingDetails* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Background.DeviceServicingDetails", L"Arguments"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Arguments());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DeviceServicingDetails_get_DeviceId(py::wrapper::Windows::Devices::Background::DeviceServicingDetails* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Background.DeviceServicingDetails", L"DeviceId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DeviceServicingDetails_get_ExpectedDuration(py::wrapper::Windows::Devices::Background::DeviceServicingDetails* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Background.DeviceServicingDetails", L"ExpectedDuration"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ExpectedDuration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_DeviceServicingDetails(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::Background::DeviceServicingDetails>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DeviceServicingDetails(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Background::DeviceServicingDetails>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DeviceServicingDetails[] = {
        { "_assign_array_", _assign_array_DeviceServicingDetails, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DeviceServicingDetails), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_DeviceServicingDetails[] = {
        { "arguments", reinterpret_cast<getter>(DeviceServicingDetails_get_Arguments), nullptr, nullptr, nullptr },
        { "device_id", reinterpret_cast<getter>(DeviceServicingDetails_get_DeviceId), nullptr, nullptr, nullptr },
        { "expected_duration", reinterpret_cast<getter>(DeviceServicingDetails_get_ExpectedDuration), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_DeviceServicingDetails[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DeviceServicingDetails) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DeviceServicingDetails) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DeviceServicingDetails) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DeviceServicingDetails) },
        { },
    };

    static PyType_Spec type_spec_DeviceServicingDetails =
    {
        "_winsdk_Windows_Devices_Background.DeviceServicingDetails",
        sizeof(py::wrapper::Windows::Devices::Background::DeviceServicingDetails),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DeviceServicingDetails
    };

    // ----- DeviceUseDetails class --------------------
    static constexpr const char* const type_name_DeviceUseDetails = "DeviceUseDetails";

    static PyObject* _new_DeviceUseDetails(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_DeviceUseDetails);
        return nullptr;
    }

    static void _dealloc_DeviceUseDetails(py::wrapper::Windows::Devices::Background::DeviceUseDetails* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DeviceUseDetails_get_Arguments(py::wrapper::Windows::Devices::Background::DeviceUseDetails* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Background.DeviceUseDetails", L"Arguments"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Arguments());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DeviceUseDetails_get_DeviceId(py::wrapper::Windows::Devices::Background::DeviceUseDetails* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Background.DeviceUseDetails", L"DeviceId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_DeviceUseDetails(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::Background::DeviceUseDetails>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DeviceUseDetails(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Background::DeviceUseDetails>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DeviceUseDetails[] = {
        { "_assign_array_", _assign_array_DeviceUseDetails, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DeviceUseDetails), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_DeviceUseDetails[] = {
        { "arguments", reinterpret_cast<getter>(DeviceUseDetails_get_Arguments), nullptr, nullptr, nullptr },
        { "device_id", reinterpret_cast<getter>(DeviceUseDetails_get_DeviceId), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_DeviceUseDetails[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DeviceUseDetails) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DeviceUseDetails) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DeviceUseDetails) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DeviceUseDetails) },
        { },
    };

    static PyType_Spec type_spec_DeviceUseDetails =
    {
        "_winsdk_Windows_Devices_Background.DeviceUseDetails",
        sizeof(py::wrapper::Windows::Devices::Background::DeviceUseDetails),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DeviceUseDetails
    };

    // ----- Windows.Devices.Background Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Devices::Background");

    static PyMethodDef module_methods[] = {
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_DeviceServicingDetails);
        Py_VISIT(state->type_DeviceUseDetails);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_DeviceServicingDetails);
        Py_CLEAR(state->type_DeviceUseDetails);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Devices_Background",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Devices::Background

PyMODINIT_FUNC PyInit__winsdk_Windows_Devices_Background(void) noexcept
{
    using namespace py::cpp::Windows::Devices::Background;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_DeviceServicingDetails = py::register_python_type(module.get(), type_name_DeviceServicingDetails, &type_spec_DeviceServicingDetails, bases.get(), nullptr);
    if (!state->type_DeviceServicingDetails)
    {
        return nullptr;
    }

    state->type_DeviceUseDetails = py::register_python_type(module.get(), type_name_DeviceUseDetails, &type_spec_DeviceUseDetails, bases.get(), nullptr);
    if (!state->type_DeviceUseDetails)
    {
        return nullptr;
    }


    return module.detach();
}

PyTypeObject* py::winrt_type<winrt::Windows::Devices::Background::DeviceServicingDetails>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Devices::Background;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Devices::Background");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_DeviceServicingDetails;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Devices::Background::DeviceServicingDetails is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Devices::Background::DeviceUseDetails>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Devices::Background;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Devices::Background");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_DeviceUseDetails;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Devices::Background::DeviceUseDetails is not registered");
        return nullptr;
    }

    return python_type;
}
