// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.Media.DialProtocol.h"


namespace py::cpp::Windows::Media::DialProtocol
{
    struct module_state
    {
        PyObject* type_DialAppLaunchResult;
        PyObject* type_DialAppState;
        PyObject* type_DialAppStopResult;
        PyObject* type_DialDeviceDisplayStatus;
        PyTypeObject* type_DialApp;
        PyTypeObject* type_DialAppStateDetails;
        PyTypeObject* type_DialDevice;
        PyTypeObject* type_DialDevicePicker;
        PyTypeObject* type_DialDevicePickerFilter;
        PyTypeObject* type_DialDeviceSelectedEventArgs;
        PyTypeObject* type_DialDisconnectButtonClickedEventArgs;
        PyTypeObject* type_DialReceiverApp;
    };

    static PyObject* register_DialAppLaunchResult(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_DialAppLaunchResult)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_DialAppLaunchResult = type;
        Py_INCREF(state->type_DialAppLaunchResult);


        Py_RETURN_NONE;
    }

    static PyObject* register_DialAppState(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_DialAppState)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_DialAppState = type;
        Py_INCREF(state->type_DialAppState);


        Py_RETURN_NONE;
    }

    static PyObject* register_DialAppStopResult(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_DialAppStopResult)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_DialAppStopResult = type;
        Py_INCREF(state->type_DialAppStopResult);


        Py_RETURN_NONE;
    }

    static PyObject* register_DialDeviceDisplayStatus(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_DialDeviceDisplayStatus)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_DialDeviceDisplayStatus = type;
        Py_INCREF(state->type_DialDeviceDisplayStatus);


        Py_RETURN_NONE;
    }

    // ----- DialApp class --------------------
    static constexpr const char* const type_name_DialApp = "DialApp";

    static PyObject* _new_DialApp(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_DialApp);
        return nullptr;
    }

    static void _dealloc_DialApp(py::wrapper::Windows::Media::DialProtocol::DialApp* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DialApp_GetAppStateAsync(py::wrapper::Windows::Media::DialProtocol::DialApp* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.DialProtocol.DialApp", L"GetAppStateAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetAppStateAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialApp_RequestLaunchAsync(py::wrapper::Windows::Media::DialProtocol::DialApp* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.DialProtocol.DialApp", L"RequestLaunchAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.RequestLaunchAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialApp_StopAsync(py::wrapper::Windows::Media::DialProtocol::DialApp* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.DialProtocol.DialApp", L"StopAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.StopAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialApp_get_AppName(py::wrapper::Windows::Media::DialProtocol::DialApp* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.DialProtocol.DialApp", L"AppName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AppName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_DialApp(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::DialProtocol::DialApp>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DialApp(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::DialProtocol::DialApp>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DialApp[] = {
        { "get_app_state_async", reinterpret_cast<PyCFunction>(DialApp_GetAppStateAsync), METH_VARARGS, nullptr },
        { "request_launch_async", reinterpret_cast<PyCFunction>(DialApp_RequestLaunchAsync), METH_VARARGS, nullptr },
        { "stop_async", reinterpret_cast<PyCFunction>(DialApp_StopAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_DialApp, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DialApp), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_DialApp[] = {
        { "app_name", reinterpret_cast<getter>(DialApp_get_AppName), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_DialApp[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DialApp) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DialApp) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DialApp) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DialApp) },
        { },
    };

    static PyType_Spec type_spec_DialApp =
    {
        "_winsdk_Windows_Media_DialProtocol.DialApp",
        sizeof(py::wrapper::Windows::Media::DialProtocol::DialApp),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DialApp
    };

    // ----- DialAppStateDetails class --------------------
    static constexpr const char* const type_name_DialAppStateDetails = "DialAppStateDetails";

    static PyObject* _new_DialAppStateDetails(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_DialAppStateDetails);
        return nullptr;
    }

    static void _dealloc_DialAppStateDetails(py::wrapper::Windows::Media::DialProtocol::DialAppStateDetails* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DialAppStateDetails_get_FullXml(py::wrapper::Windows::Media::DialProtocol::DialAppStateDetails* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.DialProtocol.DialAppStateDetails", L"FullXml"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.FullXml());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DialAppStateDetails_get_State(py::wrapper::Windows::Media::DialProtocol::DialAppStateDetails* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.DialProtocol.DialAppStateDetails", L"State"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.State());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_DialAppStateDetails(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::DialProtocol::DialAppStateDetails>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DialAppStateDetails(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::DialProtocol::DialAppStateDetails>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DialAppStateDetails[] = {
        { "_assign_array_", _assign_array_DialAppStateDetails, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DialAppStateDetails), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_DialAppStateDetails[] = {
        { "full_xml", reinterpret_cast<getter>(DialAppStateDetails_get_FullXml), nullptr, nullptr, nullptr },
        { "state", reinterpret_cast<getter>(DialAppStateDetails_get_State), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_DialAppStateDetails[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DialAppStateDetails) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DialAppStateDetails) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DialAppStateDetails) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DialAppStateDetails) },
        { },
    };

    static PyType_Spec type_spec_DialAppStateDetails =
    {
        "_winsdk_Windows_Media_DialProtocol.DialAppStateDetails",
        sizeof(py::wrapper::Windows::Media::DialProtocol::DialAppStateDetails),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DialAppStateDetails
    };

    // ----- DialDevice class --------------------
    static constexpr const char* const type_name_DialDevice = "DialDevice";

    static PyObject* _new_DialDevice(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_DialDevice);
        return nullptr;
    }

    static void _dealloc_DialDevice(py::wrapper::Windows::Media::DialProtocol::DialDevice* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DialDevice_DeviceInfoSupportsDialAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.DialProtocol.DialDevice", L"DeviceInfoSupportsDialAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Enumeration::DeviceInformation>(args, 0);

                return py::convert(winrt::Windows::Media::DialProtocol::DialDevice::DeviceInfoSupportsDialAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialDevice_FromIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.DialProtocol.DialDevice", L"FromIdAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Media::DialProtocol::DialDevice::FromIdAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialDevice_GetDeviceSelector(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.DialProtocol.DialDevice", L"GetDeviceSelector", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Media::DialProtocol::DialDevice::GetDeviceSelector(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialDevice_GetDialApp(py::wrapper::Windows::Media::DialProtocol::DialDevice* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.DialProtocol.DialDevice", L"GetDialApp", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetDialApp(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialDevice_get_Id(py::wrapper::Windows::Media::DialProtocol::DialDevice* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.DialProtocol.DialDevice", L"Id"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DialDevice_get_FriendlyName(py::wrapper::Windows::Media::DialProtocol::DialDevice* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.DialProtocol.DialDevice", L"FriendlyName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.FriendlyName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DialDevice_get_Thumbnail(py::wrapper::Windows::Media::DialProtocol::DialDevice* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.DialProtocol.DialDevice", L"Thumbnail"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Thumbnail());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_DialDevice(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::DialProtocol::DialDevice>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DialDevice(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::DialProtocol::DialDevice>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DialDevice[] = {
        { "device_info_supports_dial_async", reinterpret_cast<PyCFunction>(DialDevice_DeviceInfoSupportsDialAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "from_id_async", reinterpret_cast<PyCFunction>(DialDevice_FromIdAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_device_selector", reinterpret_cast<PyCFunction>(DialDevice_GetDeviceSelector), METH_VARARGS | METH_STATIC, nullptr },
        { "get_dial_app", reinterpret_cast<PyCFunction>(DialDevice_GetDialApp), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_DialDevice, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DialDevice), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_DialDevice[] = {
        { "id", reinterpret_cast<getter>(DialDevice_get_Id), nullptr, nullptr, nullptr },
        { "friendly_name", reinterpret_cast<getter>(DialDevice_get_FriendlyName), nullptr, nullptr, nullptr },
        { "thumbnail", reinterpret_cast<getter>(DialDevice_get_Thumbnail), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_DialDevice[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DialDevice) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DialDevice) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DialDevice) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DialDevice) },
        { },
    };

    static PyType_Spec type_spec_DialDevice =
    {
        "_winsdk_Windows_Media_DialProtocol.DialDevice",
        sizeof(py::wrapper::Windows::Media::DialProtocol::DialDevice),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DialDevice
    };

    // ----- DialDevicePicker class --------------------
    static constexpr const char* const type_name_DialDevicePicker = "DialDevicePicker";

    static PyObject* _new_DialDevicePicker(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Media::DialProtocol::DialDevicePicker instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_DialDevicePicker(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DialDevicePicker_Hide(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.DialProtocol.DialDevicePicker", L"Hide", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Hide();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialDevicePicker_PickSingleDialDeviceAsync(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.DialProtocol.DialDevicePicker", L"PickSingleDialDeviceAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);

                return py::convert(self->obj.PickSingleDialDeviceAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.DialProtocol.DialDevicePicker", L"PickSingleDialDeviceAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Popups::Placement>(args, 1);

                return py::convert(self->obj.PickSingleDialDeviceAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialDevicePicker_SetDisplayStatus(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.DialProtocol.DialDevicePicker", L"SetDisplayStatus", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Media::DialProtocol::DialDevice>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Media::DialProtocol::DialDeviceDisplayStatus>(args, 1);

                self->obj.SetDisplayStatus(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialDevicePicker_Show(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.DialProtocol.DialDevicePicker", L"Show", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);

                self->obj.Show(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.DialProtocol.DialDevicePicker", L"Show", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Popups::Placement>(args, 1);

                self->obj.Show(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialDevicePicker_get_Appearance(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.DialProtocol.DialDevicePicker", L"Appearance"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Appearance());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DialDevicePicker_get_Filter(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.DialProtocol.DialDevicePicker", L"Filter"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Filter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DialDevicePicker_add_DialDevicePickerDismissed(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Media.DialProtocol.DialDevicePicker", L"DialDevicePickerDismissed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::DialProtocol::DialDevicePicker, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.DialDevicePickerDismissed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DialDevicePicker_remove_DialDevicePickerDismissed(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Media.DialProtocol.DialDevicePicker", L"DialDevicePickerDismissed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.DialDevicePickerDismissed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DialDevicePicker_add_DialDeviceSelected(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Media.DialProtocol.DialDevicePicker", L"DialDeviceSelected"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::DialProtocol::DialDevicePicker, winrt::Windows::Media::DialProtocol::DialDeviceSelectedEventArgs>>(arg);

            return py::convert(self->obj.DialDeviceSelected(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DialDevicePicker_remove_DialDeviceSelected(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Media.DialProtocol.DialDevicePicker", L"DialDeviceSelected"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.DialDeviceSelected(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DialDevicePicker_add_DisconnectButtonClicked(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Media.DialProtocol.DialDevicePicker", L"DisconnectButtonClicked"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::DialProtocol::DialDevicePicker, winrt::Windows::Media::DialProtocol::DialDisconnectButtonClickedEventArgs>>(arg);

            return py::convert(self->obj.DisconnectButtonClicked(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DialDevicePicker_remove_DisconnectButtonClicked(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Media.DialProtocol.DialDevicePicker", L"DisconnectButtonClicked"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.DisconnectButtonClicked(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_DialDevicePicker(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::DialProtocol::DialDevicePicker>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DialDevicePicker(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::DialProtocol::DialDevicePicker>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DialDevicePicker[] = {
        { "hide", reinterpret_cast<PyCFunction>(DialDevicePicker_Hide), METH_VARARGS, nullptr },
        { "pick_single_dial_device_async", reinterpret_cast<PyCFunction>(DialDevicePicker_PickSingleDialDeviceAsync), METH_VARARGS, nullptr },
        { "set_display_status", reinterpret_cast<PyCFunction>(DialDevicePicker_SetDisplayStatus), METH_VARARGS, nullptr },
        { "show", reinterpret_cast<PyCFunction>(DialDevicePicker_Show), METH_VARARGS, nullptr },
        { "add_dial_device_picker_dismissed", reinterpret_cast<PyCFunction>(DialDevicePicker_add_DialDevicePickerDismissed), METH_O, nullptr },
        { "remove_dial_device_picker_dismissed", reinterpret_cast<PyCFunction>(DialDevicePicker_remove_DialDevicePickerDismissed), METH_O, nullptr },
        { "add_dial_device_selected", reinterpret_cast<PyCFunction>(DialDevicePicker_add_DialDeviceSelected), METH_O, nullptr },
        { "remove_dial_device_selected", reinterpret_cast<PyCFunction>(DialDevicePicker_remove_DialDeviceSelected), METH_O, nullptr },
        { "add_disconnect_button_clicked", reinterpret_cast<PyCFunction>(DialDevicePicker_add_DisconnectButtonClicked), METH_O, nullptr },
        { "remove_disconnect_button_clicked", reinterpret_cast<PyCFunction>(DialDevicePicker_remove_DisconnectButtonClicked), METH_O, nullptr },
        { "_assign_array_", _assign_array_DialDevicePicker, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DialDevicePicker), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_DialDevicePicker[] = {
        { "appearance", reinterpret_cast<getter>(DialDevicePicker_get_Appearance), nullptr, nullptr, nullptr },
        { "filter", reinterpret_cast<getter>(DialDevicePicker_get_Filter), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_DialDevicePicker[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DialDevicePicker) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DialDevicePicker) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DialDevicePicker) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DialDevicePicker) },
        { },
    };

    static PyType_Spec type_spec_DialDevicePicker =
    {
        "_winsdk_Windows_Media_DialProtocol.DialDevicePicker",
        sizeof(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DialDevicePicker
    };

    // ----- DialDevicePickerFilter class --------------------
    static constexpr const char* const type_name_DialDevicePickerFilter = "DialDevicePickerFilter";

    static PyObject* _new_DialDevicePickerFilter(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_DialDevicePickerFilter);
        return nullptr;
    }

    static void _dealloc_DialDevicePickerFilter(py::wrapper::Windows::Media::DialProtocol::DialDevicePickerFilter* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DialDevicePickerFilter_get_SupportedAppNames(py::wrapper::Windows::Media::DialProtocol::DialDevicePickerFilter* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.DialProtocol.DialDevicePickerFilter", L"SupportedAppNames"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SupportedAppNames());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_DialDevicePickerFilter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::DialProtocol::DialDevicePickerFilter>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DialDevicePickerFilter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::DialProtocol::DialDevicePickerFilter>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DialDevicePickerFilter[] = {
        { "_assign_array_", _assign_array_DialDevicePickerFilter, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DialDevicePickerFilter), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_DialDevicePickerFilter[] = {
        { "supported_app_names", reinterpret_cast<getter>(DialDevicePickerFilter_get_SupportedAppNames), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_DialDevicePickerFilter[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DialDevicePickerFilter) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DialDevicePickerFilter) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DialDevicePickerFilter) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DialDevicePickerFilter) },
        { },
    };

    static PyType_Spec type_spec_DialDevicePickerFilter =
    {
        "_winsdk_Windows_Media_DialProtocol.DialDevicePickerFilter",
        sizeof(py::wrapper::Windows::Media::DialProtocol::DialDevicePickerFilter),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DialDevicePickerFilter
    };

    // ----- DialDeviceSelectedEventArgs class --------------------
    static constexpr const char* const type_name_DialDeviceSelectedEventArgs = "DialDeviceSelectedEventArgs";

    static PyObject* _new_DialDeviceSelectedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_DialDeviceSelectedEventArgs);
        return nullptr;
    }

    static void _dealloc_DialDeviceSelectedEventArgs(py::wrapper::Windows::Media::DialProtocol::DialDeviceSelectedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DialDeviceSelectedEventArgs_get_SelectedDialDevice(py::wrapper::Windows::Media::DialProtocol::DialDeviceSelectedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.DialProtocol.DialDeviceSelectedEventArgs", L"SelectedDialDevice"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SelectedDialDevice());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_DialDeviceSelectedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::DialProtocol::DialDeviceSelectedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DialDeviceSelectedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::DialProtocol::DialDeviceSelectedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DialDeviceSelectedEventArgs[] = {
        { "_assign_array_", _assign_array_DialDeviceSelectedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DialDeviceSelectedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_DialDeviceSelectedEventArgs[] = {
        { "selected_dial_device", reinterpret_cast<getter>(DialDeviceSelectedEventArgs_get_SelectedDialDevice), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_DialDeviceSelectedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DialDeviceSelectedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DialDeviceSelectedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DialDeviceSelectedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DialDeviceSelectedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_DialDeviceSelectedEventArgs =
    {
        "_winsdk_Windows_Media_DialProtocol.DialDeviceSelectedEventArgs",
        sizeof(py::wrapper::Windows::Media::DialProtocol::DialDeviceSelectedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DialDeviceSelectedEventArgs
    };

    // ----- DialDisconnectButtonClickedEventArgs class --------------------
    static constexpr const char* const type_name_DialDisconnectButtonClickedEventArgs = "DialDisconnectButtonClickedEventArgs";

    static PyObject* _new_DialDisconnectButtonClickedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_DialDisconnectButtonClickedEventArgs);
        return nullptr;
    }

    static void _dealloc_DialDisconnectButtonClickedEventArgs(py::wrapper::Windows::Media::DialProtocol::DialDisconnectButtonClickedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DialDisconnectButtonClickedEventArgs_get_Device(py::wrapper::Windows::Media::DialProtocol::DialDisconnectButtonClickedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.DialProtocol.DialDisconnectButtonClickedEventArgs", L"Device"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Device());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_DialDisconnectButtonClickedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::DialProtocol::DialDisconnectButtonClickedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DialDisconnectButtonClickedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::DialProtocol::DialDisconnectButtonClickedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DialDisconnectButtonClickedEventArgs[] = {
        { "_assign_array_", _assign_array_DialDisconnectButtonClickedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DialDisconnectButtonClickedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_DialDisconnectButtonClickedEventArgs[] = {
        { "device", reinterpret_cast<getter>(DialDisconnectButtonClickedEventArgs_get_Device), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_DialDisconnectButtonClickedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DialDisconnectButtonClickedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DialDisconnectButtonClickedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DialDisconnectButtonClickedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DialDisconnectButtonClickedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_DialDisconnectButtonClickedEventArgs =
    {
        "_winsdk_Windows_Media_DialProtocol.DialDisconnectButtonClickedEventArgs",
        sizeof(py::wrapper::Windows::Media::DialProtocol::DialDisconnectButtonClickedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DialDisconnectButtonClickedEventArgs
    };

    // ----- DialReceiverApp class --------------------
    static constexpr const char* const type_name_DialReceiverApp = "DialReceiverApp";

    static PyObject* _new_DialReceiverApp(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_DialReceiverApp);
        return nullptr;
    }

    static void _dealloc_DialReceiverApp(py::wrapper::Windows::Media::DialProtocol::DialReceiverApp* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DialReceiverApp_GetAdditionalDataAsync(py::wrapper::Windows::Media::DialProtocol::DialReceiverApp* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.DialProtocol.DialReceiverApp", L"GetAdditionalDataAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetAdditionalDataAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialReceiverApp_GetUniqueDeviceNameAsync(py::wrapper::Windows::Media::DialProtocol::DialReceiverApp* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.DialProtocol.DialReceiverApp", L"GetUniqueDeviceNameAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetUniqueDeviceNameAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialReceiverApp_SetAdditionalDataAsync(py::wrapper::Windows::Media::DialProtocol::DialReceiverApp* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.DialProtocol.DialReceiverApp", L"SetAdditionalDataAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::hstring>>>(args, 0);

                return py::convert(self->obj.SetAdditionalDataAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialReceiverApp_get_Current(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.DialProtocol.DialReceiverApp", L"Current"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Media::DialProtocol::DialReceiverApp::Current());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_DialReceiverApp(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::DialProtocol::DialReceiverApp>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DialReceiverApp(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::DialProtocol::DialReceiverApp>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DialReceiverApp[] = {
        { "get_additional_data_async", reinterpret_cast<PyCFunction>(DialReceiverApp_GetAdditionalDataAsync), METH_VARARGS, nullptr },
        { "get_unique_device_name_async", reinterpret_cast<PyCFunction>(DialReceiverApp_GetUniqueDeviceNameAsync), METH_VARARGS, nullptr },
        { "set_additional_data_async", reinterpret_cast<PyCFunction>(DialReceiverApp_SetAdditionalDataAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_DialReceiverApp, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DialReceiverApp), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_DialReceiverApp[] = {
        { }
    };

    static PyType_Slot _type_slots_DialReceiverApp[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DialReceiverApp) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DialReceiverApp) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DialReceiverApp) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DialReceiverApp) },
        { },
    };

    static PyType_Spec type_spec_DialReceiverApp =
    {
        "_winsdk_Windows_Media_DialProtocol.DialReceiverApp",
        sizeof(py::wrapper::Windows::Media::DialProtocol::DialReceiverApp),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DialReceiverApp
    };

    static PyGetSetDef getset_DialReceiverApp_Meta[] = {
        { "current", reinterpret_cast<getter>(DialReceiverApp_get_Current), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot type_slots_DialReceiverApp_Meta[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_DialReceiverApp_Meta) },
        { }
    };

    static PyType_Spec type_spec_DialReceiverApp_Meta =
    {
        "_winsdk_Windows_Media_DialProtocol.DialReceiverApp_Meta",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_DialReceiverApp_Meta
    };

    // ----- Windows.Media.DialProtocol Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Media::DialProtocol");

    static PyMethodDef module_methods[] = {
        {"_register_DialAppLaunchResult", register_DialAppLaunchResult, METH_O, "registers type"},
        {"_register_DialAppState", register_DialAppState, METH_O, "registers type"},
        {"_register_DialAppStopResult", register_DialAppStopResult, METH_O, "registers type"},
        {"_register_DialDeviceDisplayStatus", register_DialDeviceDisplayStatus, METH_O, "registers type"},
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_DialAppLaunchResult);
        Py_VISIT(state->type_DialAppState);
        Py_VISIT(state->type_DialAppStopResult);
        Py_VISIT(state->type_DialDeviceDisplayStatus);
        Py_VISIT(state->type_DialApp);
        Py_VISIT(state->type_DialAppStateDetails);
        Py_VISIT(state->type_DialDevice);
        Py_VISIT(state->type_DialDevicePicker);
        Py_VISIT(state->type_DialDevicePickerFilter);
        Py_VISIT(state->type_DialDeviceSelectedEventArgs);
        Py_VISIT(state->type_DialDisconnectButtonClickedEventArgs);
        Py_VISIT(state->type_DialReceiverApp);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_DialAppLaunchResult);
        Py_CLEAR(state->type_DialAppState);
        Py_CLEAR(state->type_DialAppStopResult);
        Py_CLEAR(state->type_DialDeviceDisplayStatus);
        Py_CLEAR(state->type_DialApp);
        Py_CLEAR(state->type_DialAppStateDetails);
        Py_CLEAR(state->type_DialDevice);
        Py_CLEAR(state->type_DialDevicePicker);
        Py_CLEAR(state->type_DialDevicePickerFilter);
        Py_CLEAR(state->type_DialDeviceSelectedEventArgs);
        Py_CLEAR(state->type_DialDisconnectButtonClickedEventArgs);
        Py_CLEAR(state->type_DialReceiverApp);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Media_DialProtocol",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Media::DialProtocol

PyMODINIT_FUNC PyInit__winsdk_Windows_Media_DialProtocol(void) noexcept
{
    using namespace py::cpp::Windows::Media::DialProtocol;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_DialApp = py::register_python_type(module.get(), type_name_DialApp, &type_spec_DialApp, bases.get(), nullptr);
    if (!state->type_DialApp)
    {
        return nullptr;
    }

    state->type_DialAppStateDetails = py::register_python_type(module.get(), type_name_DialAppStateDetails, &type_spec_DialAppStateDetails, bases.get(), nullptr);
    if (!state->type_DialAppStateDetails)
    {
        return nullptr;
    }

    state->type_DialDevice = py::register_python_type(module.get(), type_name_DialDevice, &type_spec_DialDevice, bases.get(), nullptr);
    if (!state->type_DialDevice)
    {
        return nullptr;
    }

    state->type_DialDevicePicker = py::register_python_type(module.get(), type_name_DialDevicePicker, &type_spec_DialDevicePicker, bases.get(), nullptr);
    if (!state->type_DialDevicePicker)
    {
        return nullptr;
    }

    state->type_DialDevicePickerFilter = py::register_python_type(module.get(), type_name_DialDevicePickerFilter, &type_spec_DialDevicePickerFilter, bases.get(), nullptr);
    if (!state->type_DialDevicePickerFilter)
    {
        return nullptr;
    }

    state->type_DialDeviceSelectedEventArgs = py::register_python_type(module.get(), type_name_DialDeviceSelectedEventArgs, &type_spec_DialDeviceSelectedEventArgs, bases.get(), nullptr);
    if (!state->type_DialDeviceSelectedEventArgs)
    {
        return nullptr;
    }

    state->type_DialDisconnectButtonClickedEventArgs = py::register_python_type(module.get(), type_name_DialDisconnectButtonClickedEventArgs, &type_spec_DialDisconnectButtonClickedEventArgs, bases.get(), nullptr);
    if (!state->type_DialDisconnectButtonClickedEventArgs)
    {
        return nullptr;
    }

    py::pyobj_handle type_DialReceiverApp_Meta{PyType_FromSpec(&type_spec_DialReceiverApp_Meta)};
    if (!type_DialReceiverApp_Meta)
    {
        return nullptr;
    }

    state->type_DialReceiverApp = py::register_python_type(module.get(), type_name_DialReceiverApp, &type_spec_DialReceiverApp, bases.get(), reinterpret_cast<PyTypeObject*>(type_DialReceiverApp_Meta.get()));
    if (!state->type_DialReceiverApp)
    {
        return nullptr;
    }


    return module.detach();
}

PyObject* py::py_type<winrt::Windows::Media::DialProtocol::DialAppLaunchResult>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Media::DialProtocol;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Media::DialProtocol");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_DialAppLaunchResult;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Media::DialProtocol::DialAppLaunchResult is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::Media::DialProtocol::DialAppState>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Media::DialProtocol;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Media::DialProtocol");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_DialAppState;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Media::DialProtocol::DialAppState is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::Media::DialProtocol::DialAppStopResult>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Media::DialProtocol;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Media::DialProtocol");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_DialAppStopResult;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Media::DialProtocol::DialAppStopResult is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::Media::DialProtocol::DialDeviceDisplayStatus>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Media::DialProtocol;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Media::DialProtocol");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_DialDeviceDisplayStatus;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Media::DialProtocol::DialDeviceDisplayStatus is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Media::DialProtocol::DialApp>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Media::DialProtocol;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Media::DialProtocol");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_DialApp;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Media::DialProtocol::DialApp is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Media::DialProtocol::DialAppStateDetails>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Media::DialProtocol;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Media::DialProtocol");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_DialAppStateDetails;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Media::DialProtocol::DialAppStateDetails is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Media::DialProtocol::DialDevice>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Media::DialProtocol;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Media::DialProtocol");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_DialDevice;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Media::DialProtocol::DialDevice is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Media::DialProtocol::DialDevicePicker>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Media::DialProtocol;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Media::DialProtocol");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_DialDevicePicker;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Media::DialProtocol::DialDevicePicker is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Media::DialProtocol::DialDevicePickerFilter>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Media::DialProtocol;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Media::DialProtocol");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_DialDevicePickerFilter;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Media::DialProtocol::DialDevicePickerFilter is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Media::DialProtocol::DialDeviceSelectedEventArgs>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Media::DialProtocol;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Media::DialProtocol");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_DialDeviceSelectedEventArgs;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Media::DialProtocol::DialDeviceSelectedEventArgs is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Media::DialProtocol::DialDisconnectButtonClickedEventArgs>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Media::DialProtocol;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Media::DialProtocol");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_DialDisconnectButtonClickedEventArgs;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Media::DialProtocol::DialDisconnectButtonClickedEventArgs is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Media::DialProtocol::DialReceiverApp>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Media::DialProtocol;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Media::DialProtocol");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_DialReceiverApp;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Media::DialProtocol::DialReceiverApp is not registered");
        return nullptr;
    }

    return python_type;
}
