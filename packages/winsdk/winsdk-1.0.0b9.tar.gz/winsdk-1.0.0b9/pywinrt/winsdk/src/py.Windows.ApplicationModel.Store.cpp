// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.ApplicationModel.Store.h"


namespace py::cpp::Windows::ApplicationModel::Store
{
    struct module_state
    {
        PyObject* type_FulfillmentResult;
        PyObject* type_ProductPurchaseStatus;
        PyObject* type_ProductType;
        PyTypeObject* type_CurrentApp;
        PyTypeObject* type_CurrentAppSimulator;
        PyTypeObject* type_LicenseInformation;
        PyTypeObject* type_ListingInformation;
        PyTypeObject* type_ProductLicense;
        PyTypeObject* type_ProductListing;
        PyTypeObject* type_ProductPurchaseDisplayProperties;
        PyTypeObject* type_PurchaseResults;
        PyTypeObject* type_UnfulfilledConsumable;
    };

    static PyObject* register_FulfillmentResult(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_FulfillmentResult)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_FulfillmentResult = type;
        Py_INCREF(state->type_FulfillmentResult);


        Py_RETURN_NONE;
    }

    static PyObject* register_ProductPurchaseStatus(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_ProductPurchaseStatus)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_ProductPurchaseStatus = type;
        Py_INCREF(state->type_ProductPurchaseStatus);


        Py_RETURN_NONE;
    }

    static PyObject* register_ProductType(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_ProductType)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_ProductType = type;
        Py_INCREF(state->type_ProductType);


        Py_RETURN_NONE;
    }

    // ----- CurrentApp class --------------------
    static constexpr const char* const type_name_CurrentApp = "CurrentApp";

    static PyObject* _new_CurrentApp(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_CurrentApp);
        return nullptr;
    }

    static PyObject* CurrentApp_GetAppPurchaseCampaignIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentApp", L"GetAppPurchaseCampaignIdAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentApp::GetAppPurchaseCampaignIdAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentApp_GetAppReceiptAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentApp", L"GetAppReceiptAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentApp::GetAppReceiptAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentApp_GetCustomerCollectionsIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentApp", L"GetCustomerCollectionsIdAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentApp::GetCustomerCollectionsIdAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentApp_GetCustomerPurchaseIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentApp", L"GetCustomerPurchaseIdAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentApp::GetCustomerPurchaseIdAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentApp_GetProductReceiptAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentApp", L"GetProductReceiptAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentApp::GetProductReceiptAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentApp_GetUnfulfilledConsumablesAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentApp", L"GetUnfulfilledConsumablesAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentApp::GetUnfulfilledConsumablesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentApp_LoadListingInformationAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentApp", L"LoadListingInformationAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentApp::LoadListingInformationAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentApp_LoadListingInformationByKeywordsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentApp", L"LoadListingInformationByKeywordsAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentApp::LoadListingInformationByKeywordsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentApp_LoadListingInformationByProductIdsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentApp", L"LoadListingInformationByProductIdsAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentApp::LoadListingInformationByProductIdsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentApp_ReportConsumableFulfillmentAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentApp", L"ReportConsumableFulfillmentAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::guid>(args, 1);

                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentApp::ReportConsumableFulfillmentAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentApp_ReportProductFulfillment(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentApp", L"ReportProductFulfillment", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::ApplicationModel::Store::CurrentApp::ReportProductFulfillment(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentApp_RequestAppPurchaseAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentApp", L"RequestAppPurchaseAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<bool>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentApp::RequestAppPurchaseAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentApp_RequestProductPurchaseAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentApp", L"RequestProductPurchaseAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentApp::RequestProductPurchaseAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentApp", L"RequestProductPurchaseAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<bool>(args, 1);

                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentApp::RequestProductPurchaseAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentApp", L"RequestProductPurchaseAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties>(args, 2);

                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentApp::RequestProductPurchaseAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentApp_get_AppId(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.CurrentApp", L"AppId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::ApplicationModel::Store::CurrentApp::AppId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrentApp_get_LicenseInformation(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.CurrentApp", L"LicenseInformation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::ApplicationModel::Store::CurrentApp::LicenseInformation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrentApp_get_LinkUri(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.CurrentApp", L"LinkUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::ApplicationModel::Store::CurrentApp::LinkUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CurrentApp[] = {
        { "get_app_purchase_campaign_id_async", reinterpret_cast<PyCFunction>(CurrentApp_GetAppPurchaseCampaignIdAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_app_receipt_async", reinterpret_cast<PyCFunction>(CurrentApp_GetAppReceiptAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_customer_collections_id_async", reinterpret_cast<PyCFunction>(CurrentApp_GetCustomerCollectionsIdAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_customer_purchase_id_async", reinterpret_cast<PyCFunction>(CurrentApp_GetCustomerPurchaseIdAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_product_receipt_async", reinterpret_cast<PyCFunction>(CurrentApp_GetProductReceiptAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_unfulfilled_consumables_async", reinterpret_cast<PyCFunction>(CurrentApp_GetUnfulfilledConsumablesAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "load_listing_information_async", reinterpret_cast<PyCFunction>(CurrentApp_LoadListingInformationAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "load_listing_information_by_keywords_async", reinterpret_cast<PyCFunction>(CurrentApp_LoadListingInformationByKeywordsAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "load_listing_information_by_product_ids_async", reinterpret_cast<PyCFunction>(CurrentApp_LoadListingInformationByProductIdsAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "report_consumable_fulfillment_async", reinterpret_cast<PyCFunction>(CurrentApp_ReportConsumableFulfillmentAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "report_product_fulfillment", reinterpret_cast<PyCFunction>(CurrentApp_ReportProductFulfillment), METH_VARARGS | METH_STATIC, nullptr },
        { "request_app_purchase_async", reinterpret_cast<PyCFunction>(CurrentApp_RequestAppPurchaseAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "request_product_purchase_async", reinterpret_cast<PyCFunction>(CurrentApp_RequestProductPurchaseAsync), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CurrentApp[] = {
        { }
    };

    static PyType_Slot _type_slots_CurrentApp[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CurrentApp) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CurrentApp) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CurrentApp) },
        { },
    };

    static PyType_Spec type_spec_CurrentApp =
    {
        "_winsdk_Windows_ApplicationModel_Store.CurrentApp",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CurrentApp
    };

    static PyGetSetDef getset_CurrentApp_Meta[] = {
        { "app_id", reinterpret_cast<getter>(CurrentApp_get_AppId), nullptr, nullptr, nullptr },
        { "license_information", reinterpret_cast<getter>(CurrentApp_get_LicenseInformation), nullptr, nullptr, nullptr },
        { "link_uri", reinterpret_cast<getter>(CurrentApp_get_LinkUri), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot type_slots_CurrentApp_Meta[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_CurrentApp_Meta) },
        { }
    };

    static PyType_Spec type_spec_CurrentApp_Meta =
    {
        "_winsdk_Windows_ApplicationModel_Store.CurrentApp_Meta",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_CurrentApp_Meta
    };

    // ----- CurrentAppSimulator class --------------------
    static constexpr const char* const type_name_CurrentAppSimulator = "CurrentAppSimulator";

    static PyObject* _new_CurrentAppSimulator(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_CurrentAppSimulator);
        return nullptr;
    }

    static PyObject* CurrentAppSimulator_GetAppPurchaseCampaignIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentAppSimulator", L"GetAppPurchaseCampaignIdAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentAppSimulator::GetAppPurchaseCampaignIdAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentAppSimulator_GetAppReceiptAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentAppSimulator", L"GetAppReceiptAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentAppSimulator::GetAppReceiptAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentAppSimulator_GetProductReceiptAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentAppSimulator", L"GetProductReceiptAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentAppSimulator::GetProductReceiptAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentAppSimulator_GetUnfulfilledConsumablesAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentAppSimulator", L"GetUnfulfilledConsumablesAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentAppSimulator::GetUnfulfilledConsumablesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentAppSimulator_LoadListingInformationAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentAppSimulator", L"LoadListingInformationAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentAppSimulator::LoadListingInformationAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentAppSimulator_LoadListingInformationByKeywordsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentAppSimulator", L"LoadListingInformationByKeywordsAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentAppSimulator::LoadListingInformationByKeywordsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentAppSimulator_LoadListingInformationByProductIdsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentAppSimulator", L"LoadListingInformationByProductIdsAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentAppSimulator::LoadListingInformationByProductIdsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentAppSimulator_ReloadSimulatorAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentAppSimulator", L"ReloadSimulatorAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::StorageFile>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentAppSimulator::ReloadSimulatorAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentAppSimulator_ReportConsumableFulfillmentAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentAppSimulator", L"ReportConsumableFulfillmentAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::guid>(args, 1);

                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentAppSimulator::ReportConsumableFulfillmentAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentAppSimulator_RequestAppPurchaseAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentAppSimulator", L"RequestAppPurchaseAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<bool>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentAppSimulator::RequestAppPurchaseAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentAppSimulator_RequestProductPurchaseAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentAppSimulator", L"RequestProductPurchaseAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentAppSimulator::RequestProductPurchaseAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentAppSimulator", L"RequestProductPurchaseAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<bool>(args, 1);

                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentAppSimulator::RequestProductPurchaseAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.CurrentAppSimulator", L"RequestProductPurchaseAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties>(args, 2);

                return py::convert(winrt::Windows::ApplicationModel::Store::CurrentAppSimulator::RequestProductPurchaseAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrentAppSimulator_get_AppId(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.CurrentAppSimulator", L"AppId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::ApplicationModel::Store::CurrentAppSimulator::AppId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrentAppSimulator_get_LicenseInformation(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.CurrentAppSimulator", L"LicenseInformation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::ApplicationModel::Store::CurrentAppSimulator::LicenseInformation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrentAppSimulator_get_LinkUri(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.CurrentAppSimulator", L"LinkUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::ApplicationModel::Store::CurrentAppSimulator::LinkUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CurrentAppSimulator[] = {
        { "get_app_purchase_campaign_id_async", reinterpret_cast<PyCFunction>(CurrentAppSimulator_GetAppPurchaseCampaignIdAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_app_receipt_async", reinterpret_cast<PyCFunction>(CurrentAppSimulator_GetAppReceiptAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_product_receipt_async", reinterpret_cast<PyCFunction>(CurrentAppSimulator_GetProductReceiptAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_unfulfilled_consumables_async", reinterpret_cast<PyCFunction>(CurrentAppSimulator_GetUnfulfilledConsumablesAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "load_listing_information_async", reinterpret_cast<PyCFunction>(CurrentAppSimulator_LoadListingInformationAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "load_listing_information_by_keywords_async", reinterpret_cast<PyCFunction>(CurrentAppSimulator_LoadListingInformationByKeywordsAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "load_listing_information_by_product_ids_async", reinterpret_cast<PyCFunction>(CurrentAppSimulator_LoadListingInformationByProductIdsAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "reload_simulator_async", reinterpret_cast<PyCFunction>(CurrentAppSimulator_ReloadSimulatorAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "report_consumable_fulfillment_async", reinterpret_cast<PyCFunction>(CurrentAppSimulator_ReportConsumableFulfillmentAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "request_app_purchase_async", reinterpret_cast<PyCFunction>(CurrentAppSimulator_RequestAppPurchaseAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "request_product_purchase_async", reinterpret_cast<PyCFunction>(CurrentAppSimulator_RequestProductPurchaseAsync), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CurrentAppSimulator[] = {
        { }
    };

    static PyType_Slot _type_slots_CurrentAppSimulator[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CurrentAppSimulator) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CurrentAppSimulator) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CurrentAppSimulator) },
        { },
    };

    static PyType_Spec type_spec_CurrentAppSimulator =
    {
        "_winsdk_Windows_ApplicationModel_Store.CurrentAppSimulator",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CurrentAppSimulator
    };

    static PyGetSetDef getset_CurrentAppSimulator_Meta[] = {
        { "app_id", reinterpret_cast<getter>(CurrentAppSimulator_get_AppId), nullptr, nullptr, nullptr },
        { "license_information", reinterpret_cast<getter>(CurrentAppSimulator_get_LicenseInformation), nullptr, nullptr, nullptr },
        { "link_uri", reinterpret_cast<getter>(CurrentAppSimulator_get_LinkUri), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot type_slots_CurrentAppSimulator_Meta[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_CurrentAppSimulator_Meta) },
        { }
    };

    static PyType_Spec type_spec_CurrentAppSimulator_Meta =
    {
        "_winsdk_Windows_ApplicationModel_Store.CurrentAppSimulator_Meta",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_CurrentAppSimulator_Meta
    };

    // ----- LicenseInformation class --------------------
    static constexpr const char* const type_name_LicenseInformation = "LicenseInformation";

    static PyObject* _new_LicenseInformation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_LicenseInformation);
        return nullptr;
    }

    static void _dealloc_LicenseInformation(py::wrapper::Windows::ApplicationModel::Store::LicenseInformation* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* LicenseInformation_get_ExpirationDate(py::wrapper::Windows::ApplicationModel::Store::LicenseInformation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.LicenseInformation", L"ExpirationDate"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ExpirationDate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LicenseInformation_get_IsActive(py::wrapper::Windows::ApplicationModel::Store::LicenseInformation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.LicenseInformation", L"IsActive"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsActive());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LicenseInformation_get_IsTrial(py::wrapper::Windows::ApplicationModel::Store::LicenseInformation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.LicenseInformation", L"IsTrial"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsTrial());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LicenseInformation_get_ProductLicenses(py::wrapper::Windows::ApplicationModel::Store::LicenseInformation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.LicenseInformation", L"ProductLicenses"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProductLicenses());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LicenseInformation_add_LicenseChanged(py::wrapper::Windows::ApplicationModel::Store::LicenseInformation* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Store.LicenseInformation", L"LicenseChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Store::LicenseChangedEventHandler>(arg);

            return py::convert(self->obj.LicenseChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LicenseInformation_remove_LicenseChanged(py::wrapper::Windows::ApplicationModel::Store::LicenseInformation* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Store.LicenseInformation", L"LicenseChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.LicenseChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_LicenseInformation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Store::LicenseInformation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_LicenseInformation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::LicenseInformation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LicenseInformation[] = {
        { "add_license_changed", reinterpret_cast<PyCFunction>(LicenseInformation_add_LicenseChanged), METH_O, nullptr },
        { "remove_license_changed", reinterpret_cast<PyCFunction>(LicenseInformation_remove_LicenseChanged), METH_O, nullptr },
        { "_assign_array_", _assign_array_LicenseInformation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_LicenseInformation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_LicenseInformation[] = {
        { "expiration_date", reinterpret_cast<getter>(LicenseInformation_get_ExpirationDate), nullptr, nullptr, nullptr },
        { "is_active", reinterpret_cast<getter>(LicenseInformation_get_IsActive), nullptr, nullptr, nullptr },
        { "is_trial", reinterpret_cast<getter>(LicenseInformation_get_IsTrial), nullptr, nullptr, nullptr },
        { "product_licenses", reinterpret_cast<getter>(LicenseInformation_get_ProductLicenses), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_LicenseInformation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_LicenseInformation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_LicenseInformation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_LicenseInformation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_LicenseInformation) },
        { },
    };

    static PyType_Spec type_spec_LicenseInformation =
    {
        "_winsdk_Windows_ApplicationModel_Store.LicenseInformation",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::LicenseInformation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LicenseInformation
    };

    // ----- ListingInformation class --------------------
    static constexpr const char* const type_name_ListingInformation = "ListingInformation";

    static PyObject* _new_ListingInformation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_ListingInformation);
        return nullptr;
    }

    static void _dealloc_ListingInformation(py::wrapper::Windows::ApplicationModel::Store::ListingInformation* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ListingInformation_get_AgeRating(py::wrapper::Windows::ApplicationModel::Store::ListingInformation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ListingInformation", L"AgeRating"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AgeRating());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ListingInformation_get_CurrentMarket(py::wrapper::Windows::ApplicationModel::Store::ListingInformation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ListingInformation", L"CurrentMarket"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CurrentMarket());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ListingInformation_get_Description(py::wrapper::Windows::ApplicationModel::Store::ListingInformation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ListingInformation", L"Description"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Description());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ListingInformation_get_FormattedPrice(py::wrapper::Windows::ApplicationModel::Store::ListingInformation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ListingInformation", L"FormattedPrice"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.FormattedPrice());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ListingInformation_get_Name(py::wrapper::Windows::ApplicationModel::Store::ListingInformation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ListingInformation", L"Name"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ListingInformation_get_ProductListings(py::wrapper::Windows::ApplicationModel::Store::ListingInformation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ListingInformation", L"ProductListings"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProductListings());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ListingInformation_get_CurrencyCode(py::wrapper::Windows::ApplicationModel::Store::ListingInformation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ListingInformation", L"CurrencyCode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CurrencyCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ListingInformation_get_FormattedBasePrice(py::wrapper::Windows::ApplicationModel::Store::ListingInformation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ListingInformation", L"FormattedBasePrice"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.FormattedBasePrice());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ListingInformation_get_IsOnSale(py::wrapper::Windows::ApplicationModel::Store::ListingInformation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ListingInformation", L"IsOnSale"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsOnSale());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ListingInformation_get_SaleEndDate(py::wrapper::Windows::ApplicationModel::Store::ListingInformation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ListingInformation", L"SaleEndDate"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SaleEndDate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ListingInformation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Store::ListingInformation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ListingInformation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::ListingInformation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ListingInformation[] = {
        { "_assign_array_", _assign_array_ListingInformation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ListingInformation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ListingInformation[] = {
        { "age_rating", reinterpret_cast<getter>(ListingInformation_get_AgeRating), nullptr, nullptr, nullptr },
        { "current_market", reinterpret_cast<getter>(ListingInformation_get_CurrentMarket), nullptr, nullptr, nullptr },
        { "description", reinterpret_cast<getter>(ListingInformation_get_Description), nullptr, nullptr, nullptr },
        { "formatted_price", reinterpret_cast<getter>(ListingInformation_get_FormattedPrice), nullptr, nullptr, nullptr },
        { "name", reinterpret_cast<getter>(ListingInformation_get_Name), nullptr, nullptr, nullptr },
        { "product_listings", reinterpret_cast<getter>(ListingInformation_get_ProductListings), nullptr, nullptr, nullptr },
        { "currency_code", reinterpret_cast<getter>(ListingInformation_get_CurrencyCode), nullptr, nullptr, nullptr },
        { "formatted_base_price", reinterpret_cast<getter>(ListingInformation_get_FormattedBasePrice), nullptr, nullptr, nullptr },
        { "is_on_sale", reinterpret_cast<getter>(ListingInformation_get_IsOnSale), nullptr, nullptr, nullptr },
        { "sale_end_date", reinterpret_cast<getter>(ListingInformation_get_SaleEndDate), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ListingInformation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ListingInformation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ListingInformation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ListingInformation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ListingInformation) },
        { },
    };

    static PyType_Spec type_spec_ListingInformation =
    {
        "_winsdk_Windows_ApplicationModel_Store.ListingInformation",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::ListingInformation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ListingInformation
    };

    // ----- ProductLicense class --------------------
    static constexpr const char* const type_name_ProductLicense = "ProductLicense";

    static PyObject* _new_ProductLicense(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_ProductLicense);
        return nullptr;
    }

    static void _dealloc_ProductLicense(py::wrapper::Windows::ApplicationModel::Store::ProductLicense* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ProductLicense_get_ExpirationDate(py::wrapper::Windows::ApplicationModel::Store::ProductLicense* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ProductLicense", L"ExpirationDate"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ExpirationDate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProductLicense_get_IsActive(py::wrapper::Windows::ApplicationModel::Store::ProductLicense* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ProductLicense", L"IsActive"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsActive());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProductLicense_get_ProductId(py::wrapper::Windows::ApplicationModel::Store::ProductLicense* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ProductLicense", L"ProductId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProductId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProductLicense_get_IsConsumable(py::wrapper::Windows::ApplicationModel::Store::ProductLicense* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ProductLicense", L"IsConsumable"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsConsumable());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ProductLicense(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Store::ProductLicense>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ProductLicense(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::ProductLicense>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ProductLicense[] = {
        { "_assign_array_", _assign_array_ProductLicense, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ProductLicense), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ProductLicense[] = {
        { "expiration_date", reinterpret_cast<getter>(ProductLicense_get_ExpirationDate), nullptr, nullptr, nullptr },
        { "is_active", reinterpret_cast<getter>(ProductLicense_get_IsActive), nullptr, nullptr, nullptr },
        { "product_id", reinterpret_cast<getter>(ProductLicense_get_ProductId), nullptr, nullptr, nullptr },
        { "is_consumable", reinterpret_cast<getter>(ProductLicense_get_IsConsumable), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ProductLicense[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ProductLicense) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ProductLicense) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ProductLicense) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ProductLicense) },
        { },
    };

    static PyType_Spec type_spec_ProductLicense =
    {
        "_winsdk_Windows_ApplicationModel_Store.ProductLicense",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::ProductLicense),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ProductLicense
    };

    // ----- ProductListing class --------------------
    static constexpr const char* const type_name_ProductListing = "ProductListing";

    static PyObject* _new_ProductListing(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_ProductListing);
        return nullptr;
    }

    static void _dealloc_ProductListing(py::wrapper::Windows::ApplicationModel::Store::ProductListing* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ProductListing_get_FormattedPrice(py::wrapper::Windows::ApplicationModel::Store::ProductListing* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ProductListing", L"FormattedPrice"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.FormattedPrice());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProductListing_get_Name(py::wrapper::Windows::ApplicationModel::Store::ProductListing* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ProductListing", L"Name"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProductListing_get_ProductId(py::wrapper::Windows::ApplicationModel::Store::ProductListing* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ProductListing", L"ProductId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProductId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProductListing_get_FormattedBasePrice(py::wrapper::Windows::ApplicationModel::Store::ProductListing* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ProductListing", L"FormattedBasePrice"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.FormattedBasePrice());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProductListing_get_IsOnSale(py::wrapper::Windows::ApplicationModel::Store::ProductListing* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ProductListing", L"IsOnSale"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsOnSale());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProductListing_get_SaleEndDate(py::wrapper::Windows::ApplicationModel::Store::ProductListing* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ProductListing", L"SaleEndDate"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SaleEndDate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProductListing_get_CurrencyCode(py::wrapper::Windows::ApplicationModel::Store::ProductListing* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ProductListing", L"CurrencyCode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CurrencyCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProductListing_get_Description(py::wrapper::Windows::ApplicationModel::Store::ProductListing* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ProductListing", L"Description"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Description());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProductListing_get_ImageUri(py::wrapper::Windows::ApplicationModel::Store::ProductListing* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ProductListing", L"ImageUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ImageUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProductListing_get_Keywords(py::wrapper::Windows::ApplicationModel::Store::ProductListing* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ProductListing", L"Keywords"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Keywords());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProductListing_get_Tag(py::wrapper::Windows::ApplicationModel::Store::ProductListing* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ProductListing", L"Tag"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Tag());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProductListing_get_ProductType(py::wrapper::Windows::ApplicationModel::Store::ProductListing* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ProductListing", L"ProductType"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProductType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ProductListing(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Store::ProductListing>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ProductListing(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::ProductListing>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ProductListing[] = {
        { "_assign_array_", _assign_array_ProductListing, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ProductListing), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ProductListing[] = {
        { "formatted_price", reinterpret_cast<getter>(ProductListing_get_FormattedPrice), nullptr, nullptr, nullptr },
        { "name", reinterpret_cast<getter>(ProductListing_get_Name), nullptr, nullptr, nullptr },
        { "product_id", reinterpret_cast<getter>(ProductListing_get_ProductId), nullptr, nullptr, nullptr },
        { "formatted_base_price", reinterpret_cast<getter>(ProductListing_get_FormattedBasePrice), nullptr, nullptr, nullptr },
        { "is_on_sale", reinterpret_cast<getter>(ProductListing_get_IsOnSale), nullptr, nullptr, nullptr },
        { "sale_end_date", reinterpret_cast<getter>(ProductListing_get_SaleEndDate), nullptr, nullptr, nullptr },
        { "currency_code", reinterpret_cast<getter>(ProductListing_get_CurrencyCode), nullptr, nullptr, nullptr },
        { "description", reinterpret_cast<getter>(ProductListing_get_Description), nullptr, nullptr, nullptr },
        { "image_uri", reinterpret_cast<getter>(ProductListing_get_ImageUri), nullptr, nullptr, nullptr },
        { "keywords", reinterpret_cast<getter>(ProductListing_get_Keywords), nullptr, nullptr, nullptr },
        { "tag", reinterpret_cast<getter>(ProductListing_get_Tag), nullptr, nullptr, nullptr },
        { "product_type", reinterpret_cast<getter>(ProductListing_get_ProductType), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ProductListing[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ProductListing) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ProductListing) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ProductListing) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ProductListing) },
        { },
    };

    static PyType_Spec type_spec_ProductListing =
    {
        "_winsdk_Windows_ApplicationModel_Store.ProductListing",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::ProductListing),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ProductListing
    };

    // ----- ProductPurchaseDisplayProperties class --------------------
    static constexpr const char* const type_name_ProductPurchaseDisplayProperties = "ProductPurchaseDisplayProperties";

    static PyObject* _new_ProductPurchaseDisplayProperties(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_ProductPurchaseDisplayProperties(py::wrapper::Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ProductPurchaseDisplayProperties_get_Name(py::wrapper::Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties", L"Name"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProductPurchaseDisplayProperties_put_Name(py::wrapper::Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties", L"Name"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Name(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ProductPurchaseDisplayProperties_get_Image(py::wrapper::Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties", L"Image"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Image());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProductPurchaseDisplayProperties_put_Image(py::wrapper::Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties", L"Image"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.Image(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ProductPurchaseDisplayProperties_get_Description(py::wrapper::Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties", L"Description"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Description());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProductPurchaseDisplayProperties_put_Description(py::wrapper::Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties", L"Description"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Description(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_ProductPurchaseDisplayProperties(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ProductPurchaseDisplayProperties(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ProductPurchaseDisplayProperties[] = {
        { "_assign_array_", _assign_array_ProductPurchaseDisplayProperties, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ProductPurchaseDisplayProperties), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ProductPurchaseDisplayProperties[] = {
        { "name", reinterpret_cast<getter>(ProductPurchaseDisplayProperties_get_Name), reinterpret_cast<setter>(ProductPurchaseDisplayProperties_put_Name), nullptr, nullptr },
        { "image", reinterpret_cast<getter>(ProductPurchaseDisplayProperties_get_Image), reinterpret_cast<setter>(ProductPurchaseDisplayProperties_put_Image), nullptr, nullptr },
        { "description", reinterpret_cast<getter>(ProductPurchaseDisplayProperties_get_Description), reinterpret_cast<setter>(ProductPurchaseDisplayProperties_put_Description), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ProductPurchaseDisplayProperties[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ProductPurchaseDisplayProperties) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ProductPurchaseDisplayProperties) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ProductPurchaseDisplayProperties) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ProductPurchaseDisplayProperties) },
        { },
    };

    static PyType_Spec type_spec_ProductPurchaseDisplayProperties =
    {
        "_winsdk_Windows_ApplicationModel_Store.ProductPurchaseDisplayProperties",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ProductPurchaseDisplayProperties
    };

    // ----- PurchaseResults class --------------------
    static constexpr const char* const type_name_PurchaseResults = "PurchaseResults";

    static PyObject* _new_PurchaseResults(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_PurchaseResults);
        return nullptr;
    }

    static void _dealloc_PurchaseResults(py::wrapper::Windows::ApplicationModel::Store::PurchaseResults* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PurchaseResults_get_OfferId(py::wrapper::Windows::ApplicationModel::Store::PurchaseResults* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.PurchaseResults", L"OfferId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.OfferId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PurchaseResults_get_ReceiptXml(py::wrapper::Windows::ApplicationModel::Store::PurchaseResults* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.PurchaseResults", L"ReceiptXml"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ReceiptXml());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PurchaseResults_get_Status(py::wrapper::Windows::ApplicationModel::Store::PurchaseResults* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.PurchaseResults", L"Status"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PurchaseResults_get_TransactionId(py::wrapper::Windows::ApplicationModel::Store::PurchaseResults* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.PurchaseResults", L"TransactionId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TransactionId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PurchaseResults(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Store::PurchaseResults>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PurchaseResults(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::PurchaseResults>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PurchaseResults[] = {
        { "_assign_array_", _assign_array_PurchaseResults, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PurchaseResults), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PurchaseResults[] = {
        { "offer_id", reinterpret_cast<getter>(PurchaseResults_get_OfferId), nullptr, nullptr, nullptr },
        { "receipt_xml", reinterpret_cast<getter>(PurchaseResults_get_ReceiptXml), nullptr, nullptr, nullptr },
        { "status", reinterpret_cast<getter>(PurchaseResults_get_Status), nullptr, nullptr, nullptr },
        { "transaction_id", reinterpret_cast<getter>(PurchaseResults_get_TransactionId), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PurchaseResults[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PurchaseResults) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PurchaseResults) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PurchaseResults) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PurchaseResults) },
        { },
    };

    static PyType_Spec type_spec_PurchaseResults =
    {
        "_winsdk_Windows_ApplicationModel_Store.PurchaseResults",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::PurchaseResults),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PurchaseResults
    };

    // ----- UnfulfilledConsumable class --------------------
    static constexpr const char* const type_name_UnfulfilledConsumable = "UnfulfilledConsumable";

    static PyObject* _new_UnfulfilledConsumable(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_UnfulfilledConsumable);
        return nullptr;
    }

    static void _dealloc_UnfulfilledConsumable(py::wrapper::Windows::ApplicationModel::Store::UnfulfilledConsumable* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* UnfulfilledConsumable_get_OfferId(py::wrapper::Windows::ApplicationModel::Store::UnfulfilledConsumable* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.UnfulfilledConsumable", L"OfferId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.OfferId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UnfulfilledConsumable_get_ProductId(py::wrapper::Windows::ApplicationModel::Store::UnfulfilledConsumable* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.UnfulfilledConsumable", L"ProductId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProductId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UnfulfilledConsumable_get_TransactionId(py::wrapper::Windows::ApplicationModel::Store::UnfulfilledConsumable* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.UnfulfilledConsumable", L"TransactionId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TransactionId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_UnfulfilledConsumable(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Store::UnfulfilledConsumable>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_UnfulfilledConsumable(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::UnfulfilledConsumable>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UnfulfilledConsumable[] = {
        { "_assign_array_", _assign_array_UnfulfilledConsumable, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_UnfulfilledConsumable), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UnfulfilledConsumable[] = {
        { "offer_id", reinterpret_cast<getter>(UnfulfilledConsumable_get_OfferId), nullptr, nullptr, nullptr },
        { "product_id", reinterpret_cast<getter>(UnfulfilledConsumable_get_ProductId), nullptr, nullptr, nullptr },
        { "transaction_id", reinterpret_cast<getter>(UnfulfilledConsumable_get_TransactionId), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_UnfulfilledConsumable[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UnfulfilledConsumable) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_UnfulfilledConsumable) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UnfulfilledConsumable) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UnfulfilledConsumable) },
        { },
    };

    static PyType_Spec type_spec_UnfulfilledConsumable =
    {
        "_winsdk_Windows_ApplicationModel_Store.UnfulfilledConsumable",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::UnfulfilledConsumable),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UnfulfilledConsumable
    };

    // ----- Windows.ApplicationModel.Store Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::ApplicationModel::Store");

    static PyMethodDef module_methods[] = {
        {"_register_FulfillmentResult", register_FulfillmentResult, METH_O, "registers type"},
        {"_register_ProductPurchaseStatus", register_ProductPurchaseStatus, METH_O, "registers type"},
        {"_register_ProductType", register_ProductType, METH_O, "registers type"},
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_FulfillmentResult);
        Py_VISIT(state->type_ProductPurchaseStatus);
        Py_VISIT(state->type_ProductType);
        Py_VISIT(state->type_CurrentApp);
        Py_VISIT(state->type_CurrentAppSimulator);
        Py_VISIT(state->type_LicenseInformation);
        Py_VISIT(state->type_ListingInformation);
        Py_VISIT(state->type_ProductLicense);
        Py_VISIT(state->type_ProductListing);
        Py_VISIT(state->type_ProductPurchaseDisplayProperties);
        Py_VISIT(state->type_PurchaseResults);
        Py_VISIT(state->type_UnfulfilledConsumable);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_FulfillmentResult);
        Py_CLEAR(state->type_ProductPurchaseStatus);
        Py_CLEAR(state->type_ProductType);
        Py_CLEAR(state->type_CurrentApp);
        Py_CLEAR(state->type_CurrentAppSimulator);
        Py_CLEAR(state->type_LicenseInformation);
        Py_CLEAR(state->type_ListingInformation);
        Py_CLEAR(state->type_ProductLicense);
        Py_CLEAR(state->type_ProductListing);
        Py_CLEAR(state->type_ProductPurchaseDisplayProperties);
        Py_CLEAR(state->type_PurchaseResults);
        Py_CLEAR(state->type_UnfulfilledConsumable);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_ApplicationModel_Store",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::ApplicationModel::Store

PyMODINIT_FUNC PyInit__winsdk_Windows_ApplicationModel_Store(void) noexcept
{
    using namespace py::cpp::Windows::ApplicationModel::Store;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    py::pyobj_handle type_CurrentApp_Meta{PyType_FromSpec(&type_spec_CurrentApp_Meta)};
    if (!type_CurrentApp_Meta)
    {
        return nullptr;
    }

    state->type_CurrentApp = py::register_python_type(module.get(), type_name_CurrentApp, &type_spec_CurrentApp, nullptr, reinterpret_cast<PyTypeObject*>(type_CurrentApp_Meta.get()));
    if (!state->type_CurrentApp)
    {
        return nullptr;
    }

    py::pyobj_handle type_CurrentAppSimulator_Meta{PyType_FromSpec(&type_spec_CurrentAppSimulator_Meta)};
    if (!type_CurrentAppSimulator_Meta)
    {
        return nullptr;
    }

    state->type_CurrentAppSimulator = py::register_python_type(module.get(), type_name_CurrentAppSimulator, &type_spec_CurrentAppSimulator, nullptr, reinterpret_cast<PyTypeObject*>(type_CurrentAppSimulator_Meta.get()));
    if (!state->type_CurrentAppSimulator)
    {
        return nullptr;
    }

    state->type_LicenseInformation = py::register_python_type(module.get(), type_name_LicenseInformation, &type_spec_LicenseInformation, bases.get(), nullptr);
    if (!state->type_LicenseInformation)
    {
        return nullptr;
    }

    state->type_ListingInformation = py::register_python_type(module.get(), type_name_ListingInformation, &type_spec_ListingInformation, bases.get(), nullptr);
    if (!state->type_ListingInformation)
    {
        return nullptr;
    }

    state->type_ProductLicense = py::register_python_type(module.get(), type_name_ProductLicense, &type_spec_ProductLicense, bases.get(), nullptr);
    if (!state->type_ProductLicense)
    {
        return nullptr;
    }

    state->type_ProductListing = py::register_python_type(module.get(), type_name_ProductListing, &type_spec_ProductListing, bases.get(), nullptr);
    if (!state->type_ProductListing)
    {
        return nullptr;
    }

    state->type_ProductPurchaseDisplayProperties = py::register_python_type(module.get(), type_name_ProductPurchaseDisplayProperties, &type_spec_ProductPurchaseDisplayProperties, bases.get(), nullptr);
    if (!state->type_ProductPurchaseDisplayProperties)
    {
        return nullptr;
    }

    state->type_PurchaseResults = py::register_python_type(module.get(), type_name_PurchaseResults, &type_spec_PurchaseResults, bases.get(), nullptr);
    if (!state->type_PurchaseResults)
    {
        return nullptr;
    }

    state->type_UnfulfilledConsumable = py::register_python_type(module.get(), type_name_UnfulfilledConsumable, &type_spec_UnfulfilledConsumable, bases.get(), nullptr);
    if (!state->type_UnfulfilledConsumable)
    {
        return nullptr;
    }


    return module.detach();
}

PyObject* py::py_type<winrt::Windows::ApplicationModel::Store::FulfillmentResult>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_FulfillmentResult;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::FulfillmentResult is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::ApplicationModel::Store::ProductPurchaseStatus>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_ProductPurchaseStatus;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::ProductPurchaseStatus is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::ApplicationModel::Store::ProductType>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_ProductType;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::ProductType is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::CurrentApp>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_CurrentApp;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::CurrentApp is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::CurrentAppSimulator>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_CurrentAppSimulator;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::CurrentAppSimulator is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::LicenseInformation>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_LicenseInformation;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::LicenseInformation is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::ListingInformation>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_ListingInformation;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::ListingInformation is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::ProductLicense>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_ProductLicense;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::ProductLicense is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::ProductListing>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_ProductListing;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::ProductListing is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_ProductPurchaseDisplayProperties;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::PurchaseResults>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PurchaseResults;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::PurchaseResults is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::UnfulfilledConsumable>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_UnfulfilledConsumable;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::UnfulfilledConsumable is not registered");
        return nullptr;
    }

    return python_type;
}
