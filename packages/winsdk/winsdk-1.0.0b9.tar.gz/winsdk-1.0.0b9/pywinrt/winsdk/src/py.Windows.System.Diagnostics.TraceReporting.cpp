// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.System.Diagnostics.TraceReporting.h"


namespace py::cpp::Windows::System::Diagnostics::TraceReporting
{
    struct module_state
    {
        PyObject* type_PlatformDiagnosticActionState;
        PyObject* type_PlatformDiagnosticEscalationType;
        PyObject* type_PlatformDiagnosticEventBufferLatencies;
        PyObject* type_PlatformDiagnosticTracePriority;
        PyObject* type_PlatformDiagnosticTraceSlotState;
        PyObject* type_PlatformDiagnosticTraceSlotType;
        PyTypeObject* type_PlatformDiagnosticActions;
        PyTypeObject* type_PlatformDiagnosticTraceInfo;
        PyTypeObject* type_PlatformDiagnosticTraceRuntimeInfo;
    };

    static PyObject* register_PlatformDiagnosticActionState(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_PlatformDiagnosticActionState)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_PlatformDiagnosticActionState = type;
        Py_INCREF(state->type_PlatformDiagnosticActionState);


        Py_RETURN_NONE;
    }

    static PyObject* register_PlatformDiagnosticEscalationType(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_PlatformDiagnosticEscalationType)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_PlatformDiagnosticEscalationType = type;
        Py_INCREF(state->type_PlatformDiagnosticEscalationType);


        Py_RETURN_NONE;
    }

    static PyObject* register_PlatformDiagnosticEventBufferLatencies(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_PlatformDiagnosticEventBufferLatencies)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_PlatformDiagnosticEventBufferLatencies = type;
        Py_INCREF(state->type_PlatformDiagnosticEventBufferLatencies);


        Py_RETURN_NONE;
    }

    static PyObject* register_PlatformDiagnosticTracePriority(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_PlatformDiagnosticTracePriority)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_PlatformDiagnosticTracePriority = type;
        Py_INCREF(state->type_PlatformDiagnosticTracePriority);


        Py_RETURN_NONE;
    }

    static PyObject* register_PlatformDiagnosticTraceSlotState(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_PlatformDiagnosticTraceSlotState)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_PlatformDiagnosticTraceSlotState = type;
        Py_INCREF(state->type_PlatformDiagnosticTraceSlotState);


        Py_RETURN_NONE;
    }

    static PyObject* register_PlatformDiagnosticTraceSlotType(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_PlatformDiagnosticTraceSlotType)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_PlatformDiagnosticTraceSlotType = type;
        Py_INCREF(state->type_PlatformDiagnosticTraceSlotType);


        Py_RETURN_NONE;
    }

    // ----- PlatformDiagnosticActions class --------------------
    static constexpr const char* const type_name_PlatformDiagnosticActions = "PlatformDiagnosticActions";

    static PyObject* _new_PlatformDiagnosticActions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_PlatformDiagnosticActions);
        return nullptr;
    }

    static PyObject* PlatformDiagnosticActions_DownloadLatestSettingsForNamespace(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 5)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActions", L"DownloadLatestSettingsForNamespace", 5))
            {
                py::set_arg_count_version_error(5);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<bool>(args, 2);
                auto param3 = py::convert_to<bool>(args, 3);
                auto param4 = py::convert_to<bool>(args, 4);

                return py::convert(winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticActions::DownloadLatestSettingsForNamespace(param0, param1, param2, param3, param4));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PlatformDiagnosticActions_ForceUpload(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActions", L"ForceUpload", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticEventBufferLatencies>(args, 0);
                auto param1 = py::convert_to<bool>(args, 1);
                auto param2 = py::convert_to<bool>(args, 2);

                return py::convert(winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticActions::ForceUpload(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PlatformDiagnosticActions_GetActiveScenarioList(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActions", L"GetActiveScenarioList", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticActions::GetActiveScenarioList());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PlatformDiagnosticActions_GetActiveTraceRuntime(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActions", L"GetActiveTraceRuntime", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceSlotType>(args, 0);

                return py::convert(winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticActions::GetActiveTraceRuntime(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PlatformDiagnosticActions_GetKnownTraceList(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActions", L"GetKnownTraceList", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceSlotType>(args, 0);

                return py::convert(winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticActions::GetKnownTraceList(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PlatformDiagnosticActions_IsScenarioEnabled(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActions", L"IsScenarioEnabled", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::guid>(args, 0);

                return py::convert(winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticActions::IsScenarioEnabled(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PlatformDiagnosticActions_IsTraceRunning(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActions", L"IsTraceRunning", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceSlotType>(args, 0);
                auto param1 = py::convert_to<winrt::guid>(args, 1);
                auto param2 = py::convert_to<uint64_t>(args, 2);

                return py::convert(winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticActions::IsTraceRunning(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PlatformDiagnosticActions_TryEscalateScenario(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 6)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActions", L"TryEscalateScenario", 6))
            {
                py::set_arg_count_version_error(6);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::guid>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticEscalationType>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<bool>(args, 3);
                auto param4 = py::convert_to<bool>(args, 4);
                auto param5 = py::convert_to<winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring>>(args, 5);

                return py::convert(winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticActions::TryEscalateScenario(param0, param1, param2, param3, param4, param5));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_PlatformDiagnosticActions[] = {
        { "download_latest_settings_for_namespace", reinterpret_cast<PyCFunction>(PlatformDiagnosticActions_DownloadLatestSettingsForNamespace), METH_VARARGS | METH_STATIC, nullptr },
        { "force_upload", reinterpret_cast<PyCFunction>(PlatformDiagnosticActions_ForceUpload), METH_VARARGS | METH_STATIC, nullptr },
        { "get_active_scenario_list", reinterpret_cast<PyCFunction>(PlatformDiagnosticActions_GetActiveScenarioList), METH_VARARGS | METH_STATIC, nullptr },
        { "get_active_trace_runtime", reinterpret_cast<PyCFunction>(PlatformDiagnosticActions_GetActiveTraceRuntime), METH_VARARGS | METH_STATIC, nullptr },
        { "get_known_trace_list", reinterpret_cast<PyCFunction>(PlatformDiagnosticActions_GetKnownTraceList), METH_VARARGS | METH_STATIC, nullptr },
        { "is_scenario_enabled", reinterpret_cast<PyCFunction>(PlatformDiagnosticActions_IsScenarioEnabled), METH_VARARGS | METH_STATIC, nullptr },
        { "is_trace_running", reinterpret_cast<PyCFunction>(PlatformDiagnosticActions_IsTraceRunning), METH_VARARGS | METH_STATIC, nullptr },
        { "try_escalate_scenario", reinterpret_cast<PyCFunction>(PlatformDiagnosticActions_TryEscalateScenario), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PlatformDiagnosticActions[] = {
        { }
    };

    static PyType_Slot _type_slots_PlatformDiagnosticActions[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PlatformDiagnosticActions) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PlatformDiagnosticActions) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PlatformDiagnosticActions) },
        { },
    };

    static PyType_Spec type_spec_PlatformDiagnosticActions =
    {
        "_winsdk_Windows_System_Diagnostics_TraceReporting.PlatformDiagnosticActions",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PlatformDiagnosticActions
    };

    // ----- PlatformDiagnosticTraceInfo class --------------------
    static constexpr const char* const type_name_PlatformDiagnosticTraceInfo = "PlatformDiagnosticTraceInfo";

    static PyObject* _new_PlatformDiagnosticTraceInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_PlatformDiagnosticTraceInfo);
        return nullptr;
    }

    static void _dealloc_PlatformDiagnosticTraceInfo(py::wrapper::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceInfo* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PlatformDiagnosticTraceInfo_get_IsAutoLogger(py::wrapper::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceInfo", L"IsAutoLogger"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsAutoLogger());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PlatformDiagnosticTraceInfo_get_IsExclusive(py::wrapper::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceInfo", L"IsExclusive"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsExclusive());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PlatformDiagnosticTraceInfo_get_MaxTraceDurationFileTime(py::wrapper::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceInfo", L"MaxTraceDurationFileTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MaxTraceDurationFileTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PlatformDiagnosticTraceInfo_get_Priority(py::wrapper::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceInfo", L"Priority"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Priority());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PlatformDiagnosticTraceInfo_get_ProfileHash(py::wrapper::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceInfo", L"ProfileHash"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProfileHash());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PlatformDiagnosticTraceInfo_get_ScenarioId(py::wrapper::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceInfo", L"ScenarioId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ScenarioId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PlatformDiagnosticTraceInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceInfo>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PlatformDiagnosticTraceInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PlatformDiagnosticTraceInfo[] = {
        { "_assign_array_", _assign_array_PlatformDiagnosticTraceInfo, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PlatformDiagnosticTraceInfo), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PlatformDiagnosticTraceInfo[] = {
        { "is_auto_logger", reinterpret_cast<getter>(PlatformDiagnosticTraceInfo_get_IsAutoLogger), nullptr, nullptr, nullptr },
        { "is_exclusive", reinterpret_cast<getter>(PlatformDiagnosticTraceInfo_get_IsExclusive), nullptr, nullptr, nullptr },
        { "max_trace_duration_file_time", reinterpret_cast<getter>(PlatformDiagnosticTraceInfo_get_MaxTraceDurationFileTime), nullptr, nullptr, nullptr },
        { "priority", reinterpret_cast<getter>(PlatformDiagnosticTraceInfo_get_Priority), nullptr, nullptr, nullptr },
        { "profile_hash", reinterpret_cast<getter>(PlatformDiagnosticTraceInfo_get_ProfileHash), nullptr, nullptr, nullptr },
        { "scenario_id", reinterpret_cast<getter>(PlatformDiagnosticTraceInfo_get_ScenarioId), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PlatformDiagnosticTraceInfo[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PlatformDiagnosticTraceInfo) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PlatformDiagnosticTraceInfo) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PlatformDiagnosticTraceInfo) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PlatformDiagnosticTraceInfo) },
        { },
    };

    static PyType_Spec type_spec_PlatformDiagnosticTraceInfo =
    {
        "_winsdk_Windows_System_Diagnostics_TraceReporting.PlatformDiagnosticTraceInfo",
        sizeof(py::wrapper::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PlatformDiagnosticTraceInfo
    };

    // ----- PlatformDiagnosticTraceRuntimeInfo class --------------------
    static constexpr const char* const type_name_PlatformDiagnosticTraceRuntimeInfo = "PlatformDiagnosticTraceRuntimeInfo";

    static PyObject* _new_PlatformDiagnosticTraceRuntimeInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_PlatformDiagnosticTraceRuntimeInfo);
        return nullptr;
    }

    static void _dealloc_PlatformDiagnosticTraceRuntimeInfo(py::wrapper::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceRuntimeInfo* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PlatformDiagnosticTraceRuntimeInfo_get_EtwRuntimeFileTime(py::wrapper::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceRuntimeInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceRuntimeInfo", L"EtwRuntimeFileTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.EtwRuntimeFileTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PlatformDiagnosticTraceRuntimeInfo_get_RuntimeFileTime(py::wrapper::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceRuntimeInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceRuntimeInfo", L"RuntimeFileTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RuntimeFileTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PlatformDiagnosticTraceRuntimeInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceRuntimeInfo>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PlatformDiagnosticTraceRuntimeInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceRuntimeInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PlatformDiagnosticTraceRuntimeInfo[] = {
        { "_assign_array_", _assign_array_PlatformDiagnosticTraceRuntimeInfo, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PlatformDiagnosticTraceRuntimeInfo), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PlatformDiagnosticTraceRuntimeInfo[] = {
        { "etw_runtime_file_time", reinterpret_cast<getter>(PlatformDiagnosticTraceRuntimeInfo_get_EtwRuntimeFileTime), nullptr, nullptr, nullptr },
        { "runtime_file_time", reinterpret_cast<getter>(PlatformDiagnosticTraceRuntimeInfo_get_RuntimeFileTime), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PlatformDiagnosticTraceRuntimeInfo[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PlatformDiagnosticTraceRuntimeInfo) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PlatformDiagnosticTraceRuntimeInfo) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PlatformDiagnosticTraceRuntimeInfo) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PlatformDiagnosticTraceRuntimeInfo) },
        { },
    };

    static PyType_Spec type_spec_PlatformDiagnosticTraceRuntimeInfo =
    {
        "_winsdk_Windows_System_Diagnostics_TraceReporting.PlatformDiagnosticTraceRuntimeInfo",
        sizeof(py::wrapper::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceRuntimeInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PlatformDiagnosticTraceRuntimeInfo
    };

    // ----- Windows.System.Diagnostics.TraceReporting Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::System::Diagnostics::TraceReporting");

    static PyMethodDef module_methods[] = {
        {"_register_PlatformDiagnosticActionState", register_PlatformDiagnosticActionState, METH_O, "registers type"},
        {"_register_PlatformDiagnosticEscalationType", register_PlatformDiagnosticEscalationType, METH_O, "registers type"},
        {"_register_PlatformDiagnosticEventBufferLatencies", register_PlatformDiagnosticEventBufferLatencies, METH_O, "registers type"},
        {"_register_PlatformDiagnosticTracePriority", register_PlatformDiagnosticTracePriority, METH_O, "registers type"},
        {"_register_PlatformDiagnosticTraceSlotState", register_PlatformDiagnosticTraceSlotState, METH_O, "registers type"},
        {"_register_PlatformDiagnosticTraceSlotType", register_PlatformDiagnosticTraceSlotType, METH_O, "registers type"},
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_PlatformDiagnosticActionState);
        Py_VISIT(state->type_PlatformDiagnosticEscalationType);
        Py_VISIT(state->type_PlatformDiagnosticEventBufferLatencies);
        Py_VISIT(state->type_PlatformDiagnosticTracePriority);
        Py_VISIT(state->type_PlatformDiagnosticTraceSlotState);
        Py_VISIT(state->type_PlatformDiagnosticTraceSlotType);
        Py_VISIT(state->type_PlatformDiagnosticActions);
        Py_VISIT(state->type_PlatformDiagnosticTraceInfo);
        Py_VISIT(state->type_PlatformDiagnosticTraceRuntimeInfo);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_PlatformDiagnosticActionState);
        Py_CLEAR(state->type_PlatformDiagnosticEscalationType);
        Py_CLEAR(state->type_PlatformDiagnosticEventBufferLatencies);
        Py_CLEAR(state->type_PlatformDiagnosticTracePriority);
        Py_CLEAR(state->type_PlatformDiagnosticTraceSlotState);
        Py_CLEAR(state->type_PlatformDiagnosticTraceSlotType);
        Py_CLEAR(state->type_PlatformDiagnosticActions);
        Py_CLEAR(state->type_PlatformDiagnosticTraceInfo);
        Py_CLEAR(state->type_PlatformDiagnosticTraceRuntimeInfo);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_System_Diagnostics_TraceReporting",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::System::Diagnostics::TraceReporting

PyMODINIT_FUNC PyInit__winsdk_Windows_System_Diagnostics_TraceReporting(void) noexcept
{
    using namespace py::cpp::Windows::System::Diagnostics::TraceReporting;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_PlatformDiagnosticActions = py::register_python_type(module.get(), type_name_PlatformDiagnosticActions, &type_spec_PlatformDiagnosticActions, nullptr, nullptr);
    if (!state->type_PlatformDiagnosticActions)
    {
        return nullptr;
    }

    state->type_PlatformDiagnosticTraceInfo = py::register_python_type(module.get(), type_name_PlatformDiagnosticTraceInfo, &type_spec_PlatformDiagnosticTraceInfo, bases.get(), nullptr);
    if (!state->type_PlatformDiagnosticTraceInfo)
    {
        return nullptr;
    }

    state->type_PlatformDiagnosticTraceRuntimeInfo = py::register_python_type(module.get(), type_name_PlatformDiagnosticTraceRuntimeInfo, &type_spec_PlatformDiagnosticTraceRuntimeInfo, bases.get(), nullptr);
    if (!state->type_PlatformDiagnosticTraceRuntimeInfo)
    {
        return nullptr;
    }


    return module.detach();
}

PyObject* py::py_type<winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticActionState>::get_python_type() noexcept {
    using namespace py::cpp::Windows::System::Diagnostics::TraceReporting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::System::Diagnostics::TraceReporting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PlatformDiagnosticActionState;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticActionState is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticEscalationType>::get_python_type() noexcept {
    using namespace py::cpp::Windows::System::Diagnostics::TraceReporting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::System::Diagnostics::TraceReporting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PlatformDiagnosticEscalationType;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticEscalationType is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticEventBufferLatencies>::get_python_type() noexcept {
    using namespace py::cpp::Windows::System::Diagnostics::TraceReporting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::System::Diagnostics::TraceReporting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PlatformDiagnosticEventBufferLatencies;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticEventBufferLatencies is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTracePriority>::get_python_type() noexcept {
    using namespace py::cpp::Windows::System::Diagnostics::TraceReporting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::System::Diagnostics::TraceReporting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PlatformDiagnosticTracePriority;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTracePriority is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceSlotState>::get_python_type() noexcept {
    using namespace py::cpp::Windows::System::Diagnostics::TraceReporting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::System::Diagnostics::TraceReporting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PlatformDiagnosticTraceSlotState;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceSlotState is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceSlotType>::get_python_type() noexcept {
    using namespace py::cpp::Windows::System::Diagnostics::TraceReporting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::System::Diagnostics::TraceReporting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PlatformDiagnosticTraceSlotType;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceSlotType is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticActions>::get_python_type() noexcept {
    using namespace py::cpp::Windows::System::Diagnostics::TraceReporting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::System::Diagnostics::TraceReporting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PlatformDiagnosticActions;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticActions is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceInfo>::get_python_type() noexcept {
    using namespace py::cpp::Windows::System::Diagnostics::TraceReporting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::System::Diagnostics::TraceReporting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PlatformDiagnosticTraceInfo;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceInfo is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceRuntimeInfo>::get_python_type() noexcept {
    using namespace py::cpp::Windows::System::Diagnostics::TraceReporting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::System::Diagnostics::TraceReporting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PlatformDiagnosticTraceRuntimeInfo;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::System::Diagnostics::TraceReporting::PlatformDiagnosticTraceRuntimeInfo is not registered");
        return nullptr;
    }

    return python_type;
}
