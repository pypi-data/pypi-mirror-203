// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.Devices.I2c.Provider.h"


PyObject* py::converter<winrt::Windows::Devices::I2c::Provider::ProviderI2cTransferResult>::convert(winrt::Windows::Devices::I2c::Provider::ProviderI2cTransferResult instance) noexcept
{
    auto type = py::get_python_type<winrt::Windows::Devices::I2c::Provider::ProviderI2cTransferResult>();
    if (!type)
    {
        return nullptr;
    }

    return py::wrap_struct(instance, type);
}
winrt::Windows::Devices::I2c::Provider::ProviderI2cTransferResult py::converter<winrt::Windows::Devices::I2c::Provider::ProviderI2cTransferResult>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    auto type =  py::get_python_type<winrt::Windows::Devices::I2c::Provider::ProviderI2cTransferResult>();

    if (!type) {
        throw python_exception();
    }

    if (Py_TYPE(obj) == type)
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Devices::I2c::Provider::ProviderI2cTransferResult>*>(obj)->obj;
    }

    PyErr_SetString(PyExc_TypeError, "expecting winrt::Windows::Devices::I2c::Provider::ProviderI2cTransferResult");
    throw python_exception();
}

namespace py::cpp::Windows::Devices::I2c::Provider
{
    struct module_state
    {
        PyObject* type_ProviderI2cBusSpeed;
        PyObject* type_ProviderI2cSharingMode;
        PyObject* type_ProviderI2cTransferStatus;
        PyTypeObject* type_ProviderI2cConnectionSettings;
        PyTypeObject* type_II2cControllerProvider;
        PyTypeObject* type_II2cDeviceProvider;
        PyTypeObject* type_II2cProvider;
        PyTypeObject* type_ProviderI2cTransferResult;
    };

    static PyObject* register_ProviderI2cBusSpeed(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_ProviderI2cBusSpeed)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_ProviderI2cBusSpeed = type;
        Py_INCREF(state->type_ProviderI2cBusSpeed);


        Py_RETURN_NONE;
    }

    static PyObject* register_ProviderI2cSharingMode(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_ProviderI2cSharingMode)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_ProviderI2cSharingMode = type;
        Py_INCREF(state->type_ProviderI2cSharingMode);


        Py_RETURN_NONE;
    }

    static PyObject* register_ProviderI2cTransferStatus(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_ProviderI2cTransferStatus)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_ProviderI2cTransferStatus = type;
        Py_INCREF(state->type_ProviderI2cTransferStatus);


        Py_RETURN_NONE;
    }

    // ----- ProviderI2cConnectionSettings class --------------------
    static constexpr const char* const type_name_ProviderI2cConnectionSettings = "ProviderI2cConnectionSettings";

    static PyObject* _new_ProviderI2cConnectionSettings(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_ProviderI2cConnectionSettings);
        return nullptr;
    }

    static void _dealloc_ProviderI2cConnectionSettings(py::wrapper::Windows::Devices::I2c::Provider::ProviderI2cConnectionSettings* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ProviderI2cConnectionSettings_get_SlaveAddress(py::wrapper::Windows::Devices::I2c::Provider::ProviderI2cConnectionSettings* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings", L"SlaveAddress"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SlaveAddress());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProviderI2cConnectionSettings_put_SlaveAddress(py::wrapper::Windows::Devices::I2c::Provider::ProviderI2cConnectionSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings", L"SlaveAddress"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.SlaveAddress(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ProviderI2cConnectionSettings_get_SharingMode(py::wrapper::Windows::Devices::I2c::Provider::ProviderI2cConnectionSettings* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings", L"SharingMode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SharingMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProviderI2cConnectionSettings_put_SharingMode(py::wrapper::Windows::Devices::I2c::Provider::ProviderI2cConnectionSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings", L"SharingMode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::I2c::Provider::ProviderI2cSharingMode>(arg);

            self->obj.SharingMode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ProviderI2cConnectionSettings_get_BusSpeed(py::wrapper::Windows::Devices::I2c::Provider::ProviderI2cConnectionSettings* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings", L"BusSpeed"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BusSpeed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProviderI2cConnectionSettings_put_BusSpeed(py::wrapper::Windows::Devices::I2c::Provider::ProviderI2cConnectionSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings", L"BusSpeed"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::I2c::Provider::ProviderI2cBusSpeed>(arg);

            self->obj.BusSpeed(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_ProviderI2cConnectionSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::I2c::Provider::ProviderI2cConnectionSettings>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ProviderI2cConnectionSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::I2c::Provider::ProviderI2cConnectionSettings>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ProviderI2cConnectionSettings[] = {
        { "_assign_array_", _assign_array_ProviderI2cConnectionSettings, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ProviderI2cConnectionSettings), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ProviderI2cConnectionSettings[] = {
        { "slave_address", reinterpret_cast<getter>(ProviderI2cConnectionSettings_get_SlaveAddress), reinterpret_cast<setter>(ProviderI2cConnectionSettings_put_SlaveAddress), nullptr, nullptr },
        { "sharing_mode", reinterpret_cast<getter>(ProviderI2cConnectionSettings_get_SharingMode), reinterpret_cast<setter>(ProviderI2cConnectionSettings_put_SharingMode), nullptr, nullptr },
        { "bus_speed", reinterpret_cast<getter>(ProviderI2cConnectionSettings_get_BusSpeed), reinterpret_cast<setter>(ProviderI2cConnectionSettings_put_BusSpeed), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ProviderI2cConnectionSettings[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ProviderI2cConnectionSettings) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ProviderI2cConnectionSettings) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ProviderI2cConnectionSettings) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ProviderI2cConnectionSettings) },
        { },
    };

    static PyType_Spec type_spec_ProviderI2cConnectionSettings =
    {
        "_winsdk_Windows_Devices_I2c_Provider.ProviderI2cConnectionSettings",
        sizeof(py::wrapper::Windows::Devices::I2c::Provider::ProviderI2cConnectionSettings),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ProviderI2cConnectionSettings
    };

    // ----- II2cControllerProvider interface --------------------
    static constexpr const char* const type_name_II2cControllerProvider = "II2cControllerProvider";

    static PyObject* _new_II2cControllerProvider(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */) noexcept
    {
        py::set_invalid_activation_error(type_name_II2cControllerProvider);
        return nullptr;
    }

    static void _dealloc_II2cControllerProvider(py::wrapper::Windows::Devices::I2c::Provider::II2cControllerProvider* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* II2cControllerProvider_GetDeviceProvider(py::wrapper::Windows::Devices::I2c::Provider::II2cControllerProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.I2c.Provider.II2cControllerProvider", L"GetDeviceProvider", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::I2c::Provider::ProviderI2cConnectionSettings>(args, 0);

                return py::convert(self->obj.GetDeviceProvider(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_II2cControllerProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::I2c::Provider::II2cControllerProvider>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_II2cControllerProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::I2c::Provider::II2cControllerProvider>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_II2cControllerProvider[] = {
        { "get_device_provider", reinterpret_cast<PyCFunction>(II2cControllerProvider_GetDeviceProvider), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_II2cControllerProvider, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_II2cControllerProvider), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_II2cControllerProvider[] = {
        { }
    };

    static PyType_Slot _type_slots_II2cControllerProvider[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_II2cControllerProvider) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_II2cControllerProvider) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_II2cControllerProvider) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_II2cControllerProvider) },
        { },
    };

    static PyType_Spec type_spec_II2cControllerProvider =
    {
        "_winsdk_Windows_Devices_I2c_Provider.II2cControllerProvider",
        sizeof(py::wrapper::Windows::Devices::I2c::Provider::II2cControllerProvider),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_II2cControllerProvider
    };

    // ----- II2cDeviceProvider interface --------------------
    static constexpr const char* const type_name_II2cDeviceProvider = "II2cDeviceProvider";

    static PyObject* _new_II2cDeviceProvider(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */) noexcept
    {
        py::set_invalid_activation_error(type_name_II2cDeviceProvider);
        return nullptr;
    }

    static void _dealloc_II2cDeviceProvider(py::wrapper::Windows::Devices::I2c::Provider::II2cDeviceProvider* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* II2cDeviceProvider_Close(py::wrapper::Windows::Devices::I2c::Provider::II2cDeviceProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Foundation.IClosable", L"Close", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* II2cDeviceProvider_Read(py::wrapper::Windows::Devices::I2c::Provider::II2cDeviceProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.I2c.Provider.II2cDeviceProvider", L"Read", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<py::pybuf_view<uint8_t, true>>(args, 0);

                self->obj.Read(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* II2cDeviceProvider_ReadPartial(py::wrapper::Windows::Devices::I2c::Provider::II2cDeviceProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.I2c.Provider.II2cDeviceProvider", L"ReadPartial", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<py::pybuf_view<uint8_t, true>>(args, 0);

                return py::convert(self->obj.ReadPartial(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* II2cDeviceProvider_Write(py::wrapper::Windows::Devices::I2c::Provider::II2cDeviceProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.I2c.Provider.II2cDeviceProvider", L"Write", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<py::pybuf_view<uint8_t, false>>(args, 0);

                self->obj.Write(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* II2cDeviceProvider_WritePartial(py::wrapper::Windows::Devices::I2c::Provider::II2cDeviceProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.I2c.Provider.II2cDeviceProvider", L"WritePartial", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<py::pybuf_view<uint8_t, false>>(args, 0);

                return py::convert(self->obj.WritePartial(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* II2cDeviceProvider_WriteRead(py::wrapper::Windows::Devices::I2c::Provider::II2cDeviceProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.I2c.Provider.II2cDeviceProvider", L"WriteRead", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<py::pybuf_view<uint8_t, false>>(args, 0);
                auto param1 = py::convert_to<py::pybuf_view<uint8_t, true>>(args, 1);

                self->obj.WriteRead(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* II2cDeviceProvider_WriteReadPartial(py::wrapper::Windows::Devices::I2c::Provider::II2cDeviceProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.I2c.Provider.II2cDeviceProvider", L"WriteReadPartial", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<py::pybuf_view<uint8_t, false>>(args, 0);
                auto param1 = py::convert_to<py::pybuf_view<uint8_t, true>>(args, 1);

                return py::convert(self->obj.WriteReadPartial(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* II2cDeviceProvider_get_DeviceId(py::wrapper::Windows::Devices::I2c::Provider::II2cDeviceProvider* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.I2c.Provider.II2cDeviceProvider", L"DeviceId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_II2cDeviceProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::I2c::Provider::II2cDeviceProvider>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_II2cDeviceProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::I2c::Provider::II2cDeviceProvider>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_II2cDeviceProvider(py::wrapper::Windows::Devices::I2c::Provider::II2cDeviceProvider* self) noexcept
    {
        Py_INCREF(self);
        return reinterpret_cast<PyObject*>(self);
    }

    static PyObject* _exit_II2cDeviceProvider(py::wrapper::Windows::Devices::I2c::Provider::II2cDeviceProvider* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_II2cDeviceProvider[] = {
        { "close", reinterpret_cast<PyCFunction>(II2cDeviceProvider_Close), METH_VARARGS, nullptr },
        { "read", reinterpret_cast<PyCFunction>(II2cDeviceProvider_Read), METH_VARARGS, nullptr },
        { "read_partial", reinterpret_cast<PyCFunction>(II2cDeviceProvider_ReadPartial), METH_VARARGS, nullptr },
        { "write", reinterpret_cast<PyCFunction>(II2cDeviceProvider_Write), METH_VARARGS, nullptr },
        { "write_partial", reinterpret_cast<PyCFunction>(II2cDeviceProvider_WritePartial), METH_VARARGS, nullptr },
        { "write_read", reinterpret_cast<PyCFunction>(II2cDeviceProvider_WriteRead), METH_VARARGS, nullptr },
        { "write_read_partial", reinterpret_cast<PyCFunction>(II2cDeviceProvider_WriteReadPartial), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_II2cDeviceProvider, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_II2cDeviceProvider), METH_O | METH_STATIC, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_II2cDeviceProvider), METH_NOARGS, nullptr },
        { "__exit__",  reinterpret_cast<PyCFunction>(_exit_II2cDeviceProvider), METH_VARARGS, nullptr },
        { }
    };

    static PyGetSetDef _getset_II2cDeviceProvider[] = {
        { "device_id", reinterpret_cast<getter>(II2cDeviceProvider_get_DeviceId), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_II2cDeviceProvider[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_II2cDeviceProvider) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_II2cDeviceProvider) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_II2cDeviceProvider) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_II2cDeviceProvider) },
        { },
    };

    static PyType_Spec type_spec_II2cDeviceProvider =
    {
        "_winsdk_Windows_Devices_I2c_Provider.II2cDeviceProvider",
        sizeof(py::wrapper::Windows::Devices::I2c::Provider::II2cDeviceProvider),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_II2cDeviceProvider
    };

    // ----- II2cProvider interface --------------------
    static constexpr const char* const type_name_II2cProvider = "II2cProvider";

    static PyObject* _new_II2cProvider(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */) noexcept
    {
        py::set_invalid_activation_error(type_name_II2cProvider);
        return nullptr;
    }

    static void _dealloc_II2cProvider(py::wrapper::Windows::Devices::I2c::Provider::II2cProvider* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* II2cProvider_GetControllersAsync(py::wrapper::Windows::Devices::I2c::Provider::II2cProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.I2c.Provider.II2cProvider", L"GetControllersAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetControllersAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_II2cProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::I2c::Provider::II2cProvider>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_II2cProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::I2c::Provider::II2cProvider>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_II2cProvider[] = {
        { "get_controllers_async", reinterpret_cast<PyCFunction>(II2cProvider_GetControllersAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_II2cProvider, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_II2cProvider), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_II2cProvider[] = {
        { }
    };

    static PyType_Slot _type_slots_II2cProvider[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_II2cProvider) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_II2cProvider) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_II2cProvider) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_II2cProvider) },
        { },
    };

    static PyType_Spec type_spec_II2cProvider =
    {
        "_winsdk_Windows_Devices_I2c_Provider.II2cProvider",
        sizeof(py::wrapper::Windows::Devices::I2c::Provider::II2cProvider),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_II2cProvider
    };

    // ----- ProviderI2cTransferResult struct --------------------
    static constexpr const char* const type_name_ProviderI2cTransferResult = "ProviderI2cTransferResult";

    PyObject* _new_ProviderI2cTransferResult(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::Devices::I2c::Provider::ProviderI2cTransferResult return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        int32_t _Status{};
        uint32_t _BytesTransferred{};

        static const char* kwlist[] = {"status", "bytes_transferred", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "iI", const_cast<char**>(kwlist), &_Status, &_BytesTransferred))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::Devices::I2c::Provider::ProviderI2cTransferResult return_value{ static_cast<winrt::Windows::Devices::I2c::Provider::ProviderI2cTransferStatus>(_Status), _BytesTransferred };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_ProviderI2cTransferResult(py::wrapper::Windows::Devices::I2c::Provider::ProviderI2cTransferResult* self) noexcept
    {
    }

    static PyObject* ProviderI2cTransferResult_get_Status(py::wrapper::Windows::Devices::I2c::Provider::ProviderI2cTransferResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProviderI2cTransferResult_set_Status(py::wrapper::Windows::Devices::I2c::Provider::ProviderI2cTransferResult* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.Status = py::converter<winrt::Windows::Devices::I2c::Provider::ProviderI2cTransferStatus>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ProviderI2cTransferResult_get_BytesTransferred(py::wrapper::Windows::Devices::I2c::Provider::ProviderI2cTransferResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BytesTransferred);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProviderI2cTransferResult_set_BytesTransferred(py::wrapper::Windows::Devices::I2c::Provider::ProviderI2cTransferResult* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.BytesTransferred = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_ProviderI2cTransferResult[] = {
        { "status", reinterpret_cast<getter>(ProviderI2cTransferResult_get_Status), reinterpret_cast<setter>(ProviderI2cTransferResult_set_Status), nullptr, nullptr },
        { "bytes_transferred", reinterpret_cast<getter>(ProviderI2cTransferResult_get_BytesTransferred), reinterpret_cast<setter>(ProviderI2cTransferResult_set_BytesTransferred), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ProviderI2cTransferResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ProviderI2cTransferResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ProviderI2cTransferResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ProviderI2cTransferResult) },
        { },
    };

    static PyType_Spec type_spec_ProviderI2cTransferResult =
    {
        "_winsdk_Windows_Devices_I2c_Provider.ProviderI2cTransferResult",
        sizeof(py::wrapper::Windows::Devices::I2c::Provider::ProviderI2cTransferResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ProviderI2cTransferResult
    };

    // ----- Windows.Devices.I2c.Provider Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Devices::I2c::Provider");

    static PyMethodDef module_methods[] = {
        {"_register_ProviderI2cBusSpeed", register_ProviderI2cBusSpeed, METH_O, "registers type"},
        {"_register_ProviderI2cSharingMode", register_ProviderI2cSharingMode, METH_O, "registers type"},
        {"_register_ProviderI2cTransferStatus", register_ProviderI2cTransferStatus, METH_O, "registers type"},
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_ProviderI2cBusSpeed);
        Py_VISIT(state->type_ProviderI2cSharingMode);
        Py_VISIT(state->type_ProviderI2cTransferStatus);
        Py_VISIT(state->type_ProviderI2cConnectionSettings);
        Py_VISIT(state->type_II2cControllerProvider);
        Py_VISIT(state->type_II2cDeviceProvider);
        Py_VISIT(state->type_II2cProvider);
        Py_VISIT(state->type_ProviderI2cTransferResult);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_ProviderI2cBusSpeed);
        Py_CLEAR(state->type_ProviderI2cSharingMode);
        Py_CLEAR(state->type_ProviderI2cTransferStatus);
        Py_CLEAR(state->type_ProviderI2cConnectionSettings);
        Py_CLEAR(state->type_II2cControllerProvider);
        Py_CLEAR(state->type_II2cDeviceProvider);
        Py_CLEAR(state->type_II2cProvider);
        Py_CLEAR(state->type_ProviderI2cTransferResult);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Devices_I2c_Provider",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Devices::I2c::Provider

PyMODINIT_FUNC PyInit__winsdk_Windows_Devices_I2c_Provider(void) noexcept
{
    using namespace py::cpp::Windows::Devices::I2c::Provider;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_ProviderI2cConnectionSettings = py::register_python_type(module.get(), type_name_ProviderI2cConnectionSettings, &type_spec_ProviderI2cConnectionSettings, bases.get(), nullptr);
    if (!state->type_ProviderI2cConnectionSettings)
    {
        return nullptr;
    }

    state->type_II2cControllerProvider = py::register_python_type(module.get(), type_name_II2cControllerProvider, &type_spec_II2cControllerProvider, bases.get(), nullptr);
    if (!state->type_II2cControllerProvider)
    {
        return nullptr;
    }

    state->type_II2cDeviceProvider = py::register_python_type(module.get(), type_name_II2cDeviceProvider, &type_spec_II2cDeviceProvider, bases.get(), nullptr);
    if (!state->type_II2cDeviceProvider)
    {
        return nullptr;
    }

    state->type_II2cProvider = py::register_python_type(module.get(), type_name_II2cProvider, &type_spec_II2cProvider, bases.get(), nullptr);
    if (!state->type_II2cProvider)
    {
        return nullptr;
    }

    state->type_ProviderI2cTransferResult = py::register_python_type(module.get(), type_name_ProviderI2cTransferResult, &type_spec_ProviderI2cTransferResult, bases.get(), nullptr);
    if (!state->type_ProviderI2cTransferResult)
    {
        return nullptr;
    }


    return module.detach();
}

PyObject* py::py_type<winrt::Windows::Devices::I2c::Provider::ProviderI2cBusSpeed>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Devices::I2c::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Devices::I2c::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_ProviderI2cBusSpeed;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Devices::I2c::Provider::ProviderI2cBusSpeed is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::Devices::I2c::Provider::ProviderI2cSharingMode>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Devices::I2c::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Devices::I2c::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_ProviderI2cSharingMode;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Devices::I2c::Provider::ProviderI2cSharingMode is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::Devices::I2c::Provider::ProviderI2cTransferStatus>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Devices::I2c::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Devices::I2c::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_ProviderI2cTransferStatus;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Devices::I2c::Provider::ProviderI2cTransferStatus is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Devices::I2c::Provider::ProviderI2cConnectionSettings>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Devices::I2c::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Devices::I2c::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_ProviderI2cConnectionSettings;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Devices::I2c::Provider::ProviderI2cConnectionSettings is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Devices::I2c::Provider::II2cControllerProvider>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Devices::I2c::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Devices::I2c::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_II2cControllerProvider;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Devices::I2c::Provider::II2cControllerProvider is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Devices::I2c::Provider::II2cDeviceProvider>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Devices::I2c::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Devices::I2c::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_II2cDeviceProvider;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Devices::I2c::Provider::II2cDeviceProvider is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Devices::I2c::Provider::II2cProvider>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Devices::I2c::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Devices::I2c::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_II2cProvider;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Devices::I2c::Provider::II2cProvider is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Devices::I2c::Provider::ProviderI2cTransferResult>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Devices::I2c::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Devices::I2c::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_ProviderI2cTransferResult;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Devices::I2c::Provider::ProviderI2cTransferResult is not registered");
        return nullptr;
    }

    return python_type;
}
