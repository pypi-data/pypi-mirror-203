// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.Gaming.XboxLive.Storage.h"


namespace py::cpp::Windows::Gaming::XboxLive::Storage
{
    struct module_state
    {
        PyObject* type_GameSaveErrorStatus;
        PyTypeObject* type_GameSaveBlobGetResult;
        PyTypeObject* type_GameSaveBlobInfo;
        PyTypeObject* type_GameSaveBlobInfoGetResult;
        PyTypeObject* type_GameSaveBlobInfoQuery;
        PyTypeObject* type_GameSaveContainer;
        PyTypeObject* type_GameSaveContainerInfo;
        PyTypeObject* type_GameSaveContainerInfoGetResult;
        PyTypeObject* type_GameSaveContainerInfoQuery;
        PyTypeObject* type_GameSaveOperationResult;
        PyTypeObject* type_GameSaveProvider;
        PyTypeObject* type_GameSaveProviderGetResult;
    };

    static PyObject* register_GameSaveErrorStatus(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_GameSaveErrorStatus)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_GameSaveErrorStatus = type;
        Py_INCREF(state->type_GameSaveErrorStatus);


        Py_RETURN_NONE;
    }

    // ----- GameSaveBlobGetResult class --------------------
    static constexpr const char* const type_name_GameSaveBlobGetResult = "GameSaveBlobGetResult";

    static PyObject* _new_GameSaveBlobGetResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_GameSaveBlobGetResult);
        return nullptr;
    }

    static void _dealloc_GameSaveBlobGetResult(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobGetResult* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GameSaveBlobGetResult_get_Status(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobGetResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveBlobGetResult", L"Status"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameSaveBlobGetResult_get_Value(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobGetResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveBlobGetResult", L"Value"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Value());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GameSaveBlobGetResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobGetResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GameSaveBlobGetResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobGetResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameSaveBlobGetResult[] = {
        { "_assign_array_", _assign_array_GameSaveBlobGetResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GameSaveBlobGetResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GameSaveBlobGetResult[] = {
        { "status", reinterpret_cast<getter>(GameSaveBlobGetResult_get_Status), nullptr, nullptr, nullptr },
        { "value", reinterpret_cast<getter>(GameSaveBlobGetResult_get_Value), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GameSaveBlobGetResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GameSaveBlobGetResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GameSaveBlobGetResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GameSaveBlobGetResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GameSaveBlobGetResult) },
        { },
    };

    static PyType_Spec type_spec_GameSaveBlobGetResult =
    {
        "_winsdk_Windows_Gaming_XboxLive_Storage.GameSaveBlobGetResult",
        sizeof(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobGetResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameSaveBlobGetResult
    };

    // ----- GameSaveBlobInfo class --------------------
    static constexpr const char* const type_name_GameSaveBlobInfo = "GameSaveBlobInfo";

    static PyObject* _new_GameSaveBlobInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_GameSaveBlobInfo);
        return nullptr;
    }

    static void _dealloc_GameSaveBlobInfo(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfo* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GameSaveBlobInfo_get_Name(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveBlobInfo", L"Name"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameSaveBlobInfo_get_Size(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveBlobInfo", L"Size"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GameSaveBlobInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfo>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GameSaveBlobInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameSaveBlobInfo[] = {
        { "_assign_array_", _assign_array_GameSaveBlobInfo, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GameSaveBlobInfo), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GameSaveBlobInfo[] = {
        { "name", reinterpret_cast<getter>(GameSaveBlobInfo_get_Name), nullptr, nullptr, nullptr },
        { "size", reinterpret_cast<getter>(GameSaveBlobInfo_get_Size), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GameSaveBlobInfo[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GameSaveBlobInfo) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GameSaveBlobInfo) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GameSaveBlobInfo) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GameSaveBlobInfo) },
        { },
    };

    static PyType_Spec type_spec_GameSaveBlobInfo =
    {
        "_winsdk_Windows_Gaming_XboxLive_Storage.GameSaveBlobInfo",
        sizeof(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameSaveBlobInfo
    };

    // ----- GameSaveBlobInfoGetResult class --------------------
    static constexpr const char* const type_name_GameSaveBlobInfoGetResult = "GameSaveBlobInfoGetResult";

    static PyObject* _new_GameSaveBlobInfoGetResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_GameSaveBlobInfoGetResult);
        return nullptr;
    }

    static void _dealloc_GameSaveBlobInfoGetResult(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoGetResult* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GameSaveBlobInfoGetResult_get_Status(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoGetResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveBlobInfoGetResult", L"Status"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameSaveBlobInfoGetResult_get_Value(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoGetResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveBlobInfoGetResult", L"Value"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Value());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GameSaveBlobInfoGetResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoGetResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GameSaveBlobInfoGetResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoGetResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameSaveBlobInfoGetResult[] = {
        { "_assign_array_", _assign_array_GameSaveBlobInfoGetResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GameSaveBlobInfoGetResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GameSaveBlobInfoGetResult[] = {
        { "status", reinterpret_cast<getter>(GameSaveBlobInfoGetResult_get_Status), nullptr, nullptr, nullptr },
        { "value", reinterpret_cast<getter>(GameSaveBlobInfoGetResult_get_Value), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GameSaveBlobInfoGetResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GameSaveBlobInfoGetResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GameSaveBlobInfoGetResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GameSaveBlobInfoGetResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GameSaveBlobInfoGetResult) },
        { },
    };

    static PyType_Spec type_spec_GameSaveBlobInfoGetResult =
    {
        "_winsdk_Windows_Gaming_XboxLive_Storage.GameSaveBlobInfoGetResult",
        sizeof(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoGetResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameSaveBlobInfoGetResult
    };

    // ----- GameSaveBlobInfoQuery class --------------------
    static constexpr const char* const type_name_GameSaveBlobInfoQuery = "GameSaveBlobInfoQuery";

    static PyObject* _new_GameSaveBlobInfoQuery(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_GameSaveBlobInfoQuery);
        return nullptr;
    }

    static void _dealloc_GameSaveBlobInfoQuery(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoQuery* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GameSaveBlobInfoQuery_GetBlobInfoAsync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoQuery* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveBlobInfoQuery", L"GetBlobInfoAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetBlobInfoAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveBlobInfoQuery", L"GetBlobInfoAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);

                return py::convert(self->obj.GetBlobInfoAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveBlobInfoQuery_GetItemCountAsync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoQuery* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveBlobInfoQuery", L"GetItemCountAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetItemCountAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_GameSaveBlobInfoQuery(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoQuery>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GameSaveBlobInfoQuery(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoQuery>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameSaveBlobInfoQuery[] = {
        { "get_blob_info_async", reinterpret_cast<PyCFunction>(GameSaveBlobInfoQuery_GetBlobInfoAsync), METH_VARARGS, nullptr },
        { "get_item_count_async", reinterpret_cast<PyCFunction>(GameSaveBlobInfoQuery_GetItemCountAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_GameSaveBlobInfoQuery, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GameSaveBlobInfoQuery), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GameSaveBlobInfoQuery[] = {
        { }
    };

    static PyType_Slot _type_slots_GameSaveBlobInfoQuery[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GameSaveBlobInfoQuery) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GameSaveBlobInfoQuery) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GameSaveBlobInfoQuery) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GameSaveBlobInfoQuery) },
        { },
    };

    static PyType_Spec type_spec_GameSaveBlobInfoQuery =
    {
        "_winsdk_Windows_Gaming_XboxLive_Storage.GameSaveBlobInfoQuery",
        sizeof(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoQuery),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameSaveBlobInfoQuery
    };

    // ----- GameSaveContainer class --------------------
    static constexpr const char* const type_name_GameSaveContainer = "GameSaveContainer";

    static PyObject* _new_GameSaveContainer(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_GameSaveContainer);
        return nullptr;
    }

    static void _dealloc_GameSaveContainer(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainer* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GameSaveContainer_CreateBlobInfoQuery(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainer* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveContainer", L"CreateBlobInfoQuery", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.CreateBlobInfoQuery(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveContainer_GetAsync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainer* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveContainer", L"GetAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                return py::convert(self->obj.GetAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveContainer_ReadAsync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainer* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveContainer", L"ReadAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::Windows::Storage::Streams::IBuffer>>(args, 0);

                return py::convert(self->obj.ReadAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveContainer_SubmitPropertySetUpdatesAsync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainer* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveContainer", L"SubmitPropertySetUpdatesAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IPropertySet>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                return py::convert(self->obj.SubmitPropertySetUpdatesAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveContainer_SubmitUpdatesAsync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainer* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveContainer", L"SubmitUpdatesAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::Windows::Storage::Streams::IBuffer>>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                return py::convert(self->obj.SubmitUpdatesAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveContainer_get_Name(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainer* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveContainer", L"Name"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameSaveContainer_get_Provider(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainer* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveContainer", L"Provider"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Provider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GameSaveContainer(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainer>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GameSaveContainer(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainer>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameSaveContainer[] = {
        { "create_blob_info_query", reinterpret_cast<PyCFunction>(GameSaveContainer_CreateBlobInfoQuery), METH_VARARGS, nullptr },
        { "get_async", reinterpret_cast<PyCFunction>(GameSaveContainer_GetAsync), METH_VARARGS, nullptr },
        { "read_async", reinterpret_cast<PyCFunction>(GameSaveContainer_ReadAsync), METH_VARARGS, nullptr },
        { "submit_property_set_updates_async", reinterpret_cast<PyCFunction>(GameSaveContainer_SubmitPropertySetUpdatesAsync), METH_VARARGS, nullptr },
        { "submit_updates_async", reinterpret_cast<PyCFunction>(GameSaveContainer_SubmitUpdatesAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_GameSaveContainer, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GameSaveContainer), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GameSaveContainer[] = {
        { "name", reinterpret_cast<getter>(GameSaveContainer_get_Name), nullptr, nullptr, nullptr },
        { "provider", reinterpret_cast<getter>(GameSaveContainer_get_Provider), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GameSaveContainer[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GameSaveContainer) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GameSaveContainer) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GameSaveContainer) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GameSaveContainer) },
        { },
    };

    static PyType_Spec type_spec_GameSaveContainer =
    {
        "_winsdk_Windows_Gaming_XboxLive_Storage.GameSaveContainer",
        sizeof(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainer),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameSaveContainer
    };

    // ----- GameSaveContainerInfo class --------------------
    static constexpr const char* const type_name_GameSaveContainerInfo = "GameSaveContainerInfo";

    static PyObject* _new_GameSaveContainerInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_GameSaveContainerInfo);
        return nullptr;
    }

    static void _dealloc_GameSaveContainerInfo(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfo* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GameSaveContainerInfo_get_DisplayName(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveContainerInfo", L"DisplayName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameSaveContainerInfo_get_LastModifiedTime(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveContainerInfo", L"LastModifiedTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.LastModifiedTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameSaveContainerInfo_get_Name(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveContainerInfo", L"Name"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameSaveContainerInfo_get_NeedsSync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveContainerInfo", L"NeedsSync"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.NeedsSync());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameSaveContainerInfo_get_TotalSize(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveContainerInfo", L"TotalSize"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TotalSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GameSaveContainerInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfo>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GameSaveContainerInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameSaveContainerInfo[] = {
        { "_assign_array_", _assign_array_GameSaveContainerInfo, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GameSaveContainerInfo), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GameSaveContainerInfo[] = {
        { "display_name", reinterpret_cast<getter>(GameSaveContainerInfo_get_DisplayName), nullptr, nullptr, nullptr },
        { "last_modified_time", reinterpret_cast<getter>(GameSaveContainerInfo_get_LastModifiedTime), nullptr, nullptr, nullptr },
        { "name", reinterpret_cast<getter>(GameSaveContainerInfo_get_Name), nullptr, nullptr, nullptr },
        { "needs_sync", reinterpret_cast<getter>(GameSaveContainerInfo_get_NeedsSync), nullptr, nullptr, nullptr },
        { "total_size", reinterpret_cast<getter>(GameSaveContainerInfo_get_TotalSize), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GameSaveContainerInfo[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GameSaveContainerInfo) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GameSaveContainerInfo) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GameSaveContainerInfo) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GameSaveContainerInfo) },
        { },
    };

    static PyType_Spec type_spec_GameSaveContainerInfo =
    {
        "_winsdk_Windows_Gaming_XboxLive_Storage.GameSaveContainerInfo",
        sizeof(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameSaveContainerInfo
    };

    // ----- GameSaveContainerInfoGetResult class --------------------
    static constexpr const char* const type_name_GameSaveContainerInfoGetResult = "GameSaveContainerInfoGetResult";

    static PyObject* _new_GameSaveContainerInfoGetResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_GameSaveContainerInfoGetResult);
        return nullptr;
    }

    static void _dealloc_GameSaveContainerInfoGetResult(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoGetResult* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GameSaveContainerInfoGetResult_get_Status(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoGetResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveContainerInfoGetResult", L"Status"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameSaveContainerInfoGetResult_get_Value(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoGetResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveContainerInfoGetResult", L"Value"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Value());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GameSaveContainerInfoGetResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoGetResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GameSaveContainerInfoGetResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoGetResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameSaveContainerInfoGetResult[] = {
        { "_assign_array_", _assign_array_GameSaveContainerInfoGetResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GameSaveContainerInfoGetResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GameSaveContainerInfoGetResult[] = {
        { "status", reinterpret_cast<getter>(GameSaveContainerInfoGetResult_get_Status), nullptr, nullptr, nullptr },
        { "value", reinterpret_cast<getter>(GameSaveContainerInfoGetResult_get_Value), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GameSaveContainerInfoGetResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GameSaveContainerInfoGetResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GameSaveContainerInfoGetResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GameSaveContainerInfoGetResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GameSaveContainerInfoGetResult) },
        { },
    };

    static PyType_Spec type_spec_GameSaveContainerInfoGetResult =
    {
        "_winsdk_Windows_Gaming_XboxLive_Storage.GameSaveContainerInfoGetResult",
        sizeof(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoGetResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameSaveContainerInfoGetResult
    };

    // ----- GameSaveContainerInfoQuery class --------------------
    static constexpr const char* const type_name_GameSaveContainerInfoQuery = "GameSaveContainerInfoQuery";

    static PyObject* _new_GameSaveContainerInfoQuery(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_GameSaveContainerInfoQuery);
        return nullptr;
    }

    static void _dealloc_GameSaveContainerInfoQuery(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoQuery* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GameSaveContainerInfoQuery_GetContainerInfoAsync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoQuery* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveContainerInfoQuery", L"GetContainerInfoAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetContainerInfoAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveContainerInfoQuery", L"GetContainerInfoAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);

                return py::convert(self->obj.GetContainerInfoAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveContainerInfoQuery_GetItemCountAsync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoQuery* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveContainerInfoQuery", L"GetItemCountAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetItemCountAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_GameSaveContainerInfoQuery(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoQuery>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GameSaveContainerInfoQuery(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoQuery>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameSaveContainerInfoQuery[] = {
        { "get_container_info_async", reinterpret_cast<PyCFunction>(GameSaveContainerInfoQuery_GetContainerInfoAsync), METH_VARARGS, nullptr },
        { "get_item_count_async", reinterpret_cast<PyCFunction>(GameSaveContainerInfoQuery_GetItemCountAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_GameSaveContainerInfoQuery, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GameSaveContainerInfoQuery), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GameSaveContainerInfoQuery[] = {
        { }
    };

    static PyType_Slot _type_slots_GameSaveContainerInfoQuery[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GameSaveContainerInfoQuery) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GameSaveContainerInfoQuery) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GameSaveContainerInfoQuery) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GameSaveContainerInfoQuery) },
        { },
    };

    static PyType_Spec type_spec_GameSaveContainerInfoQuery =
    {
        "_winsdk_Windows_Gaming_XboxLive_Storage.GameSaveContainerInfoQuery",
        sizeof(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoQuery),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameSaveContainerInfoQuery
    };

    // ----- GameSaveOperationResult class --------------------
    static constexpr const char* const type_name_GameSaveOperationResult = "GameSaveOperationResult";

    static PyObject* _new_GameSaveOperationResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_GameSaveOperationResult);
        return nullptr;
    }

    static void _dealloc_GameSaveOperationResult(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveOperationResult* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GameSaveOperationResult_get_Status(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveOperationResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveOperationResult", L"Status"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GameSaveOperationResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Gaming::XboxLive::Storage::GameSaveOperationResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GameSaveOperationResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::XboxLive::Storage::GameSaveOperationResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameSaveOperationResult[] = {
        { "_assign_array_", _assign_array_GameSaveOperationResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GameSaveOperationResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GameSaveOperationResult[] = {
        { "status", reinterpret_cast<getter>(GameSaveOperationResult_get_Status), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GameSaveOperationResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GameSaveOperationResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GameSaveOperationResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GameSaveOperationResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GameSaveOperationResult) },
        { },
    };

    static PyType_Spec type_spec_GameSaveOperationResult =
    {
        "_winsdk_Windows_Gaming_XboxLive_Storage.GameSaveOperationResult",
        sizeof(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveOperationResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameSaveOperationResult
    };

    // ----- GameSaveProvider class --------------------
    static constexpr const char* const type_name_GameSaveProvider = "GameSaveProvider";

    static PyObject* _new_GameSaveProvider(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_GameSaveProvider);
        return nullptr;
    }

    static void _dealloc_GameSaveProvider(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProvider* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GameSaveProvider_CreateContainer(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveProvider", L"CreateContainer", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.CreateContainer(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveProvider_CreateContainerInfoQuery(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveProvider", L"CreateContainerInfoQuery", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.CreateContainerInfoQuery());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveProvider", L"CreateContainerInfoQuery", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.CreateContainerInfoQuery(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveProvider_DeleteContainerAsync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveProvider", L"DeleteContainerAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.DeleteContainerAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveProvider_GetForUserAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveProvider", L"GetForUserAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Gaming::XboxLive::Storage::GameSaveProvider::GetForUserAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveProvider_GetRemainingBytesInQuotaAsync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveProvider", L"GetRemainingBytesInQuotaAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetRemainingBytesInQuotaAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveProvider_GetSyncOnDemandForUserAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveProvider", L"GetSyncOnDemandForUserAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Gaming::XboxLive::Storage::GameSaveProvider::GetSyncOnDemandForUserAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveProvider_get_ContainersChangedSinceLastSync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProvider* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveProvider", L"ContainersChangedSinceLastSync"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ContainersChangedSinceLastSync());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameSaveProvider_get_User(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProvider* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveProvider", L"User"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GameSaveProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Gaming::XboxLive::Storage::GameSaveProvider>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GameSaveProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::XboxLive::Storage::GameSaveProvider>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameSaveProvider[] = {
        { "create_container", reinterpret_cast<PyCFunction>(GameSaveProvider_CreateContainer), METH_VARARGS, nullptr },
        { "create_container_info_query", reinterpret_cast<PyCFunction>(GameSaveProvider_CreateContainerInfoQuery), METH_VARARGS, nullptr },
        { "delete_container_async", reinterpret_cast<PyCFunction>(GameSaveProvider_DeleteContainerAsync), METH_VARARGS, nullptr },
        { "get_for_user_async", reinterpret_cast<PyCFunction>(GameSaveProvider_GetForUserAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_remaining_bytes_in_quota_async", reinterpret_cast<PyCFunction>(GameSaveProvider_GetRemainingBytesInQuotaAsync), METH_VARARGS, nullptr },
        { "get_sync_on_demand_for_user_async", reinterpret_cast<PyCFunction>(GameSaveProvider_GetSyncOnDemandForUserAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "_assign_array_", _assign_array_GameSaveProvider, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GameSaveProvider), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GameSaveProvider[] = {
        { "containers_changed_since_last_sync", reinterpret_cast<getter>(GameSaveProvider_get_ContainersChangedSinceLastSync), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(GameSaveProvider_get_User), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GameSaveProvider[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GameSaveProvider) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GameSaveProvider) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GameSaveProvider) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GameSaveProvider) },
        { },
    };

    static PyType_Spec type_spec_GameSaveProvider =
    {
        "_winsdk_Windows_Gaming_XboxLive_Storage.GameSaveProvider",
        sizeof(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProvider),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameSaveProvider
    };

    // ----- GameSaveProviderGetResult class --------------------
    static constexpr const char* const type_name_GameSaveProviderGetResult = "GameSaveProviderGetResult";

    static PyObject* _new_GameSaveProviderGetResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_GameSaveProviderGetResult);
        return nullptr;
    }

    static void _dealloc_GameSaveProviderGetResult(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProviderGetResult* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GameSaveProviderGetResult_get_Status(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProviderGetResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveProviderGetResult", L"Status"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameSaveProviderGetResult_get_Value(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProviderGetResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Gaming.XboxLive.Storage.GameSaveProviderGetResult", L"Value"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Value());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GameSaveProviderGetResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Gaming::XboxLive::Storage::GameSaveProviderGetResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GameSaveProviderGetResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::XboxLive::Storage::GameSaveProviderGetResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameSaveProviderGetResult[] = {
        { "_assign_array_", _assign_array_GameSaveProviderGetResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GameSaveProviderGetResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GameSaveProviderGetResult[] = {
        { "status", reinterpret_cast<getter>(GameSaveProviderGetResult_get_Status), nullptr, nullptr, nullptr },
        { "value", reinterpret_cast<getter>(GameSaveProviderGetResult_get_Value), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GameSaveProviderGetResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GameSaveProviderGetResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GameSaveProviderGetResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GameSaveProviderGetResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GameSaveProviderGetResult) },
        { },
    };

    static PyType_Spec type_spec_GameSaveProviderGetResult =
    {
        "_winsdk_Windows_Gaming_XboxLive_Storage.GameSaveProviderGetResult",
        sizeof(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProviderGetResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameSaveProviderGetResult
    };

    // ----- Windows.Gaming.XboxLive.Storage Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Gaming::XboxLive::Storage");

    static PyMethodDef module_methods[] = {
        {"_register_GameSaveErrorStatus", register_GameSaveErrorStatus, METH_O, "registers type"},
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_GameSaveErrorStatus);
        Py_VISIT(state->type_GameSaveBlobGetResult);
        Py_VISIT(state->type_GameSaveBlobInfo);
        Py_VISIT(state->type_GameSaveBlobInfoGetResult);
        Py_VISIT(state->type_GameSaveBlobInfoQuery);
        Py_VISIT(state->type_GameSaveContainer);
        Py_VISIT(state->type_GameSaveContainerInfo);
        Py_VISIT(state->type_GameSaveContainerInfoGetResult);
        Py_VISIT(state->type_GameSaveContainerInfoQuery);
        Py_VISIT(state->type_GameSaveOperationResult);
        Py_VISIT(state->type_GameSaveProvider);
        Py_VISIT(state->type_GameSaveProviderGetResult);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_GameSaveErrorStatus);
        Py_CLEAR(state->type_GameSaveBlobGetResult);
        Py_CLEAR(state->type_GameSaveBlobInfo);
        Py_CLEAR(state->type_GameSaveBlobInfoGetResult);
        Py_CLEAR(state->type_GameSaveBlobInfoQuery);
        Py_CLEAR(state->type_GameSaveContainer);
        Py_CLEAR(state->type_GameSaveContainerInfo);
        Py_CLEAR(state->type_GameSaveContainerInfoGetResult);
        Py_CLEAR(state->type_GameSaveContainerInfoQuery);
        Py_CLEAR(state->type_GameSaveOperationResult);
        Py_CLEAR(state->type_GameSaveProvider);
        Py_CLEAR(state->type_GameSaveProviderGetResult);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Gaming_XboxLive_Storage",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Gaming::XboxLive::Storage

PyMODINIT_FUNC PyInit__winsdk_Windows_Gaming_XboxLive_Storage(void) noexcept
{
    using namespace py::cpp::Windows::Gaming::XboxLive::Storage;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_GameSaveBlobGetResult = py::register_python_type(module.get(), type_name_GameSaveBlobGetResult, &type_spec_GameSaveBlobGetResult, bases.get(), nullptr);
    if (!state->type_GameSaveBlobGetResult)
    {
        return nullptr;
    }

    state->type_GameSaveBlobInfo = py::register_python_type(module.get(), type_name_GameSaveBlobInfo, &type_spec_GameSaveBlobInfo, bases.get(), nullptr);
    if (!state->type_GameSaveBlobInfo)
    {
        return nullptr;
    }

    state->type_GameSaveBlobInfoGetResult = py::register_python_type(module.get(), type_name_GameSaveBlobInfoGetResult, &type_spec_GameSaveBlobInfoGetResult, bases.get(), nullptr);
    if (!state->type_GameSaveBlobInfoGetResult)
    {
        return nullptr;
    }

    state->type_GameSaveBlobInfoQuery = py::register_python_type(module.get(), type_name_GameSaveBlobInfoQuery, &type_spec_GameSaveBlobInfoQuery, bases.get(), nullptr);
    if (!state->type_GameSaveBlobInfoQuery)
    {
        return nullptr;
    }

    state->type_GameSaveContainer = py::register_python_type(module.get(), type_name_GameSaveContainer, &type_spec_GameSaveContainer, bases.get(), nullptr);
    if (!state->type_GameSaveContainer)
    {
        return nullptr;
    }

    state->type_GameSaveContainerInfo = py::register_python_type(module.get(), type_name_GameSaveContainerInfo, &type_spec_GameSaveContainerInfo, bases.get(), nullptr);
    if (!state->type_GameSaveContainerInfo)
    {
        return nullptr;
    }

    state->type_GameSaveContainerInfoGetResult = py::register_python_type(module.get(), type_name_GameSaveContainerInfoGetResult, &type_spec_GameSaveContainerInfoGetResult, bases.get(), nullptr);
    if (!state->type_GameSaveContainerInfoGetResult)
    {
        return nullptr;
    }

    state->type_GameSaveContainerInfoQuery = py::register_python_type(module.get(), type_name_GameSaveContainerInfoQuery, &type_spec_GameSaveContainerInfoQuery, bases.get(), nullptr);
    if (!state->type_GameSaveContainerInfoQuery)
    {
        return nullptr;
    }

    state->type_GameSaveOperationResult = py::register_python_type(module.get(), type_name_GameSaveOperationResult, &type_spec_GameSaveOperationResult, bases.get(), nullptr);
    if (!state->type_GameSaveOperationResult)
    {
        return nullptr;
    }

    state->type_GameSaveProvider = py::register_python_type(module.get(), type_name_GameSaveProvider, &type_spec_GameSaveProvider, bases.get(), nullptr);
    if (!state->type_GameSaveProvider)
    {
        return nullptr;
    }

    state->type_GameSaveProviderGetResult = py::register_python_type(module.get(), type_name_GameSaveProviderGetResult, &type_spec_GameSaveProviderGetResult, bases.get(), nullptr);
    if (!state->type_GameSaveProviderGetResult)
    {
        return nullptr;
    }


    return module.detach();
}

PyObject* py::py_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveErrorStatus>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Gaming::XboxLive::Storage;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Gaming::XboxLive::Storage");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_GameSaveErrorStatus;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Gaming::XboxLive::Storage::GameSaveErrorStatus is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobGetResult>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Gaming::XboxLive::Storage;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Gaming::XboxLive::Storage");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_GameSaveBlobGetResult;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobGetResult is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfo>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Gaming::XboxLive::Storage;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Gaming::XboxLive::Storage");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_GameSaveBlobInfo;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfo is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoGetResult>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Gaming::XboxLive::Storage;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Gaming::XboxLive::Storage");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_GameSaveBlobInfoGetResult;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoGetResult is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoQuery>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Gaming::XboxLive::Storage;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Gaming::XboxLive::Storage");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_GameSaveBlobInfoQuery;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoQuery is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainer>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Gaming::XboxLive::Storage;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Gaming::XboxLive::Storage");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_GameSaveContainer;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainer is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfo>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Gaming::XboxLive::Storage;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Gaming::XboxLive::Storage");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_GameSaveContainerInfo;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfo is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoGetResult>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Gaming::XboxLive::Storage;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Gaming::XboxLive::Storage");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_GameSaveContainerInfoGetResult;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoGetResult is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoQuery>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Gaming::XboxLive::Storage;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Gaming::XboxLive::Storage");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_GameSaveContainerInfoQuery;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoQuery is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveOperationResult>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Gaming::XboxLive::Storage;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Gaming::XboxLive::Storage");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_GameSaveOperationResult;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Gaming::XboxLive::Storage::GameSaveOperationResult is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveProvider>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Gaming::XboxLive::Storage;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Gaming::XboxLive::Storage");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_GameSaveProvider;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Gaming::XboxLive::Storage::GameSaveProvider is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveProviderGetResult>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Gaming::XboxLive::Storage;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Gaming::XboxLive::Storage");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_GameSaveProviderGetResult;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Gaming::XboxLive::Storage::GameSaveProviderGetResult is not registered");
        return nullptr;
    }

    return python_type;
}
