// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.Media.Ocr.h"


namespace py::cpp::Windows::Media::Ocr
{
    struct module_state
    {
        PyTypeObject* type_OcrEngine;
        PyTypeObject* type_OcrLine;
        PyTypeObject* type_OcrResult;
        PyTypeObject* type_OcrWord;
    };

    // ----- OcrEngine class --------------------
    static constexpr const char* const type_name_OcrEngine = "OcrEngine";

    static PyObject* _new_OcrEngine(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_OcrEngine);
        return nullptr;
    }

    static void _dealloc_OcrEngine(py::wrapper::Windows::Media::Ocr::OcrEngine* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* OcrEngine_IsLanguageSupported(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.Ocr.OcrEngine", L"IsLanguageSupported", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Globalization::Language>(args, 0);

                return py::convert(winrt::Windows::Media::Ocr::OcrEngine::IsLanguageSupported(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* OcrEngine_RecognizeAsync(py::wrapper::Windows::Media::Ocr::OcrEngine* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.Ocr.OcrEngine", L"RecognizeAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Imaging::SoftwareBitmap>(args, 0);

                return py::convert(self->obj.RecognizeAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* OcrEngine_TryCreateFromLanguage(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.Ocr.OcrEngine", L"TryCreateFromLanguage", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Globalization::Language>(args, 0);

                return py::convert(winrt::Windows::Media::Ocr::OcrEngine::TryCreateFromLanguage(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* OcrEngine_TryCreateFromUserProfileLanguages(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.Ocr.OcrEngine", L"TryCreateFromUserProfileLanguages", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Media::Ocr::OcrEngine::TryCreateFromUserProfileLanguages());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* OcrEngine_get_RecognizerLanguage(py::wrapper::Windows::Media::Ocr::OcrEngine* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Ocr.OcrEngine", L"RecognizerLanguage"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RecognizerLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* OcrEngine_get_AvailableRecognizerLanguages(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Ocr.OcrEngine", L"AvailableRecognizerLanguages"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Media::Ocr::OcrEngine::AvailableRecognizerLanguages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* OcrEngine_get_MaxImageDimension(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Ocr.OcrEngine", L"MaxImageDimension"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Media::Ocr::OcrEngine::MaxImageDimension());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_OcrEngine(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::Ocr::OcrEngine>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_OcrEngine(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Ocr::OcrEngine>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_OcrEngine[] = {
        { "is_language_supported", reinterpret_cast<PyCFunction>(OcrEngine_IsLanguageSupported), METH_VARARGS | METH_STATIC, nullptr },
        { "recognize_async", reinterpret_cast<PyCFunction>(OcrEngine_RecognizeAsync), METH_VARARGS, nullptr },
        { "try_create_from_language", reinterpret_cast<PyCFunction>(OcrEngine_TryCreateFromLanguage), METH_VARARGS | METH_STATIC, nullptr },
        { "try_create_from_user_profile_languages", reinterpret_cast<PyCFunction>(OcrEngine_TryCreateFromUserProfileLanguages), METH_VARARGS | METH_STATIC, nullptr },
        { "_assign_array_", _assign_array_OcrEngine, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_OcrEngine), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_OcrEngine[] = {
        { "recognizer_language", reinterpret_cast<getter>(OcrEngine_get_RecognizerLanguage), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_OcrEngine[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_OcrEngine) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_OcrEngine) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_OcrEngine) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_OcrEngine) },
        { },
    };

    static PyType_Spec type_spec_OcrEngine =
    {
        "_winsdk_Windows_Media_Ocr.OcrEngine",
        sizeof(py::wrapper::Windows::Media::Ocr::OcrEngine),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_OcrEngine
    };

    static PyGetSetDef getset_OcrEngine_Meta[] = {
        { "available_recognizer_languages", reinterpret_cast<getter>(OcrEngine_get_AvailableRecognizerLanguages), nullptr, nullptr, nullptr },
        { "max_image_dimension", reinterpret_cast<getter>(OcrEngine_get_MaxImageDimension), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot type_slots_OcrEngine_Meta[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_OcrEngine_Meta) },
        { }
    };

    static PyType_Spec type_spec_OcrEngine_Meta =
    {
        "_winsdk_Windows_Media_Ocr.OcrEngine_Meta",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_OcrEngine_Meta
    };

    // ----- OcrLine class --------------------
    static constexpr const char* const type_name_OcrLine = "OcrLine";

    static PyObject* _new_OcrLine(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_OcrLine);
        return nullptr;
    }

    static void _dealloc_OcrLine(py::wrapper::Windows::Media::Ocr::OcrLine* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* OcrLine_get_Text(py::wrapper::Windows::Media::Ocr::OcrLine* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Ocr.OcrLine", L"Text"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Text());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* OcrLine_get_Words(py::wrapper::Windows::Media::Ocr::OcrLine* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Ocr.OcrLine", L"Words"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Words());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_OcrLine(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::Ocr::OcrLine>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_OcrLine(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Ocr::OcrLine>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_OcrLine[] = {
        { "_assign_array_", _assign_array_OcrLine, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_OcrLine), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_OcrLine[] = {
        { "text", reinterpret_cast<getter>(OcrLine_get_Text), nullptr, nullptr, nullptr },
        { "words", reinterpret_cast<getter>(OcrLine_get_Words), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_OcrLine[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_OcrLine) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_OcrLine) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_OcrLine) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_OcrLine) },
        { },
    };

    static PyType_Spec type_spec_OcrLine =
    {
        "_winsdk_Windows_Media_Ocr.OcrLine",
        sizeof(py::wrapper::Windows::Media::Ocr::OcrLine),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_OcrLine
    };

    // ----- OcrResult class --------------------
    static constexpr const char* const type_name_OcrResult = "OcrResult";

    static PyObject* _new_OcrResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_OcrResult);
        return nullptr;
    }

    static void _dealloc_OcrResult(py::wrapper::Windows::Media::Ocr::OcrResult* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* OcrResult_get_Lines(py::wrapper::Windows::Media::Ocr::OcrResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Ocr.OcrResult", L"Lines"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Lines());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* OcrResult_get_Text(py::wrapper::Windows::Media::Ocr::OcrResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Ocr.OcrResult", L"Text"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Text());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* OcrResult_get_TextAngle(py::wrapper::Windows::Media::Ocr::OcrResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Ocr.OcrResult", L"TextAngle"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TextAngle());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_OcrResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::Ocr::OcrResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_OcrResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Ocr::OcrResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_OcrResult[] = {
        { "_assign_array_", _assign_array_OcrResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_OcrResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_OcrResult[] = {
        { "lines", reinterpret_cast<getter>(OcrResult_get_Lines), nullptr, nullptr, nullptr },
        { "text", reinterpret_cast<getter>(OcrResult_get_Text), nullptr, nullptr, nullptr },
        { "text_angle", reinterpret_cast<getter>(OcrResult_get_TextAngle), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_OcrResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_OcrResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_OcrResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_OcrResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_OcrResult) },
        { },
    };

    static PyType_Spec type_spec_OcrResult =
    {
        "_winsdk_Windows_Media_Ocr.OcrResult",
        sizeof(py::wrapper::Windows::Media::Ocr::OcrResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_OcrResult
    };

    // ----- OcrWord class --------------------
    static constexpr const char* const type_name_OcrWord = "OcrWord";

    static PyObject* _new_OcrWord(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_OcrWord);
        return nullptr;
    }

    static void _dealloc_OcrWord(py::wrapper::Windows::Media::Ocr::OcrWord* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* OcrWord_get_BoundingRect(py::wrapper::Windows::Media::Ocr::OcrWord* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Ocr.OcrWord", L"BoundingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* OcrWord_get_Text(py::wrapper::Windows::Media::Ocr::OcrWord* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Ocr.OcrWord", L"Text"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Text());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_OcrWord(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::Ocr::OcrWord>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_OcrWord(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Ocr::OcrWord>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_OcrWord[] = {
        { "_assign_array_", _assign_array_OcrWord, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_OcrWord), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_OcrWord[] = {
        { "bounding_rect", reinterpret_cast<getter>(OcrWord_get_BoundingRect), nullptr, nullptr, nullptr },
        { "text", reinterpret_cast<getter>(OcrWord_get_Text), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_OcrWord[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_OcrWord) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_OcrWord) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_OcrWord) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_OcrWord) },
        { },
    };

    static PyType_Spec type_spec_OcrWord =
    {
        "_winsdk_Windows_Media_Ocr.OcrWord",
        sizeof(py::wrapper::Windows::Media::Ocr::OcrWord),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_OcrWord
    };

    // ----- Windows.Media.Ocr Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Media::Ocr");

    static PyMethodDef module_methods[] = {
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_OcrEngine);
        Py_VISIT(state->type_OcrLine);
        Py_VISIT(state->type_OcrResult);
        Py_VISIT(state->type_OcrWord);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_OcrEngine);
        Py_CLEAR(state->type_OcrLine);
        Py_CLEAR(state->type_OcrResult);
        Py_CLEAR(state->type_OcrWord);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Media_Ocr",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Media::Ocr

PyMODINIT_FUNC PyInit__winsdk_Windows_Media_Ocr(void) noexcept
{
    using namespace py::cpp::Windows::Media::Ocr;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    py::pyobj_handle type_OcrEngine_Meta{PyType_FromSpec(&type_spec_OcrEngine_Meta)};
    if (!type_OcrEngine_Meta)
    {
        return nullptr;
    }

    state->type_OcrEngine = py::register_python_type(module.get(), type_name_OcrEngine, &type_spec_OcrEngine, bases.get(), reinterpret_cast<PyTypeObject*>(type_OcrEngine_Meta.get()));
    if (!state->type_OcrEngine)
    {
        return nullptr;
    }

    state->type_OcrLine = py::register_python_type(module.get(), type_name_OcrLine, &type_spec_OcrLine, bases.get(), nullptr);
    if (!state->type_OcrLine)
    {
        return nullptr;
    }

    state->type_OcrResult = py::register_python_type(module.get(), type_name_OcrResult, &type_spec_OcrResult, bases.get(), nullptr);
    if (!state->type_OcrResult)
    {
        return nullptr;
    }

    state->type_OcrWord = py::register_python_type(module.get(), type_name_OcrWord, &type_spec_OcrWord, bases.get(), nullptr);
    if (!state->type_OcrWord)
    {
        return nullptr;
    }


    return module.detach();
}

PyTypeObject* py::winrt_type<winrt::Windows::Media::Ocr::OcrEngine>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Media::Ocr;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Media::Ocr");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_OcrEngine;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Media::Ocr::OcrEngine is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Media::Ocr::OcrLine>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Media::Ocr;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Media::Ocr");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_OcrLine;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Media::Ocr::OcrLine is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Media::Ocr::OcrResult>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Media::Ocr;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Media::Ocr");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_OcrResult;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Media::Ocr::OcrResult is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Media::Ocr::OcrWord>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Media::Ocr;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Media::Ocr");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_OcrWord;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Media::Ocr::OcrWord is not registered");
        return nullptr;
    }

    return python_type;
}
