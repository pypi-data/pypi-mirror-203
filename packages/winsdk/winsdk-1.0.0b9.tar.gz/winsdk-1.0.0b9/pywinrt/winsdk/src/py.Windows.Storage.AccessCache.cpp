// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.Storage.AccessCache.h"


PyObject* py::converter<winrt::Windows::Storage::AccessCache::AccessListEntry>::convert(winrt::Windows::Storage::AccessCache::AccessListEntry instance) noexcept
{
    auto type = py::get_python_type<winrt::Windows::Storage::AccessCache::AccessListEntry>();
    if (!type)
    {
        return nullptr;
    }

    return py::wrap_struct(instance, type);
}
winrt::Windows::Storage::AccessCache::AccessListEntry py::converter<winrt::Windows::Storage::AccessCache::AccessListEntry>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    auto type =  py::get_python_type<winrt::Windows::Storage::AccessCache::AccessListEntry>();

    if (!type) {
        throw python_exception();
    }

    if (Py_TYPE(obj) == type)
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Storage::AccessCache::AccessListEntry>*>(obj)->obj;
    }

    PyErr_SetString(PyExc_TypeError, "expecting winrt::Windows::Storage::AccessCache::AccessListEntry");
    throw python_exception();
}

namespace py::cpp::Windows::Storage::AccessCache
{
    struct module_state
    {
        PyObject* type_AccessCacheOptions;
        PyObject* type_RecentStorageItemVisibility;
        PyTypeObject* type_AccessListEntryView;
        PyTypeObject* type_ItemRemovedEventArgs;
        PyTypeObject* type_StorageApplicationPermissions;
        PyTypeObject* type_StorageItemAccessList;
        PyTypeObject* type_StorageItemMostRecentlyUsedList;
        PyTypeObject* type_IStorageItemAccessList;
        PyTypeObject* type_AccessListEntry;
    };

    static PyObject* register_AccessCacheOptions(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_AccessCacheOptions)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_AccessCacheOptions = type;
        Py_INCREF(state->type_AccessCacheOptions);


        Py_RETURN_NONE;
    }

    static PyObject* register_RecentStorageItemVisibility(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_RecentStorageItemVisibility)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_RecentStorageItemVisibility = type;
        Py_INCREF(state->type_RecentStorageItemVisibility);


        Py_RETURN_NONE;
    }

    // ----- AccessListEntryView class --------------------
    static constexpr const char* const type_name_AccessListEntryView = "AccessListEntryView";

    static PyObject* _new_AccessListEntryView(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_AccessListEntryView);
        return nullptr;
    }

    static void _dealloc_AccessListEntryView(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AccessListEntryView_First(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.AccessListEntryView", L"First", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AccessListEntryView_GetAt(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.AccessListEntryView", L"GetAt", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetAt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AccessListEntryView_GetMany(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.AccessListEntryView", L"GetMany", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<py::pybuf_view<winrt::Windows::Storage::AccessCache::AccessListEntry, true>>(args, 1);

                return py::convert(self->obj.GetMany(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AccessListEntryView_IndexOf(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.AccessListEntryView", L"IndexOf", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessListEntry>(args, 0);
                uint32_t param1 {  };

                auto return_value = self->obj.IndexOf(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AccessListEntryView_get_Size(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.AccessCache.AccessListEntryView", L"Size"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AccessListEntryView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::AccessCache::AccessListEntryView>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AccessListEntryView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::AccessCache::AccessListEntryView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_AccessListEntryView(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self) noexcept
    {
        try
        {
            return py::convert(self->obj.First());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static Py_ssize_t _seq_length_AccessListEntryView(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _seq_item_AccessListEntryView(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self, Py_ssize_t i) noexcept
    {
        try
        {
            return py::convert(self->obj.GetAt(static_cast<uint32_t>(i)));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _seq_subscript_AccessListEntryView(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self, PyObject* slice) noexcept
    {
        try
        {
            if (PyIndex_Check(slice))
            {
                pyobj_handle index{PyNumber_Index(slice)};

                if (!index)
                {
                    return nullptr;
                }

                auto i = PyNumber_AsSsize_t(index.get(), PyExc_IndexError);

                if (i == -1 && PyErr_Occurred())
                {
                    return nullptr;
                }

                return _seq_item_AccessListEntryView(self, i);
            }

            if (!PySlice_Check(slice))
            {
                PyErr_Format(
                    PyExc_TypeError,
                    "indicies must be integers, not '%s'",
                    Py_TYPE(slice)->tp_name);
            }

            Py_ssize_t start, stop, step, length;

            if (PySlice_GetIndicesEx(
                    slice, self->obj.Size(), &start, &stop, &step, &length)
                < 0)
            {
                return nullptr;
            }

            if (step != 1)
            {
                PyErr_SetString(
                    PyExc_NotImplementedError,
                    "slices with step other than 1 are not implemented");
                return nullptr;
            }

            winrt::com_array<winrt::Windows::Storage::AccessCache::AccessListEntry> items(length, empty_instance<winrt::Windows::Storage::AccessCache::AccessListEntry>::get());

            auto count = self->obj.GetMany(start, items);

            if (count != length)
            {
                PyErr_Format(
                    PyExc_RuntimeError,
                    "returned count %d did not match requested length %zd",
                    count,
                    length);
                return nullptr;
            }

            return convert(items);}
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AccessListEntryView[] = {
        { "first", reinterpret_cast<PyCFunction>(AccessListEntryView_First), METH_VARARGS, nullptr },
        { "get_at", reinterpret_cast<PyCFunction>(AccessListEntryView_GetAt), METH_VARARGS, nullptr },
        { "get_many", reinterpret_cast<PyCFunction>(AccessListEntryView_GetMany), METH_VARARGS, nullptr },
        { "index_of", reinterpret_cast<PyCFunction>(AccessListEntryView_IndexOf), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_AccessListEntryView, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AccessListEntryView), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AccessListEntryView[] = {
        { "size", reinterpret_cast<getter>(AccessListEntryView_get_Size), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AccessListEntryView[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AccessListEntryView) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AccessListEntryView) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AccessListEntryView) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AccessListEntryView) },
        { Py_tp_iter, reinterpret_cast<void*>(_iterator_AccessListEntryView) },
        { Py_sq_length, reinterpret_cast<void*>(_seq_length_AccessListEntryView) },
        { Py_sq_item, reinterpret_cast<void*>(_seq_item_AccessListEntryView) },
        { Py_mp_subscript, reinterpret_cast<void*>(_seq_subscript_AccessListEntryView) },
        { },
    };

    static PyType_Spec type_spec_AccessListEntryView =
    {
        "_winsdk_Windows_Storage_AccessCache.AccessListEntryView",
        sizeof(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AccessListEntryView
    };

    // ----- ItemRemovedEventArgs class --------------------
    static constexpr const char* const type_name_ItemRemovedEventArgs = "ItemRemovedEventArgs";

    static PyObject* _new_ItemRemovedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_ItemRemovedEventArgs);
        return nullptr;
    }

    static void _dealloc_ItemRemovedEventArgs(py::wrapper::Windows::Storage::AccessCache::ItemRemovedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ItemRemovedEventArgs_get_RemovedEntry(py::wrapper::Windows::Storage::AccessCache::ItemRemovedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.AccessCache.ItemRemovedEventArgs", L"RemovedEntry"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RemovedEntry());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ItemRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::AccessCache::ItemRemovedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ItemRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::AccessCache::ItemRemovedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ItemRemovedEventArgs[] = {
        { "_assign_array_", _assign_array_ItemRemovedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ItemRemovedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ItemRemovedEventArgs[] = {
        { "removed_entry", reinterpret_cast<getter>(ItemRemovedEventArgs_get_RemovedEntry), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ItemRemovedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ItemRemovedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ItemRemovedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ItemRemovedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ItemRemovedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_ItemRemovedEventArgs =
    {
        "_winsdk_Windows_Storage_AccessCache.ItemRemovedEventArgs",
        sizeof(py::wrapper::Windows::Storage::AccessCache::ItemRemovedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ItemRemovedEventArgs
    };

    // ----- StorageApplicationPermissions class --------------------
    static constexpr const char* const type_name_StorageApplicationPermissions = "StorageApplicationPermissions";

    static PyObject* _new_StorageApplicationPermissions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_StorageApplicationPermissions);
        return nullptr;
    }

    static PyObject* StorageApplicationPermissions_GetFutureAccessListForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageApplicationPermissions", L"GetFutureAccessListForUser", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::Storage::AccessCache::StorageApplicationPermissions::GetFutureAccessListForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageApplicationPermissions_GetMostRecentlyUsedListForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageApplicationPermissions", L"GetMostRecentlyUsedListForUser", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::Storage::AccessCache::StorageApplicationPermissions::GetMostRecentlyUsedListForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageApplicationPermissions_get_FutureAccessList(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.AccessCache.StorageApplicationPermissions", L"FutureAccessList"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Storage::AccessCache::StorageApplicationPermissions::FutureAccessList());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorageApplicationPermissions_get_MostRecentlyUsedList(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.AccessCache.StorageApplicationPermissions", L"MostRecentlyUsedList"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Storage::AccessCache::StorageApplicationPermissions::MostRecentlyUsedList());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StorageApplicationPermissions[] = {
        { "get_future_access_list_for_user", reinterpret_cast<PyCFunction>(StorageApplicationPermissions_GetFutureAccessListForUser), METH_VARARGS | METH_STATIC, nullptr },
        { "get_most_recently_used_list_for_user", reinterpret_cast<PyCFunction>(StorageApplicationPermissions_GetMostRecentlyUsedListForUser), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_StorageApplicationPermissions[] = {
        { }
    };

    static PyType_Slot _type_slots_StorageApplicationPermissions[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_StorageApplicationPermissions) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_StorageApplicationPermissions) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_StorageApplicationPermissions) },
        { },
    };

    static PyType_Spec type_spec_StorageApplicationPermissions =
    {
        "_winsdk_Windows_Storage_AccessCache.StorageApplicationPermissions",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StorageApplicationPermissions
    };

    static PyGetSetDef getset_StorageApplicationPermissions_Meta[] = {
        { "future_access_list", reinterpret_cast<getter>(StorageApplicationPermissions_get_FutureAccessList), nullptr, nullptr, nullptr },
        { "most_recently_used_list", reinterpret_cast<getter>(StorageApplicationPermissions_get_MostRecentlyUsedList), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot type_slots_StorageApplicationPermissions_Meta[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_StorageApplicationPermissions_Meta) },
        { }
    };

    static PyType_Spec type_spec_StorageApplicationPermissions_Meta =
    {
        "_winsdk_Windows_Storage_AccessCache.StorageApplicationPermissions_Meta",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_StorageApplicationPermissions_Meta
    };

    // ----- StorageItemAccessList class --------------------
    static constexpr const char* const type_name_StorageItemAccessList = "StorageItemAccessList";

    static PyObject* _new_StorageItemAccessList(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_StorageItemAccessList);
        return nullptr;
    }

    static void _dealloc_StorageItemAccessList(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* StorageItemAccessList_Add(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"Add", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);

                return py::convert(self->obj.Add(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"Add", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.Add(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_AddOrReplace(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"AddOrReplace", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);

                self->obj.AddOrReplace(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"AddOrReplace", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                self->obj.AddOrReplace(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_CheckAccess(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"CheckAccess", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);

                return py::convert(self->obj.CheckAccess(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_Clear(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"Clear", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Clear();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_ContainsItem(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"ContainsItem", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ContainsItem(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_GetFileAsync(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"GetFileAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetFileAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"GetFileAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetFileAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_GetFolderAsync(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"GetFolderAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetFolderAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"GetFolderAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetFolderAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_GetItemAsync(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"GetItemAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetItemAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"GetItemAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetItemAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_Remove(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"Remove", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Remove(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_get_Entries(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"Entries"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Entries());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_get_MaximumItemsAllowed(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"MaximumItemsAllowed"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MaximumItemsAllowed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_StorageItemAccessList(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::AccessCache::StorageItemAccessList>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_StorageItemAccessList(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::AccessCache::StorageItemAccessList>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StorageItemAccessList[] = {
        { "add", reinterpret_cast<PyCFunction>(StorageItemAccessList_Add), METH_VARARGS, nullptr },
        { "add_or_replace", reinterpret_cast<PyCFunction>(StorageItemAccessList_AddOrReplace), METH_VARARGS, nullptr },
        { "check_access", reinterpret_cast<PyCFunction>(StorageItemAccessList_CheckAccess), METH_VARARGS, nullptr },
        { "clear", reinterpret_cast<PyCFunction>(StorageItemAccessList_Clear), METH_VARARGS, nullptr },
        { "contains_item", reinterpret_cast<PyCFunction>(StorageItemAccessList_ContainsItem), METH_VARARGS, nullptr },
        { "get_file_async", reinterpret_cast<PyCFunction>(StorageItemAccessList_GetFileAsync), METH_VARARGS, nullptr },
        { "get_folder_async", reinterpret_cast<PyCFunction>(StorageItemAccessList_GetFolderAsync), METH_VARARGS, nullptr },
        { "get_item_async", reinterpret_cast<PyCFunction>(StorageItemAccessList_GetItemAsync), METH_VARARGS, nullptr },
        { "remove", reinterpret_cast<PyCFunction>(StorageItemAccessList_Remove), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_StorageItemAccessList, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_StorageItemAccessList), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_StorageItemAccessList[] = {
        { "entries", reinterpret_cast<getter>(StorageItemAccessList_get_Entries), nullptr, nullptr, nullptr },
        { "maximum_items_allowed", reinterpret_cast<getter>(StorageItemAccessList_get_MaximumItemsAllowed), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_StorageItemAccessList[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_StorageItemAccessList) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_StorageItemAccessList) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_StorageItemAccessList) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_StorageItemAccessList) },
        { },
    };

    static PyType_Spec type_spec_StorageItemAccessList =
    {
        "_winsdk_Windows_Storage_AccessCache.StorageItemAccessList",
        sizeof(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StorageItemAccessList
    };

    // ----- StorageItemMostRecentlyUsedList class --------------------
    static constexpr const char* const type_name_StorageItemMostRecentlyUsedList = "StorageItemMostRecentlyUsedList";

    static PyObject* _new_StorageItemMostRecentlyUsedList(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_StorageItemMostRecentlyUsedList);
        return nullptr;
    }

    static void _dealloc_StorageItemMostRecentlyUsedList(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* StorageItemMostRecentlyUsedList_Add(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"Add", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);

                return py::convert(self->obj.Add(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"Add", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.Add(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"Add", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Storage::AccessCache::RecentStorageItemVisibility>(args, 2);

                return py::convert(self->obj.Add(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_AddOrReplace(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"AddOrReplace", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);

                self->obj.AddOrReplace(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"AddOrReplace", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                self->obj.AddOrReplace(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"AddOrReplace", 4))
            {
                py::set_arg_count_version_error(4);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Storage::AccessCache::RecentStorageItemVisibility>(args, 3);

                self->obj.AddOrReplace(param0, param1, param2, param3);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_CheckAccess(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"CheckAccess", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);

                return py::convert(self->obj.CheckAccess(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_Clear(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"Clear", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Clear();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_ContainsItem(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"ContainsItem", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ContainsItem(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_GetFileAsync(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"GetFileAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetFileAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"GetFileAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetFileAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_GetFolderAsync(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"GetFolderAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetFolderAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"GetFolderAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetFolderAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_GetItemAsync(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"GetItemAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetItemAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"GetItemAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetItemAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_Remove(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"Remove", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Remove(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_get_Entries(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"Entries"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Entries());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_get_MaximumItemsAllowed(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"MaximumItemsAllowed"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MaximumItemsAllowed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_add_ItemRemoved(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"ItemRemoved"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList, winrt::Windows::Storage::AccessCache::ItemRemovedEventArgs>>(arg);

            return py::convert(self->obj.ItemRemoved(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_remove_ItemRemoved(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"ItemRemoved"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ItemRemoved(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_StorageItemMostRecentlyUsedList(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_StorageItemMostRecentlyUsedList(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StorageItemMostRecentlyUsedList[] = {
        { "add", reinterpret_cast<PyCFunction>(StorageItemMostRecentlyUsedList_Add), METH_VARARGS, nullptr },
        { "add_or_replace", reinterpret_cast<PyCFunction>(StorageItemMostRecentlyUsedList_AddOrReplace), METH_VARARGS, nullptr },
        { "check_access", reinterpret_cast<PyCFunction>(StorageItemMostRecentlyUsedList_CheckAccess), METH_VARARGS, nullptr },
        { "clear", reinterpret_cast<PyCFunction>(StorageItemMostRecentlyUsedList_Clear), METH_VARARGS, nullptr },
        { "contains_item", reinterpret_cast<PyCFunction>(StorageItemMostRecentlyUsedList_ContainsItem), METH_VARARGS, nullptr },
        { "get_file_async", reinterpret_cast<PyCFunction>(StorageItemMostRecentlyUsedList_GetFileAsync), METH_VARARGS, nullptr },
        { "get_folder_async", reinterpret_cast<PyCFunction>(StorageItemMostRecentlyUsedList_GetFolderAsync), METH_VARARGS, nullptr },
        { "get_item_async", reinterpret_cast<PyCFunction>(StorageItemMostRecentlyUsedList_GetItemAsync), METH_VARARGS, nullptr },
        { "remove", reinterpret_cast<PyCFunction>(StorageItemMostRecentlyUsedList_Remove), METH_VARARGS, nullptr },
        { "add_item_removed", reinterpret_cast<PyCFunction>(StorageItemMostRecentlyUsedList_add_ItemRemoved), METH_O, nullptr },
        { "remove_item_removed", reinterpret_cast<PyCFunction>(StorageItemMostRecentlyUsedList_remove_ItemRemoved), METH_O, nullptr },
        { "_assign_array_", _assign_array_StorageItemMostRecentlyUsedList, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_StorageItemMostRecentlyUsedList), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_StorageItemMostRecentlyUsedList[] = {
        { "entries", reinterpret_cast<getter>(StorageItemMostRecentlyUsedList_get_Entries), nullptr, nullptr, nullptr },
        { "maximum_items_allowed", reinterpret_cast<getter>(StorageItemMostRecentlyUsedList_get_MaximumItemsAllowed), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_StorageItemMostRecentlyUsedList[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_StorageItemMostRecentlyUsedList) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_StorageItemMostRecentlyUsedList) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_StorageItemMostRecentlyUsedList) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_StorageItemMostRecentlyUsedList) },
        { },
    };

    static PyType_Spec type_spec_StorageItemMostRecentlyUsedList =
    {
        "_winsdk_Windows_Storage_AccessCache.StorageItemMostRecentlyUsedList",
        sizeof(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StorageItemMostRecentlyUsedList
    };

    // ----- IStorageItemAccessList interface --------------------
    static constexpr const char* const type_name_IStorageItemAccessList = "IStorageItemAccessList";

    static PyObject* _new_IStorageItemAccessList(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */) noexcept
    {
        py::set_invalid_activation_error(type_name_IStorageItemAccessList);
        return nullptr;
    }

    static void _dealloc_IStorageItemAccessList(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IStorageItemAccessList_Add(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"Add", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);

                return py::convert(self->obj.Add(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"Add", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.Add(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_AddOrReplace(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"AddOrReplace", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);

                self->obj.AddOrReplace(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"AddOrReplace", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                self->obj.AddOrReplace(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_CheckAccess(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"CheckAccess", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);

                return py::convert(self->obj.CheckAccess(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_Clear(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"Clear", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Clear();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_ContainsItem(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"ContainsItem", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ContainsItem(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_GetFileAsync(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"GetFileAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetFileAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"GetFileAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetFileAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_GetFolderAsync(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"GetFolderAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetFolderAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"GetFolderAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetFolderAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_GetItemAsync(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"GetItemAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetItemAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"GetItemAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetItemAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_Remove(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"Remove", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Remove(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_get_Entries(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"Entries"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Entries());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_get_MaximumItemsAllowed(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"MaximumItemsAllowed"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MaximumItemsAllowed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_IStorageItemAccessList(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::AccessCache::IStorageItemAccessList>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IStorageItemAccessList(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::AccessCache::IStorageItemAccessList>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IStorageItemAccessList[] = {
        { "add", reinterpret_cast<PyCFunction>(IStorageItemAccessList_Add), METH_VARARGS, nullptr },
        { "add_or_replace", reinterpret_cast<PyCFunction>(IStorageItemAccessList_AddOrReplace), METH_VARARGS, nullptr },
        { "check_access", reinterpret_cast<PyCFunction>(IStorageItemAccessList_CheckAccess), METH_VARARGS, nullptr },
        { "clear", reinterpret_cast<PyCFunction>(IStorageItemAccessList_Clear), METH_VARARGS, nullptr },
        { "contains_item", reinterpret_cast<PyCFunction>(IStorageItemAccessList_ContainsItem), METH_VARARGS, nullptr },
        { "get_file_async", reinterpret_cast<PyCFunction>(IStorageItemAccessList_GetFileAsync), METH_VARARGS, nullptr },
        { "get_folder_async", reinterpret_cast<PyCFunction>(IStorageItemAccessList_GetFolderAsync), METH_VARARGS, nullptr },
        { "get_item_async", reinterpret_cast<PyCFunction>(IStorageItemAccessList_GetItemAsync), METH_VARARGS, nullptr },
        { "remove", reinterpret_cast<PyCFunction>(IStorageItemAccessList_Remove), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_IStorageItemAccessList, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IStorageItemAccessList), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IStorageItemAccessList[] = {
        { "entries", reinterpret_cast<getter>(IStorageItemAccessList_get_Entries), nullptr, nullptr, nullptr },
        { "maximum_items_allowed", reinterpret_cast<getter>(IStorageItemAccessList_get_MaximumItemsAllowed), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_IStorageItemAccessList[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_IStorageItemAccessList) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IStorageItemAccessList) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IStorageItemAccessList) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IStorageItemAccessList) },
        { },
    };

    static PyType_Spec type_spec_IStorageItemAccessList =
    {
        "_winsdk_Windows_Storage_AccessCache.IStorageItemAccessList",
        sizeof(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IStorageItemAccessList
    };

    // ----- AccessListEntry struct --------------------
    static constexpr const char* const type_name_AccessListEntry = "AccessListEntry";

    PyObject* _new_AccessListEntry(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::Storage::AccessCache::AccessListEntry return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        winrt::hstring _Token{};
        winrt::hstring _Metadata{};

        static const char* kwlist[] = {"token", "metadata", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "uu", const_cast<char**>(kwlist), &_Token, &_Metadata))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::Storage::AccessCache::AccessListEntry return_value{ _Token, _Metadata };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_AccessListEntry(py::wrapper::Windows::Storage::AccessCache::AccessListEntry* self) noexcept
    {
    }

    static PyObject* AccessListEntry_get_Token(py::wrapper::Windows::Storage::AccessCache::AccessListEntry* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Token);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AccessListEntry_set_Token(py::wrapper::Windows::Storage::AccessCache::AccessListEntry* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.Token = py::converter<winrt::hstring>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AccessListEntry_get_Metadata(py::wrapper::Windows::Storage::AccessCache::AccessListEntry* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Metadata);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AccessListEntry_set_Metadata(py::wrapper::Windows::Storage::AccessCache::AccessListEntry* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.Metadata = py::converter<winrt::hstring>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_AccessListEntry[] = {
        { "token", reinterpret_cast<getter>(AccessListEntry_get_Token), reinterpret_cast<setter>(AccessListEntry_set_Token), nullptr, nullptr },
        { "metadata", reinterpret_cast<getter>(AccessListEntry_get_Metadata), reinterpret_cast<setter>(AccessListEntry_set_Metadata), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AccessListEntry[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AccessListEntry) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AccessListEntry) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AccessListEntry) },
        { },
    };

    static PyType_Spec type_spec_AccessListEntry =
    {
        "_winsdk_Windows_Storage_AccessCache.AccessListEntry",
        sizeof(py::wrapper::Windows::Storage::AccessCache::AccessListEntry),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AccessListEntry
    };

    // ----- Windows.Storage.AccessCache Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Storage::AccessCache");

    static PyMethodDef module_methods[] = {
        {"_register_AccessCacheOptions", register_AccessCacheOptions, METH_O, "registers type"},
        {"_register_RecentStorageItemVisibility", register_RecentStorageItemVisibility, METH_O, "registers type"},
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_AccessCacheOptions);
        Py_VISIT(state->type_RecentStorageItemVisibility);
        Py_VISIT(state->type_AccessListEntryView);
        Py_VISIT(state->type_ItemRemovedEventArgs);
        Py_VISIT(state->type_StorageApplicationPermissions);
        Py_VISIT(state->type_StorageItemAccessList);
        Py_VISIT(state->type_StorageItemMostRecentlyUsedList);
        Py_VISIT(state->type_IStorageItemAccessList);
        Py_VISIT(state->type_AccessListEntry);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_AccessCacheOptions);
        Py_CLEAR(state->type_RecentStorageItemVisibility);
        Py_CLEAR(state->type_AccessListEntryView);
        Py_CLEAR(state->type_ItemRemovedEventArgs);
        Py_CLEAR(state->type_StorageApplicationPermissions);
        Py_CLEAR(state->type_StorageItemAccessList);
        Py_CLEAR(state->type_StorageItemMostRecentlyUsedList);
        Py_CLEAR(state->type_IStorageItemAccessList);
        Py_CLEAR(state->type_AccessListEntry);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Storage_AccessCache",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Storage::AccessCache

PyMODINIT_FUNC PyInit__winsdk_Windows_Storage_AccessCache(void) noexcept
{
    using namespace py::cpp::Windows::Storage::AccessCache;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_AccessListEntryView = py::register_python_type(module.get(), type_name_AccessListEntryView, &type_spec_AccessListEntryView, sequence_bases.get(), nullptr);
    if (!state->type_AccessListEntryView)
    {
        return nullptr;
    }

    state->type_ItemRemovedEventArgs = py::register_python_type(module.get(), type_name_ItemRemovedEventArgs, &type_spec_ItemRemovedEventArgs, bases.get(), nullptr);
    if (!state->type_ItemRemovedEventArgs)
    {
        return nullptr;
    }

    py::pyobj_handle type_StorageApplicationPermissions_Meta{PyType_FromSpec(&type_spec_StorageApplicationPermissions_Meta)};
    if (!type_StorageApplicationPermissions_Meta)
    {
        return nullptr;
    }

    state->type_StorageApplicationPermissions = py::register_python_type(module.get(), type_name_StorageApplicationPermissions, &type_spec_StorageApplicationPermissions, nullptr, reinterpret_cast<PyTypeObject*>(type_StorageApplicationPermissions_Meta.get()));
    if (!state->type_StorageApplicationPermissions)
    {
        return nullptr;
    }

    state->type_StorageItemAccessList = py::register_python_type(module.get(), type_name_StorageItemAccessList, &type_spec_StorageItemAccessList, bases.get(), nullptr);
    if (!state->type_StorageItemAccessList)
    {
        return nullptr;
    }

    state->type_StorageItemMostRecentlyUsedList = py::register_python_type(module.get(), type_name_StorageItemMostRecentlyUsedList, &type_spec_StorageItemMostRecentlyUsedList, bases.get(), nullptr);
    if (!state->type_StorageItemMostRecentlyUsedList)
    {
        return nullptr;
    }

    state->type_IStorageItemAccessList = py::register_python_type(module.get(), type_name_IStorageItemAccessList, &type_spec_IStorageItemAccessList, bases.get(), nullptr);
    if (!state->type_IStorageItemAccessList)
    {
        return nullptr;
    }

    state->type_AccessListEntry = py::register_python_type(module.get(), type_name_AccessListEntry, &type_spec_AccessListEntry, bases.get(), nullptr);
    if (!state->type_AccessListEntry)
    {
        return nullptr;
    }


    return module.detach();
}

PyObject* py::py_type<winrt::Windows::Storage::AccessCache::AccessCacheOptions>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Storage::AccessCache;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Storage::AccessCache");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_AccessCacheOptions;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Storage::AccessCache::AccessCacheOptions is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::Storage::AccessCache::RecentStorageItemVisibility>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Storage::AccessCache;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Storage::AccessCache");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_RecentStorageItemVisibility;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Storage::AccessCache::RecentStorageItemVisibility is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Storage::AccessCache::AccessListEntryView>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Storage::AccessCache;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Storage::AccessCache");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_AccessListEntryView;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Storage::AccessCache::AccessListEntryView is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Storage::AccessCache::ItemRemovedEventArgs>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Storage::AccessCache;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Storage::AccessCache");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_ItemRemovedEventArgs;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Storage::AccessCache::ItemRemovedEventArgs is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Storage::AccessCache::StorageApplicationPermissions>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Storage::AccessCache;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Storage::AccessCache");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_StorageApplicationPermissions;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Storage::AccessCache::StorageApplicationPermissions is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Storage::AccessCache::StorageItemAccessList>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Storage::AccessCache;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Storage::AccessCache");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_StorageItemAccessList;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Storage::AccessCache::StorageItemAccessList is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Storage::AccessCache;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Storage::AccessCache");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_StorageItemMostRecentlyUsedList;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Storage::AccessCache::IStorageItemAccessList>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Storage::AccessCache;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Storage::AccessCache");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_IStorageItemAccessList;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Storage::AccessCache::IStorageItemAccessList is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Storage::AccessCache::AccessListEntry>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Storage::AccessCache;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Storage::AccessCache");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_AccessListEntry;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Storage::AccessCache::AccessListEntry is not registered");
        return nullptr;
    }

    return python_type;
}
