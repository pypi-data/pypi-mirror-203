// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.ApplicationModel.Store.Preview.h"


namespace py::cpp::Windows::ApplicationModel::Store::Preview
{
    struct module_state
    {
        PyObject* type_DeliveryOptimizationDownloadMode;
        PyObject* type_DeliveryOptimizationDownloadModeSource;
        PyObject* type_StoreLogOptions;
        PyObject* type_StorePreviewProductPurchaseStatus;
        PyObject* type_StoreSystemFeature;
        PyTypeObject* type_DeliveryOptimizationSettings;
        PyTypeObject* type_StoreConfiguration;
        PyTypeObject* type_StoreHardwareManufacturerInfo;
        PyTypeObject* type_StorePreview;
        PyTypeObject* type_StorePreviewProductInfo;
        PyTypeObject* type_StorePreviewPurchaseResults;
        PyTypeObject* type_StorePreviewSkuInfo;
        PyTypeObject* type_WebAuthenticationCoreManagerHelper;
    };

    static PyObject* register_DeliveryOptimizationDownloadMode(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_DeliveryOptimizationDownloadMode)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_DeliveryOptimizationDownloadMode = type;
        Py_INCREF(state->type_DeliveryOptimizationDownloadMode);


        Py_RETURN_NONE;
    }

    static PyObject* register_DeliveryOptimizationDownloadModeSource(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_DeliveryOptimizationDownloadModeSource)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_DeliveryOptimizationDownloadModeSource = type;
        Py_INCREF(state->type_DeliveryOptimizationDownloadModeSource);


        Py_RETURN_NONE;
    }

    static PyObject* register_StoreLogOptions(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_StoreLogOptions)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_StoreLogOptions = type;
        Py_INCREF(state->type_StoreLogOptions);


        Py_RETURN_NONE;
    }

    static PyObject* register_StorePreviewProductPurchaseStatus(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_StorePreviewProductPurchaseStatus)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_StorePreviewProductPurchaseStatus = type;
        Py_INCREF(state->type_StorePreviewProductPurchaseStatus);


        Py_RETURN_NONE;
    }

    static PyObject* register_StoreSystemFeature(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_StoreSystemFeature)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_StoreSystemFeature = type;
        Py_INCREF(state->type_StoreSystemFeature);


        Py_RETURN_NONE;
    }

    // ----- DeliveryOptimizationSettings class --------------------
    static constexpr const char* const type_name_DeliveryOptimizationSettings = "DeliveryOptimizationSettings";

    static PyObject* _new_DeliveryOptimizationSettings(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_DeliveryOptimizationSettings);
        return nullptr;
    }

    static void _dealloc_DeliveryOptimizationSettings(py::wrapper::Windows::ApplicationModel::Store::Preview::DeliveryOptimizationSettings* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DeliveryOptimizationSettings_GetCurrentSettings(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.DeliveryOptimizationSettings", L"GetCurrentSettings", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::DeliveryOptimizationSettings::GetCurrentSettings());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DeliveryOptimizationSettings_get_DownloadMode(py::wrapper::Windows::ApplicationModel::Store::Preview::DeliveryOptimizationSettings* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.DeliveryOptimizationSettings", L"DownloadMode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DownloadMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DeliveryOptimizationSettings_get_DownloadModeSource(py::wrapper::Windows::ApplicationModel::Store::Preview::DeliveryOptimizationSettings* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.DeliveryOptimizationSettings", L"DownloadModeSource"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DownloadModeSource());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_DeliveryOptimizationSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Store::Preview::DeliveryOptimizationSettings>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DeliveryOptimizationSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::Preview::DeliveryOptimizationSettings>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DeliveryOptimizationSettings[] = {
        { "get_current_settings", reinterpret_cast<PyCFunction>(DeliveryOptimizationSettings_GetCurrentSettings), METH_VARARGS | METH_STATIC, nullptr },
        { "_assign_array_", _assign_array_DeliveryOptimizationSettings, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DeliveryOptimizationSettings), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_DeliveryOptimizationSettings[] = {
        { "download_mode", reinterpret_cast<getter>(DeliveryOptimizationSettings_get_DownloadMode), nullptr, nullptr, nullptr },
        { "download_mode_source", reinterpret_cast<getter>(DeliveryOptimizationSettings_get_DownloadModeSource), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_DeliveryOptimizationSettings[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DeliveryOptimizationSettings) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DeliveryOptimizationSettings) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DeliveryOptimizationSettings) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DeliveryOptimizationSettings) },
        { },
    };

    static PyType_Spec type_spec_DeliveryOptimizationSettings =
    {
        "_winsdk_Windows_ApplicationModel_Store_Preview.DeliveryOptimizationSettings",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::Preview::DeliveryOptimizationSettings),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DeliveryOptimizationSettings
    };

    // ----- StoreConfiguration class --------------------
    static constexpr const char* const type_name_StoreConfiguration = "StoreConfiguration";

    static PyObject* _new_StoreConfiguration(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_StoreConfiguration);
        return nullptr;
    }

    static PyObject* StoreConfiguration_FilterUnsupportedSystemFeaturesAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"FilterUnsupportedSystemFeaturesAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::ApplicationModel::Store::Preview::StoreSystemFeature>>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::FilterUnsupportedSystemFeaturesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_GetEnterpriseStoreWebAccountId(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"GetEnterpriseStoreWebAccountId", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::GetEnterpriseStoreWebAccountId());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_GetEnterpriseStoreWebAccountIdForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"GetEnterpriseStoreWebAccountIdForUser", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::GetEnterpriseStoreWebAccountIdForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_GetPurchasePromptingPolicyForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"GetPurchasePromptingPolicyForUser", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::GetPurchasePromptingPolicyForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_GetStoreLogDataAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"GetStoreLogDataAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Store::Preview::StoreLogOptions>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::GetStoreLogDataAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_GetStoreWebAccountId(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"GetStoreWebAccountId", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::GetStoreWebAccountId());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_GetStoreWebAccountIdForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"GetStoreWebAccountIdForUser", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::GetStoreWebAccountIdForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_HasStoreWebAccount(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"HasStoreWebAccount", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::HasStoreWebAccount());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_HasStoreWebAccountForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"HasStoreWebAccountForUser", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::HasStoreWebAccountForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_IsPinToDesktopSupported(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"IsPinToDesktopSupported", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::IsPinToDesktopSupported());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_IsPinToStartSupported(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"IsPinToStartSupported", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::IsPinToStartSupported());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_IsPinToTaskbarSupported(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"IsPinToTaskbarSupported", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::IsPinToTaskbarSupported());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_IsStoreWebAccountId(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"IsStoreWebAccountId", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::IsStoreWebAccountId(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_IsStoreWebAccountIdForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"IsStoreWebAccountIdForUser", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::IsStoreWebAccountIdForUser(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_PinToDesktop(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"PinToDesktop", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::PinToDesktop(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_PinToDesktopForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"PinToDesktopForUser", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::PinToDesktopForUser(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_SetEnterpriseStoreWebAccountId(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"SetEnterpriseStoreWebAccountId", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::SetEnterpriseStoreWebAccountId(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_SetEnterpriseStoreWebAccountIdForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"SetEnterpriseStoreWebAccountIdForUser", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::SetEnterpriseStoreWebAccountIdForUser(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_SetMobileOperatorConfiguration(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"SetMobileOperatorConfiguration", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);
                auto param2 = py::convert_to<uint32_t>(args, 2);

                winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::SetMobileOperatorConfiguration(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_SetPurchasePromptingPolicyForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"SetPurchasePromptingPolicyForUser", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::IReference<uint32_t>>(args, 1);

                winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::SetPurchasePromptingPolicyForUser(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_SetStoreWebAccountId(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"SetStoreWebAccountId", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::SetStoreWebAccountId(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_SetStoreWebAccountIdForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"SetStoreWebAccountIdForUser", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::SetStoreWebAccountIdForUser(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_SetSystemConfiguration(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 4)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"SetSystemConfiguration", 4))
            {
                py::set_arg_count_version_error(4);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::DateTime>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);

                winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::SetSystemConfiguration(param0, param1, param2, param3);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_ShouldRestrictToEnterpriseStoreOnly(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"ShouldRestrictToEnterpriseStoreOnly", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::ShouldRestrictToEnterpriseStoreOnly());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_ShouldRestrictToEnterpriseStoreOnlyForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"ShouldRestrictToEnterpriseStoreOnlyForUser", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::ShouldRestrictToEnterpriseStoreOnlyForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_get_HardwareManufacturerInfo(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"HardwareManufacturerInfo"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::HardwareManufacturerInfo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_get_PurchasePromptingPolicy(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"PurchasePromptingPolicy"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::PurchasePromptingPolicy());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_put_PurchasePromptingPolicy(PyObject* /*unused*/, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.StoreConfiguration", L"PurchasePromptingPolicy"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<uint32_t>>(arg);

            winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::PurchasePromptingPolicy(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StoreConfiguration[] = {
        { "filter_unsupported_system_features_async", reinterpret_cast<PyCFunction>(StoreConfiguration_FilterUnsupportedSystemFeaturesAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_enterprise_store_web_account_id", reinterpret_cast<PyCFunction>(StoreConfiguration_GetEnterpriseStoreWebAccountId), METH_VARARGS | METH_STATIC, nullptr },
        { "get_enterprise_store_web_account_id_for_user", reinterpret_cast<PyCFunction>(StoreConfiguration_GetEnterpriseStoreWebAccountIdForUser), METH_VARARGS | METH_STATIC, nullptr },
        { "get_purchase_prompting_policy_for_user", reinterpret_cast<PyCFunction>(StoreConfiguration_GetPurchasePromptingPolicyForUser), METH_VARARGS | METH_STATIC, nullptr },
        { "get_store_log_data_async", reinterpret_cast<PyCFunction>(StoreConfiguration_GetStoreLogDataAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_store_web_account_id", reinterpret_cast<PyCFunction>(StoreConfiguration_GetStoreWebAccountId), METH_VARARGS | METH_STATIC, nullptr },
        { "get_store_web_account_id_for_user", reinterpret_cast<PyCFunction>(StoreConfiguration_GetStoreWebAccountIdForUser), METH_VARARGS | METH_STATIC, nullptr },
        { "has_store_web_account", reinterpret_cast<PyCFunction>(StoreConfiguration_HasStoreWebAccount), METH_VARARGS | METH_STATIC, nullptr },
        { "has_store_web_account_for_user", reinterpret_cast<PyCFunction>(StoreConfiguration_HasStoreWebAccountForUser), METH_VARARGS | METH_STATIC, nullptr },
        { "is_pin_to_desktop_supported", reinterpret_cast<PyCFunction>(StoreConfiguration_IsPinToDesktopSupported), METH_VARARGS | METH_STATIC, nullptr },
        { "is_pin_to_start_supported", reinterpret_cast<PyCFunction>(StoreConfiguration_IsPinToStartSupported), METH_VARARGS | METH_STATIC, nullptr },
        { "is_pin_to_taskbar_supported", reinterpret_cast<PyCFunction>(StoreConfiguration_IsPinToTaskbarSupported), METH_VARARGS | METH_STATIC, nullptr },
        { "is_store_web_account_id", reinterpret_cast<PyCFunction>(StoreConfiguration_IsStoreWebAccountId), METH_VARARGS | METH_STATIC, nullptr },
        { "is_store_web_account_id_for_user", reinterpret_cast<PyCFunction>(StoreConfiguration_IsStoreWebAccountIdForUser), METH_VARARGS | METH_STATIC, nullptr },
        { "pin_to_desktop", reinterpret_cast<PyCFunction>(StoreConfiguration_PinToDesktop), METH_VARARGS | METH_STATIC, nullptr },
        { "pin_to_desktop_for_user", reinterpret_cast<PyCFunction>(StoreConfiguration_PinToDesktopForUser), METH_VARARGS | METH_STATIC, nullptr },
        { "set_enterprise_store_web_account_id", reinterpret_cast<PyCFunction>(StoreConfiguration_SetEnterpriseStoreWebAccountId), METH_VARARGS | METH_STATIC, nullptr },
        { "set_enterprise_store_web_account_id_for_user", reinterpret_cast<PyCFunction>(StoreConfiguration_SetEnterpriseStoreWebAccountIdForUser), METH_VARARGS | METH_STATIC, nullptr },
        { "set_mobile_operator_configuration", reinterpret_cast<PyCFunction>(StoreConfiguration_SetMobileOperatorConfiguration), METH_VARARGS | METH_STATIC, nullptr },
        { "set_purchase_prompting_policy_for_user", reinterpret_cast<PyCFunction>(StoreConfiguration_SetPurchasePromptingPolicyForUser), METH_VARARGS | METH_STATIC, nullptr },
        { "set_store_web_account_id", reinterpret_cast<PyCFunction>(StoreConfiguration_SetStoreWebAccountId), METH_VARARGS | METH_STATIC, nullptr },
        { "set_store_web_account_id_for_user", reinterpret_cast<PyCFunction>(StoreConfiguration_SetStoreWebAccountIdForUser), METH_VARARGS | METH_STATIC, nullptr },
        { "set_system_configuration", reinterpret_cast<PyCFunction>(StoreConfiguration_SetSystemConfiguration), METH_VARARGS | METH_STATIC, nullptr },
        { "should_restrict_to_enterprise_store_only", reinterpret_cast<PyCFunction>(StoreConfiguration_ShouldRestrictToEnterpriseStoreOnly), METH_VARARGS | METH_STATIC, nullptr },
        { "should_restrict_to_enterprise_store_only_for_user", reinterpret_cast<PyCFunction>(StoreConfiguration_ShouldRestrictToEnterpriseStoreOnlyForUser), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_StoreConfiguration[] = {
        { }
    };

    static PyType_Slot _type_slots_StoreConfiguration[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_StoreConfiguration) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_StoreConfiguration) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_StoreConfiguration) },
        { },
    };

    static PyType_Spec type_spec_StoreConfiguration =
    {
        "_winsdk_Windows_ApplicationModel_Store_Preview.StoreConfiguration",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StoreConfiguration
    };

    static PyGetSetDef getset_StoreConfiguration_Meta[] = {
        { "hardware_manufacturer_info", reinterpret_cast<getter>(StoreConfiguration_get_HardwareManufacturerInfo), nullptr, nullptr, nullptr },
        { "purchase_prompting_policy", reinterpret_cast<getter>(StoreConfiguration_get_PurchasePromptingPolicy), reinterpret_cast<setter>(StoreConfiguration_put_PurchasePromptingPolicy), nullptr, nullptr },
        { }
    };

    static PyType_Slot type_slots_StoreConfiguration_Meta[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_StoreConfiguration_Meta) },
        { }
    };

    static PyType_Spec type_spec_StoreConfiguration_Meta =
    {
        "_winsdk_Windows_ApplicationModel_Store_Preview.StoreConfiguration_Meta",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_StoreConfiguration_Meta
    };

    // ----- StoreHardwareManufacturerInfo class --------------------
    static constexpr const char* const type_name_StoreHardwareManufacturerInfo = "StoreHardwareManufacturerInfo";

    static PyObject* _new_StoreHardwareManufacturerInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_StoreHardwareManufacturerInfo);
        return nullptr;
    }

    static void _dealloc_StoreHardwareManufacturerInfo(py::wrapper::Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* StoreHardwareManufacturerInfo_get_HardwareManufacturerId(py::wrapper::Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.StoreHardwareManufacturerInfo", L"HardwareManufacturerId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.HardwareManufacturerId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StoreHardwareManufacturerInfo_get_ManufacturerName(py::wrapper::Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.StoreHardwareManufacturerInfo", L"ManufacturerName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ManufacturerName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StoreHardwareManufacturerInfo_get_ModelName(py::wrapper::Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.StoreHardwareManufacturerInfo", L"ModelName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ModelName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StoreHardwareManufacturerInfo_get_StoreContentModifierId(py::wrapper::Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.StoreHardwareManufacturerInfo", L"StoreContentModifierId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.StoreContentModifierId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_StoreHardwareManufacturerInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_StoreHardwareManufacturerInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StoreHardwareManufacturerInfo[] = {
        { "_assign_array_", _assign_array_StoreHardwareManufacturerInfo, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_StoreHardwareManufacturerInfo), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_StoreHardwareManufacturerInfo[] = {
        { "hardware_manufacturer_id", reinterpret_cast<getter>(StoreHardwareManufacturerInfo_get_HardwareManufacturerId), nullptr, nullptr, nullptr },
        { "manufacturer_name", reinterpret_cast<getter>(StoreHardwareManufacturerInfo_get_ManufacturerName), nullptr, nullptr, nullptr },
        { "model_name", reinterpret_cast<getter>(StoreHardwareManufacturerInfo_get_ModelName), nullptr, nullptr, nullptr },
        { "store_content_modifier_id", reinterpret_cast<getter>(StoreHardwareManufacturerInfo_get_StoreContentModifierId), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_StoreHardwareManufacturerInfo[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_StoreHardwareManufacturerInfo) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_StoreHardwareManufacturerInfo) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_StoreHardwareManufacturerInfo) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_StoreHardwareManufacturerInfo) },
        { },
    };

    static PyType_Spec type_spec_StoreHardwareManufacturerInfo =
    {
        "_winsdk_Windows_ApplicationModel_Store_Preview.StoreHardwareManufacturerInfo",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StoreHardwareManufacturerInfo
    };

    // ----- StorePreview class --------------------
    static constexpr const char* const type_name_StorePreview = "StorePreview";

    static PyObject* _new_StorePreview(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_StorePreview);
        return nullptr;
    }

    static PyObject* StorePreview_LoadAddOnProductInfosAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StorePreview", L"LoadAddOnProductInfosAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StorePreview::LoadAddOnProductInfosAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorePreview_RequestProductPurchaseByProductIdAndSkuIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.StorePreview", L"RequestProductPurchaseByProductIdAndSkuIdAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StorePreview::RequestProductPurchaseByProductIdAndSkuIdAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_StorePreview[] = {
        { "load_add_on_product_infos_async", reinterpret_cast<PyCFunction>(StorePreview_LoadAddOnProductInfosAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "request_product_purchase_by_product_id_and_sku_id_async", reinterpret_cast<PyCFunction>(StorePreview_RequestProductPurchaseByProductIdAndSkuIdAsync), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_StorePreview[] = {
        { }
    };

    static PyType_Slot _type_slots_StorePreview[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_StorePreview) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_StorePreview) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_StorePreview) },
        { },
    };

    static PyType_Spec type_spec_StorePreview =
    {
        "_winsdk_Windows_ApplicationModel_Store_Preview.StorePreview",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StorePreview
    };

    // ----- StorePreviewProductInfo class --------------------
    static constexpr const char* const type_name_StorePreviewProductInfo = "StorePreviewProductInfo";

    static PyObject* _new_StorePreviewProductInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_StorePreviewProductInfo);
        return nullptr;
    }

    static void _dealloc_StorePreviewProductInfo(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* StorePreviewProductInfo_get_Description(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo", L"Description"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Description());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewProductInfo_get_ProductId(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo", L"ProductId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProductId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewProductInfo_get_ProductType(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo", L"ProductType"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProductType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewProductInfo_get_SkuInfoList(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo", L"SkuInfoList"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SkuInfoList());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewProductInfo_get_Title(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo", L"Title"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_StorePreviewProductInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_StorePreviewProductInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StorePreviewProductInfo[] = {
        { "_assign_array_", _assign_array_StorePreviewProductInfo, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_StorePreviewProductInfo), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_StorePreviewProductInfo[] = {
        { "description", reinterpret_cast<getter>(StorePreviewProductInfo_get_Description), nullptr, nullptr, nullptr },
        { "product_id", reinterpret_cast<getter>(StorePreviewProductInfo_get_ProductId), nullptr, nullptr, nullptr },
        { "product_type", reinterpret_cast<getter>(StorePreviewProductInfo_get_ProductType), nullptr, nullptr, nullptr },
        { "sku_info_list", reinterpret_cast<getter>(StorePreviewProductInfo_get_SkuInfoList), nullptr, nullptr, nullptr },
        { "title", reinterpret_cast<getter>(StorePreviewProductInfo_get_Title), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_StorePreviewProductInfo[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_StorePreviewProductInfo) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_StorePreviewProductInfo) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_StorePreviewProductInfo) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_StorePreviewProductInfo) },
        { },
    };

    static PyType_Spec type_spec_StorePreviewProductInfo =
    {
        "_winsdk_Windows_ApplicationModel_Store_Preview.StorePreviewProductInfo",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StorePreviewProductInfo
    };

    // ----- StorePreviewPurchaseResults class --------------------
    static constexpr const char* const type_name_StorePreviewPurchaseResults = "StorePreviewPurchaseResults";

    static PyObject* _new_StorePreviewPurchaseResults(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_StorePreviewPurchaseResults);
        return nullptr;
    }

    static void _dealloc_StorePreviewPurchaseResults(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* StorePreviewPurchaseResults_get_ProductPurchaseStatus(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults", L"ProductPurchaseStatus"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProductPurchaseStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_StorePreviewPurchaseResults(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_StorePreviewPurchaseResults(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StorePreviewPurchaseResults[] = {
        { "_assign_array_", _assign_array_StorePreviewPurchaseResults, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_StorePreviewPurchaseResults), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_StorePreviewPurchaseResults[] = {
        { "product_purchase_status", reinterpret_cast<getter>(StorePreviewPurchaseResults_get_ProductPurchaseStatus), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_StorePreviewPurchaseResults[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_StorePreviewPurchaseResults) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_StorePreviewPurchaseResults) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_StorePreviewPurchaseResults) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_StorePreviewPurchaseResults) },
        { },
    };

    static PyType_Spec type_spec_StorePreviewPurchaseResults =
    {
        "_winsdk_Windows_ApplicationModel_Store_Preview.StorePreviewPurchaseResults",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StorePreviewPurchaseResults
    };

    // ----- StorePreviewSkuInfo class --------------------
    static constexpr const char* const type_name_StorePreviewSkuInfo = "StorePreviewSkuInfo";

    static PyObject* _new_StorePreviewSkuInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_StorePreviewSkuInfo);
        return nullptr;
    }

    static void _dealloc_StorePreviewSkuInfo(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* StorePreviewSkuInfo_get_CurrencyCode(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo", L"CurrencyCode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CurrencyCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewSkuInfo_get_CustomDeveloperData(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo", L"CustomDeveloperData"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CustomDeveloperData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewSkuInfo_get_Description(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo", L"Description"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Description());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewSkuInfo_get_ExtendedData(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo", L"ExtendedData"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ExtendedData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewSkuInfo_get_FormattedListPrice(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo", L"FormattedListPrice"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.FormattedListPrice());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewSkuInfo_get_ProductId(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo", L"ProductId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProductId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewSkuInfo_get_SkuId(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo", L"SkuId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SkuId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewSkuInfo_get_SkuType(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo", L"SkuType"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SkuType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewSkuInfo_get_Title(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo", L"Title"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_StorePreviewSkuInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_StorePreviewSkuInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StorePreviewSkuInfo[] = {
        { "_assign_array_", _assign_array_StorePreviewSkuInfo, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_StorePreviewSkuInfo), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_StorePreviewSkuInfo[] = {
        { "currency_code", reinterpret_cast<getter>(StorePreviewSkuInfo_get_CurrencyCode), nullptr, nullptr, nullptr },
        { "custom_developer_data", reinterpret_cast<getter>(StorePreviewSkuInfo_get_CustomDeveloperData), nullptr, nullptr, nullptr },
        { "description", reinterpret_cast<getter>(StorePreviewSkuInfo_get_Description), nullptr, nullptr, nullptr },
        { "extended_data", reinterpret_cast<getter>(StorePreviewSkuInfo_get_ExtendedData), nullptr, nullptr, nullptr },
        { "formatted_list_price", reinterpret_cast<getter>(StorePreviewSkuInfo_get_FormattedListPrice), nullptr, nullptr, nullptr },
        { "product_id", reinterpret_cast<getter>(StorePreviewSkuInfo_get_ProductId), nullptr, nullptr, nullptr },
        { "sku_id", reinterpret_cast<getter>(StorePreviewSkuInfo_get_SkuId), nullptr, nullptr, nullptr },
        { "sku_type", reinterpret_cast<getter>(StorePreviewSkuInfo_get_SkuType), nullptr, nullptr, nullptr },
        { "title", reinterpret_cast<getter>(StorePreviewSkuInfo_get_Title), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_StorePreviewSkuInfo[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_StorePreviewSkuInfo) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_StorePreviewSkuInfo) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_StorePreviewSkuInfo) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_StorePreviewSkuInfo) },
        { },
    };

    static PyType_Spec type_spec_StorePreviewSkuInfo =
    {
        "_winsdk_Windows_ApplicationModel_Store_Preview.StorePreviewSkuInfo",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StorePreviewSkuInfo
    };

    // ----- WebAuthenticationCoreManagerHelper class --------------------
    static constexpr const char* const type_name_WebAuthenticationCoreManagerHelper = "WebAuthenticationCoreManagerHelper";

    static PyObject* _new_WebAuthenticationCoreManagerHelper(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_WebAuthenticationCoreManagerHelper);
        return nullptr;
    }

    static PyObject* WebAuthenticationCoreManagerHelper_RequestTokenWithUIElementHostingAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper", L"RequestTokenWithUIElementHostingAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebTokenRequest>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Xaml::UIElement>(args, 1);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper::RequestTokenWithUIElementHostingAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper", L"RequestTokenWithUIElementHostingAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebTokenRequest>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::UI::Xaml::UIElement>(args, 2);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper::RequestTokenWithUIElementHostingAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAuthenticationCoreManagerHelper[] = {
        { "request_token_with_u_i_element_hosting_async", reinterpret_cast<PyCFunction>(WebAuthenticationCoreManagerHelper_RequestTokenWithUIElementHostingAsync), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebAuthenticationCoreManagerHelper[] = {
        { }
    };

    static PyType_Slot _type_slots_WebAuthenticationCoreManagerHelper[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WebAuthenticationCoreManagerHelper) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WebAuthenticationCoreManagerHelper) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WebAuthenticationCoreManagerHelper) },
        { },
    };

    static PyType_Spec type_spec_WebAuthenticationCoreManagerHelper =
    {
        "_winsdk_Windows_ApplicationModel_Store_Preview.WebAuthenticationCoreManagerHelper",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAuthenticationCoreManagerHelper
    };

    // ----- Windows.ApplicationModel.Store.Preview Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::ApplicationModel::Store::Preview");

    static PyMethodDef module_methods[] = {
        {"_register_DeliveryOptimizationDownloadMode", register_DeliveryOptimizationDownloadMode, METH_O, "registers type"},
        {"_register_DeliveryOptimizationDownloadModeSource", register_DeliveryOptimizationDownloadModeSource, METH_O, "registers type"},
        {"_register_StoreLogOptions", register_StoreLogOptions, METH_O, "registers type"},
        {"_register_StorePreviewProductPurchaseStatus", register_StorePreviewProductPurchaseStatus, METH_O, "registers type"},
        {"_register_StoreSystemFeature", register_StoreSystemFeature, METH_O, "registers type"},
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_DeliveryOptimizationDownloadMode);
        Py_VISIT(state->type_DeliveryOptimizationDownloadModeSource);
        Py_VISIT(state->type_StoreLogOptions);
        Py_VISIT(state->type_StorePreviewProductPurchaseStatus);
        Py_VISIT(state->type_StoreSystemFeature);
        Py_VISIT(state->type_DeliveryOptimizationSettings);
        Py_VISIT(state->type_StoreConfiguration);
        Py_VISIT(state->type_StoreHardwareManufacturerInfo);
        Py_VISIT(state->type_StorePreview);
        Py_VISIT(state->type_StorePreviewProductInfo);
        Py_VISIT(state->type_StorePreviewPurchaseResults);
        Py_VISIT(state->type_StorePreviewSkuInfo);
        Py_VISIT(state->type_WebAuthenticationCoreManagerHelper);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_DeliveryOptimizationDownloadMode);
        Py_CLEAR(state->type_DeliveryOptimizationDownloadModeSource);
        Py_CLEAR(state->type_StoreLogOptions);
        Py_CLEAR(state->type_StorePreviewProductPurchaseStatus);
        Py_CLEAR(state->type_StoreSystemFeature);
        Py_CLEAR(state->type_DeliveryOptimizationSettings);
        Py_CLEAR(state->type_StoreConfiguration);
        Py_CLEAR(state->type_StoreHardwareManufacturerInfo);
        Py_CLEAR(state->type_StorePreview);
        Py_CLEAR(state->type_StorePreviewProductInfo);
        Py_CLEAR(state->type_StorePreviewPurchaseResults);
        Py_CLEAR(state->type_StorePreviewSkuInfo);
        Py_CLEAR(state->type_WebAuthenticationCoreManagerHelper);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_ApplicationModel_Store_Preview",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::ApplicationModel::Store::Preview

PyMODINIT_FUNC PyInit__winsdk_Windows_ApplicationModel_Store_Preview(void) noexcept
{
    using namespace py::cpp::Windows::ApplicationModel::Store::Preview;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_DeliveryOptimizationSettings = py::register_python_type(module.get(), type_name_DeliveryOptimizationSettings, &type_spec_DeliveryOptimizationSettings, bases.get(), nullptr);
    if (!state->type_DeliveryOptimizationSettings)
    {
        return nullptr;
    }

    py::pyobj_handle type_StoreConfiguration_Meta{PyType_FromSpec(&type_spec_StoreConfiguration_Meta)};
    if (!type_StoreConfiguration_Meta)
    {
        return nullptr;
    }

    state->type_StoreConfiguration = py::register_python_type(module.get(), type_name_StoreConfiguration, &type_spec_StoreConfiguration, nullptr, reinterpret_cast<PyTypeObject*>(type_StoreConfiguration_Meta.get()));
    if (!state->type_StoreConfiguration)
    {
        return nullptr;
    }

    state->type_StoreHardwareManufacturerInfo = py::register_python_type(module.get(), type_name_StoreHardwareManufacturerInfo, &type_spec_StoreHardwareManufacturerInfo, bases.get(), nullptr);
    if (!state->type_StoreHardwareManufacturerInfo)
    {
        return nullptr;
    }

    state->type_StorePreview = py::register_python_type(module.get(), type_name_StorePreview, &type_spec_StorePreview, nullptr, nullptr);
    if (!state->type_StorePreview)
    {
        return nullptr;
    }

    state->type_StorePreviewProductInfo = py::register_python_type(module.get(), type_name_StorePreviewProductInfo, &type_spec_StorePreviewProductInfo, bases.get(), nullptr);
    if (!state->type_StorePreviewProductInfo)
    {
        return nullptr;
    }

    state->type_StorePreviewPurchaseResults = py::register_python_type(module.get(), type_name_StorePreviewPurchaseResults, &type_spec_StorePreviewPurchaseResults, bases.get(), nullptr);
    if (!state->type_StorePreviewPurchaseResults)
    {
        return nullptr;
    }

    state->type_StorePreviewSkuInfo = py::register_python_type(module.get(), type_name_StorePreviewSkuInfo, &type_spec_StorePreviewSkuInfo, bases.get(), nullptr);
    if (!state->type_StorePreviewSkuInfo)
    {
        return nullptr;
    }

    state->type_WebAuthenticationCoreManagerHelper = py::register_python_type(module.get(), type_name_WebAuthenticationCoreManagerHelper, &type_spec_WebAuthenticationCoreManagerHelper, nullptr, nullptr);
    if (!state->type_WebAuthenticationCoreManagerHelper)
    {
        return nullptr;
    }


    return module.detach();
}

PyObject* py::py_type<winrt::Windows::ApplicationModel::Store::Preview::DeliveryOptimizationDownloadMode>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store::Preview;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store::Preview");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_DeliveryOptimizationDownloadMode;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::Preview::DeliveryOptimizationDownloadMode is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::ApplicationModel::Store::Preview::DeliveryOptimizationDownloadModeSource>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store::Preview;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store::Preview");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_DeliveryOptimizationDownloadModeSource;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::Preview::DeliveryOptimizationDownloadModeSource is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::ApplicationModel::Store::Preview::StoreLogOptions>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store::Preview;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store::Preview");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_StoreLogOptions;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::Preview::StoreLogOptions is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::ApplicationModel::Store::Preview::StorePreviewProductPurchaseStatus>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store::Preview;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store::Preview");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_StorePreviewProductPurchaseStatus;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::Preview::StorePreviewProductPurchaseStatus is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::ApplicationModel::Store::Preview::StoreSystemFeature>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store::Preview;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store::Preview");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_StoreSystemFeature;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::Preview::StoreSystemFeature is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::DeliveryOptimizationSettings>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store::Preview;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store::Preview");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_DeliveryOptimizationSettings;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::Preview::DeliveryOptimizationSettings is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store::Preview;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store::Preview");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_StoreConfiguration;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store::Preview;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store::Preview");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_StoreHardwareManufacturerInfo;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::StorePreview>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store::Preview;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store::Preview");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_StorePreview;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::Preview::StorePreview is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store::Preview;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store::Preview");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_StorePreviewProductInfo;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store::Preview;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store::Preview");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_StorePreviewPurchaseResults;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store::Preview;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store::Preview");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_StorePreviewSkuInfo;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Store::Preview;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Store::Preview");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_WebAuthenticationCoreManagerHelper;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper is not registered");
        return nullptr;
    }

    return python_type;
}
