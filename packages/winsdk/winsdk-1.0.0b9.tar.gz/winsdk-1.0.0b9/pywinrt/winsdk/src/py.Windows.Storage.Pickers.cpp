// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.Storage.Pickers.h"


namespace py::cpp::Windows::Storage::Pickers
{
    struct module_state
    {
        PyObject* type_PickerLocationId;
        PyObject* type_PickerViewMode;
        PyTypeObject* type_FileExtensionVector;
        PyTypeObject* type_FileOpenPicker;
        PyTypeObject* type_FilePickerFileTypesOrderedMap;
        PyTypeObject* type_FilePickerSelectedFilesArray;
        PyTypeObject* type_FileSavePicker;
        PyTypeObject* type_FolderPicker;
    };

    static PyObject* register_PickerLocationId(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_PickerLocationId)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_PickerLocationId = type;
        Py_INCREF(state->type_PickerLocationId);


        Py_RETURN_NONE;
    }

    static PyObject* register_PickerViewMode(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_PickerViewMode)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_PickerViewMode = type;
        Py_INCREF(state->type_PickerViewMode);


        Py_RETURN_NONE;
    }

    // ----- FileExtensionVector class --------------------
    static constexpr const char* const type_name_FileExtensionVector = "FileExtensionVector";

    static PyObject* _new_FileExtensionVector(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_FileExtensionVector);
        return nullptr;
    }

    static void _dealloc_FileExtensionVector(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* FileExtensionVector_Append(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FileExtensionVector", L"Append", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Append(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_Clear(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FileExtensionVector", L"Clear", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Clear();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_First(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FileExtensionVector", L"First", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_GetAt(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FileExtensionVector", L"GetAt", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetAt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_GetMany(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FileExtensionVector", L"GetMany", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<py::pybuf_view<winrt::hstring, true>>(args, 1);

                return py::convert(self->obj.GetMany(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_GetView(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FileExtensionVector", L"GetView", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_IndexOf(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FileExtensionVector", L"IndexOf", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                uint32_t param1 {  };

                auto return_value = self->obj.IndexOf(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_InsertAt(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FileExtensionVector", L"InsertAt", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                self->obj.InsertAt(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_RemoveAt(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FileExtensionVector", L"RemoveAt", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                self->obj.RemoveAt(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_RemoveAtEnd(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FileExtensionVector", L"RemoveAtEnd", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.RemoveAtEnd();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_ReplaceAll(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FileExtensionVector", L"ReplaceAll", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<py::pybuf_view<winrt::hstring, false>>(args, 0);

                self->obj.ReplaceAll(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_SetAt(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FileExtensionVector", L"SetAt", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                self->obj.SetAt(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_get_Size(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileExtensionVector", L"Size"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_FileExtensionVector(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::Pickers::FileExtensionVector>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_FileExtensionVector(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::FileExtensionVector>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_FileExtensionVector(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self) noexcept
    {
        try
        {
            return py::convert(self->obj.First());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static Py_ssize_t _seq_length_FileExtensionVector(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _seq_item_FileExtensionVector(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, Py_ssize_t i) noexcept
    {
        try
        {
            return py::convert(self->obj.GetAt(static_cast<uint32_t>(i)));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _seq_subscript_FileExtensionVector(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* slice) noexcept
    {
        try
        {
            if (PyIndex_Check(slice))
            {
                pyobj_handle index{PyNumber_Index(slice)};

                if (!index)
                {
                    return nullptr;
                }

                auto i = PyNumber_AsSsize_t(index.get(), PyExc_IndexError);

                if (i == -1 && PyErr_Occurred())
                {
                    return nullptr;
                }

                return _seq_item_FileExtensionVector(self, i);
            }

            if (!PySlice_Check(slice))
            {
                PyErr_Format(
                    PyExc_TypeError,
                    "indicies must be integers, not '%s'",
                    Py_TYPE(slice)->tp_name);
            }

            Py_ssize_t start, stop, step, length;

            if (PySlice_GetIndicesEx(
                    slice, self->obj.Size(), &start, &stop, &step, &length)
                < 0)
            {
                return nullptr;
            }

            if (step != 1)
            {
                PyErr_SetString(
                    PyExc_NotImplementedError,
                    "slices with step other than 1 are not implemented");
                return nullptr;
            }

            winrt::com_array<winrt::hstring> items(length, empty_instance<winrt::hstring>::get());

            auto count = self->obj.GetMany(start, items);

            if (count != length)
            {
                PyErr_Format(
                    PyExc_RuntimeError,
                    "returned count %d did not match requested length %zd",
                    count,
                    length);
                return nullptr;
            }

            return convert(items);}
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int _seq_assign_FileExtensionVector(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, Py_ssize_t i, PyObject* value) noexcept
    {
        try
        {
            if (value == nullptr) { self->obj.RemoveAt(static_cast<uint32_t>(i)); }
            else { self->obj.SetAt(static_cast<uint32_t>(i), py::convert_to<winrt::hstring>(value)); }
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileExtensionVector_get_insert(PyObject* self) noexcept
    {
        return PyObject_GetAttrString(self, "insert_at");
    }

    static PyMethodDef _methods_FileExtensionVector[] = {
        { "append", reinterpret_cast<PyCFunction>(FileExtensionVector_Append), METH_VARARGS, nullptr },
        { "clear", reinterpret_cast<PyCFunction>(FileExtensionVector_Clear), METH_VARARGS, nullptr },
        { "first", reinterpret_cast<PyCFunction>(FileExtensionVector_First), METH_VARARGS, nullptr },
        { "get_at", reinterpret_cast<PyCFunction>(FileExtensionVector_GetAt), METH_VARARGS, nullptr },
        { "get_many", reinterpret_cast<PyCFunction>(FileExtensionVector_GetMany), METH_VARARGS, nullptr },
        { "get_view", reinterpret_cast<PyCFunction>(FileExtensionVector_GetView), METH_VARARGS, nullptr },
        { "index_of", reinterpret_cast<PyCFunction>(FileExtensionVector_IndexOf), METH_VARARGS, nullptr },
        { "insert_at", reinterpret_cast<PyCFunction>(FileExtensionVector_InsertAt), METH_VARARGS, nullptr },
        { "remove_at", reinterpret_cast<PyCFunction>(FileExtensionVector_RemoveAt), METH_VARARGS, nullptr },
        { "remove_at_end", reinterpret_cast<PyCFunction>(FileExtensionVector_RemoveAtEnd), METH_VARARGS, nullptr },
        { "replace_all", reinterpret_cast<PyCFunction>(FileExtensionVector_ReplaceAll), METH_VARARGS, nullptr },
        { "set_at", reinterpret_cast<PyCFunction>(FileExtensionVector_SetAt), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_FileExtensionVector, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_FileExtensionVector), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_FileExtensionVector[] = {
        { "size", reinterpret_cast<getter>(FileExtensionVector_get_Size), nullptr, nullptr, nullptr },
        { "insert", reinterpret_cast<getter>(FileExtensionVector_get_insert), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_FileExtensionVector[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_FileExtensionVector) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_FileExtensionVector) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_FileExtensionVector) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_FileExtensionVector) },
        { Py_tp_iter, reinterpret_cast<void*>(_iterator_FileExtensionVector) },
        { Py_sq_length, reinterpret_cast<void*>(_seq_length_FileExtensionVector) },
        { Py_sq_item, reinterpret_cast<void*>(_seq_item_FileExtensionVector) },
        { Py_mp_subscript, reinterpret_cast<void*>(_seq_subscript_FileExtensionVector) },
        { Py_sq_ass_item, reinterpret_cast<void*>(_seq_assign_FileExtensionVector) },
        { },
    };

    static PyType_Spec type_spec_FileExtensionVector =
    {
        "_winsdk_Windows_Storage_Pickers.FileExtensionVector",
        sizeof(py::wrapper::Windows::Storage::Pickers::FileExtensionVector),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FileExtensionVector
    };

    // ----- FileOpenPicker class --------------------
    static constexpr const char* const type_name_FileOpenPicker = "FileOpenPicker";

    static PyObject* _new_FileOpenPicker(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Storage::Pickers::FileOpenPicker instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_FileOpenPicker(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* FileOpenPicker_CreateForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FileOpenPicker", L"CreateForUser", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::Storage::Pickers::FileOpenPicker::CreateForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileOpenPicker_PickMultipleFilesAndContinue(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FileOpenPicker", L"PickMultipleFilesAndContinue", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.PickMultipleFilesAndContinue();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileOpenPicker_PickMultipleFilesAsync(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FileOpenPicker", L"PickMultipleFilesAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.PickMultipleFilesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileOpenPicker_PickSingleFileAndContinue(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FileOpenPicker", L"PickSingleFileAndContinue", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.PickSingleFileAndContinue();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileOpenPicker_PickSingleFileAsync(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FileOpenPicker", L"PickSingleFileAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.PickSingleFileAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FileOpenPicker", L"PickSingleFileAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.PickSingleFileAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileOpenPicker_ResumePickSingleFileAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FileOpenPicker", L"ResumePickSingleFileAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Storage::Pickers::FileOpenPicker::ResumePickSingleFileAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileOpenPicker_get_ViewMode(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileOpenPicker", L"ViewMode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ViewMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileOpenPicker_put_ViewMode(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileOpenPicker", L"ViewMode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Pickers::PickerViewMode>(arg);

            self->obj.ViewMode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileOpenPicker_get_SuggestedStartLocation(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileOpenPicker", L"SuggestedStartLocation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SuggestedStartLocation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileOpenPicker_put_SuggestedStartLocation(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileOpenPicker", L"SuggestedStartLocation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Pickers::PickerLocationId>(arg);

            self->obj.SuggestedStartLocation(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileOpenPicker_get_SettingsIdentifier(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileOpenPicker", L"SettingsIdentifier"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SettingsIdentifier());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileOpenPicker_put_SettingsIdentifier(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileOpenPicker", L"SettingsIdentifier"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.SettingsIdentifier(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileOpenPicker_get_CommitButtonText(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileOpenPicker", L"CommitButtonText"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CommitButtonText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileOpenPicker_put_CommitButtonText(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileOpenPicker", L"CommitButtonText"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.CommitButtonText(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileOpenPicker_get_FileTypeFilter(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileOpenPicker", L"FileTypeFilter"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.FileTypeFilter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileOpenPicker_get_ContinuationData(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileOpenPicker", L"ContinuationData"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ContinuationData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileOpenPicker_get_User(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileOpenPicker", L"User"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_FileOpenPicker(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::Pickers::FileOpenPicker>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_FileOpenPicker(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::FileOpenPicker>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FileOpenPicker[] = {
        { "create_for_user", reinterpret_cast<PyCFunction>(FileOpenPicker_CreateForUser), METH_VARARGS | METH_STATIC, nullptr },
        { "pick_multiple_files_and_continue", reinterpret_cast<PyCFunction>(FileOpenPicker_PickMultipleFilesAndContinue), METH_VARARGS, nullptr },
        { "pick_multiple_files_async", reinterpret_cast<PyCFunction>(FileOpenPicker_PickMultipleFilesAsync), METH_VARARGS, nullptr },
        { "pick_single_file_and_continue", reinterpret_cast<PyCFunction>(FileOpenPicker_PickSingleFileAndContinue), METH_VARARGS, nullptr },
        { "pick_single_file_async", reinterpret_cast<PyCFunction>(FileOpenPicker_PickSingleFileAsync), METH_VARARGS, nullptr },
        { "resume_pick_single_file_async", reinterpret_cast<PyCFunction>(FileOpenPicker_ResumePickSingleFileAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "_assign_array_", _assign_array_FileOpenPicker, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_FileOpenPicker), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_FileOpenPicker[] = {
        { "view_mode", reinterpret_cast<getter>(FileOpenPicker_get_ViewMode), reinterpret_cast<setter>(FileOpenPicker_put_ViewMode), nullptr, nullptr },
        { "suggested_start_location", reinterpret_cast<getter>(FileOpenPicker_get_SuggestedStartLocation), reinterpret_cast<setter>(FileOpenPicker_put_SuggestedStartLocation), nullptr, nullptr },
        { "settings_identifier", reinterpret_cast<getter>(FileOpenPicker_get_SettingsIdentifier), reinterpret_cast<setter>(FileOpenPicker_put_SettingsIdentifier), nullptr, nullptr },
        { "commit_button_text", reinterpret_cast<getter>(FileOpenPicker_get_CommitButtonText), reinterpret_cast<setter>(FileOpenPicker_put_CommitButtonText), nullptr, nullptr },
        { "file_type_filter", reinterpret_cast<getter>(FileOpenPicker_get_FileTypeFilter), nullptr, nullptr, nullptr },
        { "continuation_data", reinterpret_cast<getter>(FileOpenPicker_get_ContinuationData), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(FileOpenPicker_get_User), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_FileOpenPicker[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_FileOpenPicker) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_FileOpenPicker) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_FileOpenPicker) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_FileOpenPicker) },
        { },
    };

    static PyType_Spec type_spec_FileOpenPicker =
    {
        "_winsdk_Windows_Storage_Pickers.FileOpenPicker",
        sizeof(py::wrapper::Windows::Storage::Pickers::FileOpenPicker),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FileOpenPicker
    };

    // ----- FilePickerFileTypesOrderedMap class --------------------
    static constexpr const char* const type_name_FilePickerFileTypesOrderedMap = "FilePickerFileTypesOrderedMap";

    static PyObject* _new_FilePickerFileTypesOrderedMap(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_FilePickerFileTypesOrderedMap);
        return nullptr;
    }

    static void _dealloc_FilePickerFileTypesOrderedMap(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* FilePickerFileTypesOrderedMap_Clear(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FilePickerFileTypesOrderedMap", L"Clear", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Clear();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FilePickerFileTypesOrderedMap_First(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FilePickerFileTypesOrderedMap", L"First", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FilePickerFileTypesOrderedMap_GetView(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FilePickerFileTypesOrderedMap", L"GetView", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FilePickerFileTypesOrderedMap_HasKey(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FilePickerFileTypesOrderedMap", L"HasKey", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.HasKey(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FilePickerFileTypesOrderedMap_Insert(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FilePickerFileTypesOrderedMap", L"Insert", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IVector<winrt::hstring>>(args, 1);

                return py::convert(self->obj.Insert(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FilePickerFileTypesOrderedMap_Lookup(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FilePickerFileTypesOrderedMap", L"Lookup", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.Lookup(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FilePickerFileTypesOrderedMap_Remove(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FilePickerFileTypesOrderedMap", L"Remove", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Remove(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FilePickerFileTypesOrderedMap_get_Size(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FilePickerFileTypesOrderedMap", L"Size"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_FilePickerFileTypesOrderedMap(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_FilePickerFileTypesOrderedMap(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_FilePickerFileTypesOrderedMap(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self) noexcept
    {
        try
        {
            py::pyobj_handle iter{py::convert(self->obj.First())};
            return py::wrap_mapping_iter(iter.get());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int _map_contains_FilePickerFileTypesOrderedMap(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self, PyObject* key) noexcept
    {
        try
        {
            return static_cast<int>(self->obj.HasKey(py::convert_to<winrt::hstring>(key)));
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static Py_ssize_t _map_length_FilePickerFileTypesOrderedMap(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _map_subscript_FilePickerFileTypesOrderedMap(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self, PyObject* key) noexcept
    {
        try
        {
            auto value = self->obj.TryLookup(py::convert_to<winrt::hstring>(key));

            if (!value) {
                PyErr_SetObject(PyExc_KeyError, key);
                return nullptr;
            }

            return py::convert(value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int _map_assign_FilePickerFileTypesOrderedMap(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self, PyObject* key, PyObject* value) noexcept
    {
        try
        {
            auto _key = py::convert_to<winrt::hstring>(key);

            if (value == nullptr) {
                if (!self->obj.TryRemove(_key)) {
                    PyErr_SetObject(PyExc_KeyError, key);
                    return -1;
                }

                return 0;
            }

            self->obj.Insert(_key, py::convert_to<winrt::Windows::Foundation::Collections::IVector<winrt::hstring>>(value));

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyMethodDef _methods_FilePickerFileTypesOrderedMap[] = {
        { "clear", reinterpret_cast<PyCFunction>(FilePickerFileTypesOrderedMap_Clear), METH_VARARGS, nullptr },
        { "first", reinterpret_cast<PyCFunction>(FilePickerFileTypesOrderedMap_First), METH_VARARGS, nullptr },
        { "get_view", reinterpret_cast<PyCFunction>(FilePickerFileTypesOrderedMap_GetView), METH_VARARGS, nullptr },
        { "has_key", reinterpret_cast<PyCFunction>(FilePickerFileTypesOrderedMap_HasKey), METH_VARARGS, nullptr },
        { "insert", reinterpret_cast<PyCFunction>(FilePickerFileTypesOrderedMap_Insert), METH_VARARGS, nullptr },
        { "lookup", reinterpret_cast<PyCFunction>(FilePickerFileTypesOrderedMap_Lookup), METH_VARARGS, nullptr },
        { "remove", reinterpret_cast<PyCFunction>(FilePickerFileTypesOrderedMap_Remove), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_FilePickerFileTypesOrderedMap, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_FilePickerFileTypesOrderedMap), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_FilePickerFileTypesOrderedMap[] = {
        { "size", reinterpret_cast<getter>(FilePickerFileTypesOrderedMap_get_Size), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_FilePickerFileTypesOrderedMap[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_FilePickerFileTypesOrderedMap) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_FilePickerFileTypesOrderedMap) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_FilePickerFileTypesOrderedMap) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_FilePickerFileTypesOrderedMap) },
        { Py_tp_iter, reinterpret_cast<void*>(_iterator_FilePickerFileTypesOrderedMap) },
        { Py_sq_contains, reinterpret_cast<void*>(_map_contains_FilePickerFileTypesOrderedMap) },
        { Py_mp_length, reinterpret_cast<void*>(_map_length_FilePickerFileTypesOrderedMap) },
        { Py_mp_subscript, reinterpret_cast<void*>(_map_subscript_FilePickerFileTypesOrderedMap) },
        { Py_mp_ass_subscript, reinterpret_cast<void*>(_map_assign_FilePickerFileTypesOrderedMap) },
        { },
    };

    static PyType_Spec type_spec_FilePickerFileTypesOrderedMap =
    {
        "_winsdk_Windows_Storage_Pickers.FilePickerFileTypesOrderedMap",
        sizeof(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FilePickerFileTypesOrderedMap
    };

    // ----- FilePickerSelectedFilesArray class --------------------
    static constexpr const char* const type_name_FilePickerSelectedFilesArray = "FilePickerSelectedFilesArray";

    static PyObject* _new_FilePickerSelectedFilesArray(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_FilePickerSelectedFilesArray);
        return nullptr;
    }

    static void _dealloc_FilePickerSelectedFilesArray(py::wrapper::Windows::Storage::Pickers::FilePickerSelectedFilesArray* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* FilePickerSelectedFilesArray_First(py::wrapper::Windows::Storage::Pickers::FilePickerSelectedFilesArray* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FilePickerSelectedFilesArray", L"First", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FilePickerSelectedFilesArray_GetAt(py::wrapper::Windows::Storage::Pickers::FilePickerSelectedFilesArray* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FilePickerSelectedFilesArray", L"GetAt", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetAt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FilePickerSelectedFilesArray_GetMany(py::wrapper::Windows::Storage::Pickers::FilePickerSelectedFilesArray* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FilePickerSelectedFilesArray", L"GetMany", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<py::pybuf_view<winrt::Windows::Storage::StorageFile, true>>(args, 1);

                return py::convert(self->obj.GetMany(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FilePickerSelectedFilesArray_IndexOf(py::wrapper::Windows::Storage::Pickers::FilePickerSelectedFilesArray* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FilePickerSelectedFilesArray", L"IndexOf", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::StorageFile>(args, 0);
                uint32_t param1 {  };

                auto return_value = self->obj.IndexOf(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FilePickerSelectedFilesArray_get_Size(py::wrapper::Windows::Storage::Pickers::FilePickerSelectedFilesArray* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FilePickerSelectedFilesArray", L"Size"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_FilePickerSelectedFilesArray(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::Pickers::FilePickerSelectedFilesArray>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_FilePickerSelectedFilesArray(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::FilePickerSelectedFilesArray>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_FilePickerSelectedFilesArray(py::wrapper::Windows::Storage::Pickers::FilePickerSelectedFilesArray* self) noexcept
    {
        try
        {
            return py::convert(self->obj.First());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static Py_ssize_t _seq_length_FilePickerSelectedFilesArray(py::wrapper::Windows::Storage::Pickers::FilePickerSelectedFilesArray* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _seq_item_FilePickerSelectedFilesArray(py::wrapper::Windows::Storage::Pickers::FilePickerSelectedFilesArray* self, Py_ssize_t i) noexcept
    {
        try
        {
            return py::convert(self->obj.GetAt(static_cast<uint32_t>(i)));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _seq_subscript_FilePickerSelectedFilesArray(py::wrapper::Windows::Storage::Pickers::FilePickerSelectedFilesArray* self, PyObject* slice) noexcept
    {
        try
        {
            if (PyIndex_Check(slice))
            {
                pyobj_handle index{PyNumber_Index(slice)};

                if (!index)
                {
                    return nullptr;
                }

                auto i = PyNumber_AsSsize_t(index.get(), PyExc_IndexError);

                if (i == -1 && PyErr_Occurred())
                {
                    return nullptr;
                }

                return _seq_item_FilePickerSelectedFilesArray(self, i);
            }

            if (!PySlice_Check(slice))
            {
                PyErr_Format(
                    PyExc_TypeError,
                    "indicies must be integers, not '%s'",
                    Py_TYPE(slice)->tp_name);
            }

            Py_ssize_t start, stop, step, length;

            if (PySlice_GetIndicesEx(
                    slice, self->obj.Size(), &start, &stop, &step, &length)
                < 0)
            {
                return nullptr;
            }

            if (step != 1)
            {
                PyErr_SetString(
                    PyExc_NotImplementedError,
                    "slices with step other than 1 are not implemented");
                return nullptr;
            }

            winrt::com_array<winrt::Windows::Storage::StorageFile> items(length, empty_instance<winrt::Windows::Storage::StorageFile>::get());

            auto count = self->obj.GetMany(start, items);

            if (count != length)
            {
                PyErr_Format(
                    PyExc_RuntimeError,
                    "returned count %d did not match requested length %zd",
                    count,
                    length);
                return nullptr;
            }

            return convert(items);}
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FilePickerSelectedFilesArray[] = {
        { "first", reinterpret_cast<PyCFunction>(FilePickerSelectedFilesArray_First), METH_VARARGS, nullptr },
        { "get_at", reinterpret_cast<PyCFunction>(FilePickerSelectedFilesArray_GetAt), METH_VARARGS, nullptr },
        { "get_many", reinterpret_cast<PyCFunction>(FilePickerSelectedFilesArray_GetMany), METH_VARARGS, nullptr },
        { "index_of", reinterpret_cast<PyCFunction>(FilePickerSelectedFilesArray_IndexOf), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_FilePickerSelectedFilesArray, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_FilePickerSelectedFilesArray), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_FilePickerSelectedFilesArray[] = {
        { "size", reinterpret_cast<getter>(FilePickerSelectedFilesArray_get_Size), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_FilePickerSelectedFilesArray[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_FilePickerSelectedFilesArray) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_FilePickerSelectedFilesArray) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_FilePickerSelectedFilesArray) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_FilePickerSelectedFilesArray) },
        { Py_tp_iter, reinterpret_cast<void*>(_iterator_FilePickerSelectedFilesArray) },
        { Py_sq_length, reinterpret_cast<void*>(_seq_length_FilePickerSelectedFilesArray) },
        { Py_sq_item, reinterpret_cast<void*>(_seq_item_FilePickerSelectedFilesArray) },
        { Py_mp_subscript, reinterpret_cast<void*>(_seq_subscript_FilePickerSelectedFilesArray) },
        { },
    };

    static PyType_Spec type_spec_FilePickerSelectedFilesArray =
    {
        "_winsdk_Windows_Storage_Pickers.FilePickerSelectedFilesArray",
        sizeof(py::wrapper::Windows::Storage::Pickers::FilePickerSelectedFilesArray),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FilePickerSelectedFilesArray
    };

    // ----- FileSavePicker class --------------------
    static constexpr const char* const type_name_FileSavePicker = "FileSavePicker";

    static PyObject* _new_FileSavePicker(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Storage::Pickers::FileSavePicker instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_FileSavePicker(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* FileSavePicker_CreateForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FileSavePicker", L"CreateForUser", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::Storage::Pickers::FileSavePicker::CreateForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileSavePicker_PickSaveFileAndContinue(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FileSavePicker", L"PickSaveFileAndContinue", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.PickSaveFileAndContinue();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileSavePicker_PickSaveFileAsync(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FileSavePicker", L"PickSaveFileAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.PickSaveFileAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileSavePicker_get_SuggestedStartLocation(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileSavePicker", L"SuggestedStartLocation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SuggestedStartLocation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileSavePicker_put_SuggestedStartLocation(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileSavePicker", L"SuggestedStartLocation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Pickers::PickerLocationId>(arg);

            self->obj.SuggestedStartLocation(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileSavePicker_get_SuggestedSaveFile(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileSavePicker", L"SuggestedSaveFile"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SuggestedSaveFile());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileSavePicker_put_SuggestedSaveFile(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileSavePicker", L"SuggestedSaveFile"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::StorageFile>(arg);

            self->obj.SuggestedSaveFile(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileSavePicker_get_SuggestedFileName(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileSavePicker", L"SuggestedFileName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SuggestedFileName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileSavePicker_put_SuggestedFileName(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileSavePicker", L"SuggestedFileName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.SuggestedFileName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileSavePicker_get_SettingsIdentifier(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileSavePicker", L"SettingsIdentifier"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SettingsIdentifier());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileSavePicker_put_SettingsIdentifier(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileSavePicker", L"SettingsIdentifier"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.SettingsIdentifier(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileSavePicker_get_DefaultFileExtension(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileSavePicker", L"DefaultFileExtension"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DefaultFileExtension());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileSavePicker_put_DefaultFileExtension(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileSavePicker", L"DefaultFileExtension"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DefaultFileExtension(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileSavePicker_get_CommitButtonText(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileSavePicker", L"CommitButtonText"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CommitButtonText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileSavePicker_put_CommitButtonText(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileSavePicker", L"CommitButtonText"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.CommitButtonText(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileSavePicker_get_FileTypeChoices(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileSavePicker", L"FileTypeChoices"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.FileTypeChoices());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileSavePicker_get_ContinuationData(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileSavePicker", L"ContinuationData"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ContinuationData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileSavePicker_get_EnterpriseId(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileSavePicker", L"EnterpriseId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.EnterpriseId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileSavePicker_put_EnterpriseId(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileSavePicker", L"EnterpriseId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.EnterpriseId(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileSavePicker_get_User(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FileSavePicker", L"User"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_FileSavePicker(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::Pickers::FileSavePicker>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_FileSavePicker(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::FileSavePicker>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FileSavePicker[] = {
        { "create_for_user", reinterpret_cast<PyCFunction>(FileSavePicker_CreateForUser), METH_VARARGS | METH_STATIC, nullptr },
        { "pick_save_file_and_continue", reinterpret_cast<PyCFunction>(FileSavePicker_PickSaveFileAndContinue), METH_VARARGS, nullptr },
        { "pick_save_file_async", reinterpret_cast<PyCFunction>(FileSavePicker_PickSaveFileAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_FileSavePicker, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_FileSavePicker), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_FileSavePicker[] = {
        { "suggested_start_location", reinterpret_cast<getter>(FileSavePicker_get_SuggestedStartLocation), reinterpret_cast<setter>(FileSavePicker_put_SuggestedStartLocation), nullptr, nullptr },
        { "suggested_save_file", reinterpret_cast<getter>(FileSavePicker_get_SuggestedSaveFile), reinterpret_cast<setter>(FileSavePicker_put_SuggestedSaveFile), nullptr, nullptr },
        { "suggested_file_name", reinterpret_cast<getter>(FileSavePicker_get_SuggestedFileName), reinterpret_cast<setter>(FileSavePicker_put_SuggestedFileName), nullptr, nullptr },
        { "settings_identifier", reinterpret_cast<getter>(FileSavePicker_get_SettingsIdentifier), reinterpret_cast<setter>(FileSavePicker_put_SettingsIdentifier), nullptr, nullptr },
        { "default_file_extension", reinterpret_cast<getter>(FileSavePicker_get_DefaultFileExtension), reinterpret_cast<setter>(FileSavePicker_put_DefaultFileExtension), nullptr, nullptr },
        { "commit_button_text", reinterpret_cast<getter>(FileSavePicker_get_CommitButtonText), reinterpret_cast<setter>(FileSavePicker_put_CommitButtonText), nullptr, nullptr },
        { "file_type_choices", reinterpret_cast<getter>(FileSavePicker_get_FileTypeChoices), nullptr, nullptr, nullptr },
        { "continuation_data", reinterpret_cast<getter>(FileSavePicker_get_ContinuationData), nullptr, nullptr, nullptr },
        { "enterprise_id", reinterpret_cast<getter>(FileSavePicker_get_EnterpriseId), reinterpret_cast<setter>(FileSavePicker_put_EnterpriseId), nullptr, nullptr },
        { "user", reinterpret_cast<getter>(FileSavePicker_get_User), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_FileSavePicker[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_FileSavePicker) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_FileSavePicker) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_FileSavePicker) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_FileSavePicker) },
        { },
    };

    static PyType_Spec type_spec_FileSavePicker =
    {
        "_winsdk_Windows_Storage_Pickers.FileSavePicker",
        sizeof(py::wrapper::Windows::Storage::Pickers::FileSavePicker),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FileSavePicker
    };

    // ----- FolderPicker class --------------------
    static constexpr const char* const type_name_FolderPicker = "FolderPicker";

    static PyObject* _new_FolderPicker(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Storage::Pickers::FolderPicker instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_FolderPicker(py::wrapper::Windows::Storage::Pickers::FolderPicker* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* FolderPicker_CreateForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FolderPicker", L"CreateForUser", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::Storage::Pickers::FolderPicker::CreateForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FolderPicker_PickFolderAndContinue(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FolderPicker", L"PickFolderAndContinue", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.PickFolderAndContinue();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FolderPicker_PickSingleFolderAsync(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.FolderPicker", L"PickSingleFolderAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.PickSingleFolderAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FolderPicker_get_ViewMode(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FolderPicker", L"ViewMode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ViewMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FolderPicker_put_ViewMode(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FolderPicker", L"ViewMode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Pickers::PickerViewMode>(arg);

            self->obj.ViewMode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FolderPicker_get_SuggestedStartLocation(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FolderPicker", L"SuggestedStartLocation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SuggestedStartLocation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FolderPicker_put_SuggestedStartLocation(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FolderPicker", L"SuggestedStartLocation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Pickers::PickerLocationId>(arg);

            self->obj.SuggestedStartLocation(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FolderPicker_get_SettingsIdentifier(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FolderPicker", L"SettingsIdentifier"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SettingsIdentifier());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FolderPicker_put_SettingsIdentifier(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FolderPicker", L"SettingsIdentifier"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.SettingsIdentifier(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FolderPicker_get_CommitButtonText(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FolderPicker", L"CommitButtonText"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CommitButtonText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FolderPicker_put_CommitButtonText(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FolderPicker", L"CommitButtonText"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.CommitButtonText(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FolderPicker_get_FileTypeFilter(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FolderPicker", L"FileTypeFilter"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.FileTypeFilter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FolderPicker_get_ContinuationData(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FolderPicker", L"ContinuationData"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ContinuationData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FolderPicker_get_User(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.FolderPicker", L"User"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_FolderPicker(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::Pickers::FolderPicker>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_FolderPicker(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::FolderPicker>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FolderPicker[] = {
        { "create_for_user", reinterpret_cast<PyCFunction>(FolderPicker_CreateForUser), METH_VARARGS | METH_STATIC, nullptr },
        { "pick_folder_and_continue", reinterpret_cast<PyCFunction>(FolderPicker_PickFolderAndContinue), METH_VARARGS, nullptr },
        { "pick_single_folder_async", reinterpret_cast<PyCFunction>(FolderPicker_PickSingleFolderAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_FolderPicker, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_FolderPicker), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_FolderPicker[] = {
        { "view_mode", reinterpret_cast<getter>(FolderPicker_get_ViewMode), reinterpret_cast<setter>(FolderPicker_put_ViewMode), nullptr, nullptr },
        { "suggested_start_location", reinterpret_cast<getter>(FolderPicker_get_SuggestedStartLocation), reinterpret_cast<setter>(FolderPicker_put_SuggestedStartLocation), nullptr, nullptr },
        { "settings_identifier", reinterpret_cast<getter>(FolderPicker_get_SettingsIdentifier), reinterpret_cast<setter>(FolderPicker_put_SettingsIdentifier), nullptr, nullptr },
        { "commit_button_text", reinterpret_cast<getter>(FolderPicker_get_CommitButtonText), reinterpret_cast<setter>(FolderPicker_put_CommitButtonText), nullptr, nullptr },
        { "file_type_filter", reinterpret_cast<getter>(FolderPicker_get_FileTypeFilter), nullptr, nullptr, nullptr },
        { "continuation_data", reinterpret_cast<getter>(FolderPicker_get_ContinuationData), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(FolderPicker_get_User), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_FolderPicker[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_FolderPicker) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_FolderPicker) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_FolderPicker) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_FolderPicker) },
        { },
    };

    static PyType_Spec type_spec_FolderPicker =
    {
        "_winsdk_Windows_Storage_Pickers.FolderPicker",
        sizeof(py::wrapper::Windows::Storage::Pickers::FolderPicker),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FolderPicker
    };

    // ----- Windows.Storage.Pickers Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Storage::Pickers");

    static PyMethodDef module_methods[] = {
        {"_register_PickerLocationId", register_PickerLocationId, METH_O, "registers type"},
        {"_register_PickerViewMode", register_PickerViewMode, METH_O, "registers type"},
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_PickerLocationId);
        Py_VISIT(state->type_PickerViewMode);
        Py_VISIT(state->type_FileExtensionVector);
        Py_VISIT(state->type_FileOpenPicker);
        Py_VISIT(state->type_FilePickerFileTypesOrderedMap);
        Py_VISIT(state->type_FilePickerSelectedFilesArray);
        Py_VISIT(state->type_FileSavePicker);
        Py_VISIT(state->type_FolderPicker);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_PickerLocationId);
        Py_CLEAR(state->type_PickerViewMode);
        Py_CLEAR(state->type_FileExtensionVector);
        Py_CLEAR(state->type_FileOpenPicker);
        Py_CLEAR(state->type_FilePickerFileTypesOrderedMap);
        Py_CLEAR(state->type_FilePickerSelectedFilesArray);
        Py_CLEAR(state->type_FileSavePicker);
        Py_CLEAR(state->type_FolderPicker);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Storage_Pickers",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Storage::Pickers

PyMODINIT_FUNC PyInit__winsdk_Windows_Storage_Pickers(void) noexcept
{
    using namespace py::cpp::Windows::Storage::Pickers;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_FileExtensionVector = py::register_python_type(module.get(), type_name_FileExtensionVector, &type_spec_FileExtensionVector, mutable_sequence_bases.get(), nullptr);
    if (!state->type_FileExtensionVector)
    {
        return nullptr;
    }

    state->type_FileOpenPicker = py::register_python_type(module.get(), type_name_FileOpenPicker, &type_spec_FileOpenPicker, bases.get(), nullptr);
    if (!state->type_FileOpenPicker)
    {
        return nullptr;
    }

    state->type_FilePickerFileTypesOrderedMap = py::register_python_type(module.get(), type_name_FilePickerFileTypesOrderedMap, &type_spec_FilePickerFileTypesOrderedMap, mutable_mapping_bases.get(), nullptr);
    if (!state->type_FilePickerFileTypesOrderedMap)
    {
        return nullptr;
    }

    state->type_FilePickerSelectedFilesArray = py::register_python_type(module.get(), type_name_FilePickerSelectedFilesArray, &type_spec_FilePickerSelectedFilesArray, sequence_bases.get(), nullptr);
    if (!state->type_FilePickerSelectedFilesArray)
    {
        return nullptr;
    }

    state->type_FileSavePicker = py::register_python_type(module.get(), type_name_FileSavePicker, &type_spec_FileSavePicker, bases.get(), nullptr);
    if (!state->type_FileSavePicker)
    {
        return nullptr;
    }

    state->type_FolderPicker = py::register_python_type(module.get(), type_name_FolderPicker, &type_spec_FolderPicker, bases.get(), nullptr);
    if (!state->type_FolderPicker)
    {
        return nullptr;
    }


    return module.detach();
}

PyObject* py::py_type<winrt::Windows::Storage::Pickers::PickerLocationId>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Storage::Pickers;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Storage::Pickers");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PickerLocationId;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Storage::Pickers::PickerLocationId is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::Storage::Pickers::PickerViewMode>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Storage::Pickers;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Storage::Pickers");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PickerViewMode;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Storage::Pickers::PickerViewMode is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Storage::Pickers::FileExtensionVector>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Storage::Pickers;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Storage::Pickers");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_FileExtensionVector;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Storage::Pickers::FileExtensionVector is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Storage::Pickers::FileOpenPicker>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Storage::Pickers;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Storage::Pickers");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_FileOpenPicker;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Storage::Pickers::FileOpenPicker is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Storage::Pickers;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Storage::Pickers");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_FilePickerFileTypesOrderedMap;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Storage::Pickers::FilePickerSelectedFilesArray>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Storage::Pickers;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Storage::Pickers");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_FilePickerSelectedFilesArray;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Storage::Pickers::FilePickerSelectedFilesArray is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Storage::Pickers::FileSavePicker>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Storage::Pickers;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Storage::Pickers");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_FileSavePicker;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Storage::Pickers::FileSavePicker is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Storage::Pickers::FolderPicker>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Storage::Pickers;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Storage::Pickers");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_FolderPicker;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Storage::Pickers::FolderPicker is not registered");
        return nullptr;
    }

    return python_type;
}
