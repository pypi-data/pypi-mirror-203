// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.Networking.PushNotifications.h"


namespace py::cpp::Windows::Networking::PushNotifications
{
    struct module_state
    {
        PyObject* type_PushNotificationType;
        PyTypeObject* type_PushNotificationChannel;
        PyTypeObject* type_PushNotificationChannelManager;
        PyTypeObject* type_PushNotificationChannelManagerForUser;
        PyTypeObject* type_PushNotificationChannelsRevokedEventArgs;
        PyTypeObject* type_PushNotificationReceivedEventArgs;
        PyTypeObject* type_RawNotification;
    };

    static PyObject* register_PushNotificationType(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_PushNotificationType)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_PushNotificationType = type;
        Py_INCREF(state->type_PushNotificationType);


        Py_RETURN_NONE;
    }

    // ----- PushNotificationChannel class --------------------
    static constexpr const char* const type_name_PushNotificationChannel = "PushNotificationChannel";

    static PyObject* _new_PushNotificationChannel(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_PushNotificationChannel);
        return nullptr;
    }

    static void _dealloc_PushNotificationChannel(py::wrapper::Windows::Networking::PushNotifications::PushNotificationChannel* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PushNotificationChannel_Close(py::wrapper::Windows::Networking::PushNotifications::PushNotificationChannel* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Networking.PushNotifications.PushNotificationChannel", L"Close", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PushNotificationChannel_get_ExpirationTime(py::wrapper::Windows::Networking::PushNotifications::PushNotificationChannel* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Networking.PushNotifications.PushNotificationChannel", L"ExpirationTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ExpirationTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PushNotificationChannel_get_Uri(py::wrapper::Windows::Networking::PushNotifications::PushNotificationChannel* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Networking.PushNotifications.PushNotificationChannel", L"Uri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PushNotificationChannel_add_PushNotificationReceived(py::wrapper::Windows::Networking::PushNotifications::PushNotificationChannel* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Networking.PushNotifications.PushNotificationChannel", L"PushNotificationReceived"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Networking::PushNotifications::PushNotificationChannel, winrt::Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs>>(arg);

            return py::convert(self->obj.PushNotificationReceived(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PushNotificationChannel_remove_PushNotificationReceived(py::wrapper::Windows::Networking::PushNotifications::PushNotificationChannel* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Networking.PushNotifications.PushNotificationChannel", L"PushNotificationReceived"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PushNotificationReceived(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PushNotificationChannel(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Networking::PushNotifications::PushNotificationChannel>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PushNotificationChannel(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Networking::PushNotifications::PushNotificationChannel>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PushNotificationChannel[] = {
        { "close", reinterpret_cast<PyCFunction>(PushNotificationChannel_Close), METH_VARARGS, nullptr },
        { "add_push_notification_received", reinterpret_cast<PyCFunction>(PushNotificationChannel_add_PushNotificationReceived), METH_O, nullptr },
        { "remove_push_notification_received", reinterpret_cast<PyCFunction>(PushNotificationChannel_remove_PushNotificationReceived), METH_O, nullptr },
        { "_assign_array_", _assign_array_PushNotificationChannel, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PushNotificationChannel), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PushNotificationChannel[] = {
        { "expiration_time", reinterpret_cast<getter>(PushNotificationChannel_get_ExpirationTime), nullptr, nullptr, nullptr },
        { "uri", reinterpret_cast<getter>(PushNotificationChannel_get_Uri), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PushNotificationChannel[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PushNotificationChannel) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PushNotificationChannel) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PushNotificationChannel) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PushNotificationChannel) },
        { },
    };

    static PyType_Spec type_spec_PushNotificationChannel =
    {
        "_winsdk_Windows_Networking_PushNotifications.PushNotificationChannel",
        sizeof(py::wrapper::Windows::Networking::PushNotifications::PushNotificationChannel),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PushNotificationChannel
    };

    // ----- PushNotificationChannelManager class --------------------
    static constexpr const char* const type_name_PushNotificationChannelManager = "PushNotificationChannelManager";

    static PyObject* _new_PushNotificationChannelManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_PushNotificationChannelManager);
        return nullptr;
    }

    static PyObject* PushNotificationChannelManager_CreatePushNotificationChannelForApplicationAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Networking.PushNotifications.PushNotificationChannelManager", L"CreatePushNotificationChannelForApplicationAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Networking::PushNotifications::PushNotificationChannelManager::CreatePushNotificationChannelForApplicationAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Networking.PushNotifications.PushNotificationChannelManager", L"CreatePushNotificationChannelForApplicationAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Networking::PushNotifications::PushNotificationChannelManager::CreatePushNotificationChannelForApplicationAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PushNotificationChannelManager_CreatePushNotificationChannelForSecondaryTileAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Networking.PushNotifications.PushNotificationChannelManager", L"CreatePushNotificationChannelForSecondaryTileAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Networking::PushNotifications::PushNotificationChannelManager::CreatePushNotificationChannelForSecondaryTileAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PushNotificationChannelManager_GetDefault(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Networking.PushNotifications.PushNotificationChannelManager", L"GetDefault", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Networking::PushNotifications::PushNotificationChannelManager::GetDefault());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PushNotificationChannelManager_GetForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Networking.PushNotifications.PushNotificationChannelManager", L"GetForUser", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::Networking::PushNotifications::PushNotificationChannelManager::GetForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PushNotificationChannelManager_add_ChannelsRevoked(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Networking.PushNotifications.PushNotificationChannelManager", L"ChannelsRevoked"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Networking::PushNotifications::PushNotificationChannelsRevokedEventArgs>>(arg);

            return py::convert(winrt::Windows::Networking::PushNotifications::PushNotificationChannelManager::ChannelsRevoked(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PushNotificationChannelManager_remove_ChannelsRevoked(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Networking.PushNotifications.PushNotificationChannelManager", L"ChannelsRevoked"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::Networking::PushNotifications::PushNotificationChannelManager::ChannelsRevoked(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PushNotificationChannelManager[] = {
        { "create_push_notification_channel_for_application_async", reinterpret_cast<PyCFunction>(PushNotificationChannelManager_CreatePushNotificationChannelForApplicationAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "create_push_notification_channel_for_secondary_tile_async", reinterpret_cast<PyCFunction>(PushNotificationChannelManager_CreatePushNotificationChannelForSecondaryTileAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_default", reinterpret_cast<PyCFunction>(PushNotificationChannelManager_GetDefault), METH_VARARGS | METH_STATIC, nullptr },
        { "get_for_user", reinterpret_cast<PyCFunction>(PushNotificationChannelManager_GetForUser), METH_VARARGS | METH_STATIC, nullptr },
        { "add_channels_revoked", reinterpret_cast<PyCFunction>(PushNotificationChannelManager_add_ChannelsRevoked), METH_O | METH_STATIC, nullptr },
        { "remove_channels_revoked", reinterpret_cast<PyCFunction>(PushNotificationChannelManager_remove_ChannelsRevoked), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PushNotificationChannelManager[] = {
        { }
    };

    static PyType_Slot _type_slots_PushNotificationChannelManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PushNotificationChannelManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PushNotificationChannelManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PushNotificationChannelManager) },
        { },
    };

    static PyType_Spec type_spec_PushNotificationChannelManager =
    {
        "_winsdk_Windows_Networking_PushNotifications.PushNotificationChannelManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PushNotificationChannelManager
    };

    // ----- PushNotificationChannelManagerForUser class --------------------
    static constexpr const char* const type_name_PushNotificationChannelManagerForUser = "PushNotificationChannelManagerForUser";

    static PyObject* _new_PushNotificationChannelManagerForUser(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_PushNotificationChannelManagerForUser);
        return nullptr;
    }

    static void _dealloc_PushNotificationChannelManagerForUser(py::wrapper::Windows::Networking::PushNotifications::PushNotificationChannelManagerForUser* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PushNotificationChannelManagerForUser_CreatePushNotificationChannelForApplicationAsync(py::wrapper::Windows::Networking::PushNotifications::PushNotificationChannelManagerForUser* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser", L"CreatePushNotificationChannelForApplicationAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.CreatePushNotificationChannelForApplicationAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser", L"CreatePushNotificationChannelForApplicationAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.CreatePushNotificationChannelForApplicationAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PushNotificationChannelManagerForUser_CreatePushNotificationChannelForSecondaryTileAsync(py::wrapper::Windows::Networking::PushNotifications::PushNotificationChannelManagerForUser* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser", L"CreatePushNotificationChannelForSecondaryTileAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.CreatePushNotificationChannelForSecondaryTileAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PushNotificationChannelManagerForUser_CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync(py::wrapper::Windows::Networking::PushNotifications::PushNotificationChannelManagerForUser* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser", L"CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser", L"CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                return py::convert(self->obj.CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PushNotificationChannelManagerForUser_get_User(py::wrapper::Windows::Networking::PushNotifications::PushNotificationChannelManagerForUser* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser", L"User"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PushNotificationChannelManagerForUser(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Networking::PushNotifications::PushNotificationChannelManagerForUser>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PushNotificationChannelManagerForUser(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Networking::PushNotifications::PushNotificationChannelManagerForUser>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PushNotificationChannelManagerForUser[] = {
        { "create_push_notification_channel_for_application_async", reinterpret_cast<PyCFunction>(PushNotificationChannelManagerForUser_CreatePushNotificationChannelForApplicationAsync), METH_VARARGS, nullptr },
        { "create_push_notification_channel_for_secondary_tile_async", reinterpret_cast<PyCFunction>(PushNotificationChannelManagerForUser_CreatePushNotificationChannelForSecondaryTileAsync), METH_VARARGS, nullptr },
        { "create_raw_push_notification_channel_with_alternate_key_for_application_async", reinterpret_cast<PyCFunction>(PushNotificationChannelManagerForUser_CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_PushNotificationChannelManagerForUser, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PushNotificationChannelManagerForUser), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PushNotificationChannelManagerForUser[] = {
        { "user", reinterpret_cast<getter>(PushNotificationChannelManagerForUser_get_User), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PushNotificationChannelManagerForUser[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PushNotificationChannelManagerForUser) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PushNotificationChannelManagerForUser) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PushNotificationChannelManagerForUser) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PushNotificationChannelManagerForUser) },
        { },
    };

    static PyType_Spec type_spec_PushNotificationChannelManagerForUser =
    {
        "_winsdk_Windows_Networking_PushNotifications.PushNotificationChannelManagerForUser",
        sizeof(py::wrapper::Windows::Networking::PushNotifications::PushNotificationChannelManagerForUser),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PushNotificationChannelManagerForUser
    };

    // ----- PushNotificationChannelsRevokedEventArgs class --------------------
    static constexpr const char* const type_name_PushNotificationChannelsRevokedEventArgs = "PushNotificationChannelsRevokedEventArgs";

    static PyObject* _new_PushNotificationChannelsRevokedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_PushNotificationChannelsRevokedEventArgs);
        return nullptr;
    }

    static void _dealloc_PushNotificationChannelsRevokedEventArgs(py::wrapper::Windows::Networking::PushNotifications::PushNotificationChannelsRevokedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_PushNotificationChannelsRevokedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Networking::PushNotifications::PushNotificationChannelsRevokedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PushNotificationChannelsRevokedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Networking::PushNotifications::PushNotificationChannelsRevokedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PushNotificationChannelsRevokedEventArgs[] = {
        { "_assign_array_", _assign_array_PushNotificationChannelsRevokedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PushNotificationChannelsRevokedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PushNotificationChannelsRevokedEventArgs[] = {
        { }
    };

    static PyType_Slot _type_slots_PushNotificationChannelsRevokedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PushNotificationChannelsRevokedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PushNotificationChannelsRevokedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PushNotificationChannelsRevokedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PushNotificationChannelsRevokedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_PushNotificationChannelsRevokedEventArgs =
    {
        "_winsdk_Windows_Networking_PushNotifications.PushNotificationChannelsRevokedEventArgs",
        sizeof(py::wrapper::Windows::Networking::PushNotifications::PushNotificationChannelsRevokedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PushNotificationChannelsRevokedEventArgs
    };

    // ----- PushNotificationReceivedEventArgs class --------------------
    static constexpr const char* const type_name_PushNotificationReceivedEventArgs = "PushNotificationReceivedEventArgs";

    static PyObject* _new_PushNotificationReceivedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_PushNotificationReceivedEventArgs);
        return nullptr;
    }

    static void _dealloc_PushNotificationReceivedEventArgs(py::wrapper::Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PushNotificationReceivedEventArgs_get_Cancel(py::wrapper::Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs", L"Cancel"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Cancel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PushNotificationReceivedEventArgs_put_Cancel(py::wrapper::Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs", L"Cancel"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Cancel(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PushNotificationReceivedEventArgs_get_BadgeNotification(py::wrapper::Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs", L"BadgeNotification"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BadgeNotification());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PushNotificationReceivedEventArgs_get_NotificationType(py::wrapper::Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs", L"NotificationType"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.NotificationType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PushNotificationReceivedEventArgs_get_RawNotification(py::wrapper::Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs", L"RawNotification"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RawNotification());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PushNotificationReceivedEventArgs_get_TileNotification(py::wrapper::Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs", L"TileNotification"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TileNotification());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PushNotificationReceivedEventArgs_get_ToastNotification(py::wrapper::Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs", L"ToastNotification"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ToastNotification());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PushNotificationReceivedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PushNotificationReceivedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PushNotificationReceivedEventArgs[] = {
        { "_assign_array_", _assign_array_PushNotificationReceivedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PushNotificationReceivedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PushNotificationReceivedEventArgs[] = {
        { "cancel", reinterpret_cast<getter>(PushNotificationReceivedEventArgs_get_Cancel), reinterpret_cast<setter>(PushNotificationReceivedEventArgs_put_Cancel), nullptr, nullptr },
        { "badge_notification", reinterpret_cast<getter>(PushNotificationReceivedEventArgs_get_BadgeNotification), nullptr, nullptr, nullptr },
        { "notification_type", reinterpret_cast<getter>(PushNotificationReceivedEventArgs_get_NotificationType), nullptr, nullptr, nullptr },
        { "raw_notification", reinterpret_cast<getter>(PushNotificationReceivedEventArgs_get_RawNotification), nullptr, nullptr, nullptr },
        { "tile_notification", reinterpret_cast<getter>(PushNotificationReceivedEventArgs_get_TileNotification), nullptr, nullptr, nullptr },
        { "toast_notification", reinterpret_cast<getter>(PushNotificationReceivedEventArgs_get_ToastNotification), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PushNotificationReceivedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PushNotificationReceivedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PushNotificationReceivedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PushNotificationReceivedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PushNotificationReceivedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_PushNotificationReceivedEventArgs =
    {
        "_winsdk_Windows_Networking_PushNotifications.PushNotificationReceivedEventArgs",
        sizeof(py::wrapper::Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PushNotificationReceivedEventArgs
    };

    // ----- RawNotification class --------------------
    static constexpr const char* const type_name_RawNotification = "RawNotification";

    static PyObject* _new_RawNotification(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_RawNotification);
        return nullptr;
    }

    static void _dealloc_RawNotification(py::wrapper::Windows::Networking::PushNotifications::RawNotification* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* RawNotification_get_Content(py::wrapper::Windows::Networking::PushNotifications::RawNotification* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Networking.PushNotifications.RawNotification", L"Content"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Content());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RawNotification_get_ChannelId(py::wrapper::Windows::Networking::PushNotifications::RawNotification* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Networking.PushNotifications.RawNotification", L"ChannelId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ChannelId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RawNotification_get_Headers(py::wrapper::Windows::Networking::PushNotifications::RawNotification* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Networking.PushNotifications.RawNotification", L"Headers"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Headers());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RawNotification_get_ContentBytes(py::wrapper::Windows::Networking::PushNotifications::RawNotification* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Networking.PushNotifications.RawNotification", L"ContentBytes"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ContentBytes());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_RawNotification(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Networking::PushNotifications::RawNotification>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_RawNotification(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Networking::PushNotifications::RawNotification>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_RawNotification[] = {
        { "_assign_array_", _assign_array_RawNotification, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_RawNotification), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_RawNotification[] = {
        { "content", reinterpret_cast<getter>(RawNotification_get_Content), nullptr, nullptr, nullptr },
        { "channel_id", reinterpret_cast<getter>(RawNotification_get_ChannelId), nullptr, nullptr, nullptr },
        { "headers", reinterpret_cast<getter>(RawNotification_get_Headers), nullptr, nullptr, nullptr },
        { "content_bytes", reinterpret_cast<getter>(RawNotification_get_ContentBytes), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_RawNotification[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_RawNotification) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_RawNotification) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_RawNotification) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_RawNotification) },
        { },
    };

    static PyType_Spec type_spec_RawNotification =
    {
        "_winsdk_Windows_Networking_PushNotifications.RawNotification",
        sizeof(py::wrapper::Windows::Networking::PushNotifications::RawNotification),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_RawNotification
    };

    // ----- Windows.Networking.PushNotifications Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Networking::PushNotifications");

    static PyMethodDef module_methods[] = {
        {"_register_PushNotificationType", register_PushNotificationType, METH_O, "registers type"},
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_PushNotificationType);
        Py_VISIT(state->type_PushNotificationChannel);
        Py_VISIT(state->type_PushNotificationChannelManager);
        Py_VISIT(state->type_PushNotificationChannelManagerForUser);
        Py_VISIT(state->type_PushNotificationChannelsRevokedEventArgs);
        Py_VISIT(state->type_PushNotificationReceivedEventArgs);
        Py_VISIT(state->type_RawNotification);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_PushNotificationType);
        Py_CLEAR(state->type_PushNotificationChannel);
        Py_CLEAR(state->type_PushNotificationChannelManager);
        Py_CLEAR(state->type_PushNotificationChannelManagerForUser);
        Py_CLEAR(state->type_PushNotificationChannelsRevokedEventArgs);
        Py_CLEAR(state->type_PushNotificationReceivedEventArgs);
        Py_CLEAR(state->type_RawNotification);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Networking_PushNotifications",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Networking::PushNotifications

PyMODINIT_FUNC PyInit__winsdk_Windows_Networking_PushNotifications(void) noexcept
{
    using namespace py::cpp::Windows::Networking::PushNotifications;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_PushNotificationChannel = py::register_python_type(module.get(), type_name_PushNotificationChannel, &type_spec_PushNotificationChannel, bases.get(), nullptr);
    if (!state->type_PushNotificationChannel)
    {
        return nullptr;
    }

    state->type_PushNotificationChannelManager = py::register_python_type(module.get(), type_name_PushNotificationChannelManager, &type_spec_PushNotificationChannelManager, nullptr, nullptr);
    if (!state->type_PushNotificationChannelManager)
    {
        return nullptr;
    }

    state->type_PushNotificationChannelManagerForUser = py::register_python_type(module.get(), type_name_PushNotificationChannelManagerForUser, &type_spec_PushNotificationChannelManagerForUser, bases.get(), nullptr);
    if (!state->type_PushNotificationChannelManagerForUser)
    {
        return nullptr;
    }

    state->type_PushNotificationChannelsRevokedEventArgs = py::register_python_type(module.get(), type_name_PushNotificationChannelsRevokedEventArgs, &type_spec_PushNotificationChannelsRevokedEventArgs, bases.get(), nullptr);
    if (!state->type_PushNotificationChannelsRevokedEventArgs)
    {
        return nullptr;
    }

    state->type_PushNotificationReceivedEventArgs = py::register_python_type(module.get(), type_name_PushNotificationReceivedEventArgs, &type_spec_PushNotificationReceivedEventArgs, bases.get(), nullptr);
    if (!state->type_PushNotificationReceivedEventArgs)
    {
        return nullptr;
    }

    state->type_RawNotification = py::register_python_type(module.get(), type_name_RawNotification, &type_spec_RawNotification, bases.get(), nullptr);
    if (!state->type_RawNotification)
    {
        return nullptr;
    }


    return module.detach();
}

PyObject* py::py_type<winrt::Windows::Networking::PushNotifications::PushNotificationType>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Networking::PushNotifications;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Networking::PushNotifications");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PushNotificationType;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Networking::PushNotifications::PushNotificationType is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Networking::PushNotifications::PushNotificationChannel>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Networking::PushNotifications;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Networking::PushNotifications");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PushNotificationChannel;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Networking::PushNotifications::PushNotificationChannel is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Networking::PushNotifications::PushNotificationChannelManager>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Networking::PushNotifications;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Networking::PushNotifications");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PushNotificationChannelManager;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Networking::PushNotifications::PushNotificationChannelManager is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Networking::PushNotifications::PushNotificationChannelManagerForUser>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Networking::PushNotifications;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Networking::PushNotifications");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PushNotificationChannelManagerForUser;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Networking::PushNotifications::PushNotificationChannelManagerForUser is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Networking::PushNotifications::PushNotificationChannelsRevokedEventArgs>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Networking::PushNotifications;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Networking::PushNotifications");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PushNotificationChannelsRevokedEventArgs;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Networking::PushNotifications::PushNotificationChannelsRevokedEventArgs is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Networking::PushNotifications;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Networking::PushNotifications");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PushNotificationReceivedEventArgs;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Networking::PushNotifications::RawNotification>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Networking::PushNotifications;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Networking::PushNotifications");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_RawNotification;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Networking::PushNotifications::RawNotification is not registered");
        return nullptr;
    }

    return python_type;
}
