// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.Security.Authentication.Identity.h"


namespace py::cpp::Windows::Security::Authentication::Identity
{
    struct module_state
    {
        PyTypeObject* type_EnterpriseKeyCredentialRegistrationInfo;
        PyTypeObject* type_EnterpriseKeyCredentialRegistrationManager;
    };

    // ----- EnterpriseKeyCredentialRegistrationInfo class --------------------
    static constexpr const char* const type_name_EnterpriseKeyCredentialRegistrationInfo = "EnterpriseKeyCredentialRegistrationInfo";

    static PyObject* _new_EnterpriseKeyCredentialRegistrationInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_EnterpriseKeyCredentialRegistrationInfo);
        return nullptr;
    }

    static void _dealloc_EnterpriseKeyCredentialRegistrationInfo(py::wrapper::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationInfo* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* EnterpriseKeyCredentialRegistrationInfo_get_KeyId(py::wrapper::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Identity.EnterpriseKeyCredentialRegistrationInfo", L"KeyId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.KeyId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EnterpriseKeyCredentialRegistrationInfo_get_KeyName(py::wrapper::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Identity.EnterpriseKeyCredentialRegistrationInfo", L"KeyName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.KeyName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EnterpriseKeyCredentialRegistrationInfo_get_Subject(py::wrapper::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Identity.EnterpriseKeyCredentialRegistrationInfo", L"Subject"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Subject());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EnterpriseKeyCredentialRegistrationInfo_get_TenantId(py::wrapper::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Identity.EnterpriseKeyCredentialRegistrationInfo", L"TenantId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TenantId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EnterpriseKeyCredentialRegistrationInfo_get_TenantName(py::wrapper::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Identity.EnterpriseKeyCredentialRegistrationInfo", L"TenantName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TenantName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_EnterpriseKeyCredentialRegistrationInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationInfo>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_EnterpriseKeyCredentialRegistrationInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_EnterpriseKeyCredentialRegistrationInfo[] = {
        { "_assign_array_", _assign_array_EnterpriseKeyCredentialRegistrationInfo, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_EnterpriseKeyCredentialRegistrationInfo), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_EnterpriseKeyCredentialRegistrationInfo[] = {
        { "key_id", reinterpret_cast<getter>(EnterpriseKeyCredentialRegistrationInfo_get_KeyId), nullptr, nullptr, nullptr },
        { "key_name", reinterpret_cast<getter>(EnterpriseKeyCredentialRegistrationInfo_get_KeyName), nullptr, nullptr, nullptr },
        { "subject", reinterpret_cast<getter>(EnterpriseKeyCredentialRegistrationInfo_get_Subject), nullptr, nullptr, nullptr },
        { "tenant_id", reinterpret_cast<getter>(EnterpriseKeyCredentialRegistrationInfo_get_TenantId), nullptr, nullptr, nullptr },
        { "tenant_name", reinterpret_cast<getter>(EnterpriseKeyCredentialRegistrationInfo_get_TenantName), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_EnterpriseKeyCredentialRegistrationInfo[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_EnterpriseKeyCredentialRegistrationInfo) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_EnterpriseKeyCredentialRegistrationInfo) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_EnterpriseKeyCredentialRegistrationInfo) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_EnterpriseKeyCredentialRegistrationInfo) },
        { },
    };

    static PyType_Spec type_spec_EnterpriseKeyCredentialRegistrationInfo =
    {
        "_winsdk_Windows_Security_Authentication_Identity.EnterpriseKeyCredentialRegistrationInfo",
        sizeof(py::wrapper::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_EnterpriseKeyCredentialRegistrationInfo
    };

    // ----- EnterpriseKeyCredentialRegistrationManager class --------------------
    static constexpr const char* const type_name_EnterpriseKeyCredentialRegistrationManager = "EnterpriseKeyCredentialRegistrationManager";

    static PyObject* _new_EnterpriseKeyCredentialRegistrationManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_EnterpriseKeyCredentialRegistrationManager);
        return nullptr;
    }

    static void _dealloc_EnterpriseKeyCredentialRegistrationManager(py::wrapper::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationManager* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* EnterpriseKeyCredentialRegistrationManager_GetRegistrationsAsync(py::wrapper::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Identity.EnterpriseKeyCredentialRegistrationManager", L"GetRegistrationsAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetRegistrationsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* EnterpriseKeyCredentialRegistrationManager_get_Current(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Identity.EnterpriseKeyCredentialRegistrationManager", L"Current"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationManager::Current());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_EnterpriseKeyCredentialRegistrationManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationManager>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_EnterpriseKeyCredentialRegistrationManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_EnterpriseKeyCredentialRegistrationManager[] = {
        { "get_registrations_async", reinterpret_cast<PyCFunction>(EnterpriseKeyCredentialRegistrationManager_GetRegistrationsAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_EnterpriseKeyCredentialRegistrationManager, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_EnterpriseKeyCredentialRegistrationManager), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_EnterpriseKeyCredentialRegistrationManager[] = {
        { }
    };

    static PyType_Slot _type_slots_EnterpriseKeyCredentialRegistrationManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_EnterpriseKeyCredentialRegistrationManager) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_EnterpriseKeyCredentialRegistrationManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_EnterpriseKeyCredentialRegistrationManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_EnterpriseKeyCredentialRegistrationManager) },
        { },
    };

    static PyType_Spec type_spec_EnterpriseKeyCredentialRegistrationManager =
    {
        "_winsdk_Windows_Security_Authentication_Identity.EnterpriseKeyCredentialRegistrationManager",
        sizeof(py::wrapper::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_EnterpriseKeyCredentialRegistrationManager
    };

    static PyGetSetDef getset_EnterpriseKeyCredentialRegistrationManager_Meta[] = {
        { "current", reinterpret_cast<getter>(EnterpriseKeyCredentialRegistrationManager_get_Current), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot type_slots_EnterpriseKeyCredentialRegistrationManager_Meta[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_EnterpriseKeyCredentialRegistrationManager_Meta) },
        { }
    };

    static PyType_Spec type_spec_EnterpriseKeyCredentialRegistrationManager_Meta =
    {
        "_winsdk_Windows_Security_Authentication_Identity.EnterpriseKeyCredentialRegistrationManager_Meta",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_EnterpriseKeyCredentialRegistrationManager_Meta
    };

    // ----- Windows.Security.Authentication.Identity Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Security::Authentication::Identity");

    static PyMethodDef module_methods[] = {
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_EnterpriseKeyCredentialRegistrationInfo);
        Py_VISIT(state->type_EnterpriseKeyCredentialRegistrationManager);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_EnterpriseKeyCredentialRegistrationInfo);
        Py_CLEAR(state->type_EnterpriseKeyCredentialRegistrationManager);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Security_Authentication_Identity",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Security::Authentication::Identity

PyMODINIT_FUNC PyInit__winsdk_Windows_Security_Authentication_Identity(void) noexcept
{
    using namespace py::cpp::Windows::Security::Authentication::Identity;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_EnterpriseKeyCredentialRegistrationInfo = py::register_python_type(module.get(), type_name_EnterpriseKeyCredentialRegistrationInfo, &type_spec_EnterpriseKeyCredentialRegistrationInfo, bases.get(), nullptr);
    if (!state->type_EnterpriseKeyCredentialRegistrationInfo)
    {
        return nullptr;
    }

    py::pyobj_handle type_EnterpriseKeyCredentialRegistrationManager_Meta{PyType_FromSpec(&type_spec_EnterpriseKeyCredentialRegistrationManager_Meta)};
    if (!type_EnterpriseKeyCredentialRegistrationManager_Meta)
    {
        return nullptr;
    }

    state->type_EnterpriseKeyCredentialRegistrationManager = py::register_python_type(module.get(), type_name_EnterpriseKeyCredentialRegistrationManager, &type_spec_EnterpriseKeyCredentialRegistrationManager, bases.get(), reinterpret_cast<PyTypeObject*>(type_EnterpriseKeyCredentialRegistrationManager_Meta.get()));
    if (!state->type_EnterpriseKeyCredentialRegistrationManager)
    {
        return nullptr;
    }


    return module.detach();
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationInfo>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Identity;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Identity");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_EnterpriseKeyCredentialRegistrationInfo;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationInfo is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationManager>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Identity;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Identity");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_EnterpriseKeyCredentialRegistrationManager;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationManager is not registered");
        return nullptr;
    }

    return python_type;
}
