// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.Security.Credentials.UI.h"


namespace py::cpp::Windows::Security::Credentials::UI
{
    struct module_state
    {
        PyObject* type_AuthenticationProtocol;
        PyObject* type_CredentialSaveOption;
        PyObject* type_UserConsentVerificationResult;
        PyObject* type_UserConsentVerifierAvailability;
        PyTypeObject* type_CredentialPicker;
        PyTypeObject* type_CredentialPickerOptions;
        PyTypeObject* type_CredentialPickerResults;
        PyTypeObject* type_UserConsentVerifier;
    };

    static PyObject* register_AuthenticationProtocol(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_AuthenticationProtocol)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_AuthenticationProtocol = type;
        Py_INCREF(state->type_AuthenticationProtocol);


        Py_RETURN_NONE;
    }

    static PyObject* register_CredentialSaveOption(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_CredentialSaveOption)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_CredentialSaveOption = type;
        Py_INCREF(state->type_CredentialSaveOption);


        Py_RETURN_NONE;
    }

    static PyObject* register_UserConsentVerificationResult(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_UserConsentVerificationResult)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_UserConsentVerificationResult = type;
        Py_INCREF(state->type_UserConsentVerificationResult);


        Py_RETURN_NONE;
    }

    static PyObject* register_UserConsentVerifierAvailability(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_UserConsentVerifierAvailability)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_UserConsentVerifierAvailability = type;
        Py_INCREF(state->type_UserConsentVerifierAvailability);


        Py_RETURN_NONE;
    }

    // ----- CredentialPicker class --------------------
    static constexpr const char* const type_name_CredentialPicker = "CredentialPicker";

    static PyObject* _new_CredentialPicker(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_CredentialPicker);
        return nullptr;
    }

    static PyObject* CredentialPicker_PickAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Credentials.UI.CredentialPicker", L"PickAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::UI::CredentialPickerOptions>(args, 0);

                return py::convert(winrt::Windows::Security::Credentials::UI::CredentialPicker::PickAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Credentials.UI.CredentialPicker", L"PickAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Security::Credentials::UI::CredentialPicker::PickAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Credentials.UI.CredentialPicker", L"PickAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                return py::convert(winrt::Windows::Security::Credentials::UI::CredentialPicker::PickAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_CredentialPicker[] = {
        { "pick_async", reinterpret_cast<PyCFunction>(CredentialPicker_PickAsync), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CredentialPicker[] = {
        { }
    };

    static PyType_Slot _type_slots_CredentialPicker[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CredentialPicker) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CredentialPicker) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CredentialPicker) },
        { },
    };

    static PyType_Spec type_spec_CredentialPicker =
    {
        "_winsdk_Windows_Security_Credentials_UI.CredentialPicker",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CredentialPicker
    };

    // ----- CredentialPickerOptions class --------------------
    static constexpr const char* const type_name_CredentialPickerOptions = "CredentialPickerOptions";

    static PyObject* _new_CredentialPickerOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Security::Credentials::UI::CredentialPickerOptions instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_CredentialPickerOptions(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* CredentialPickerOptions_get_TargetName(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"TargetName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TargetName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_TargetName(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"TargetName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.TargetName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_PreviousCredential(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"PreviousCredential"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PreviousCredential());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_PreviousCredential(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"PreviousCredential"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(arg);

            self->obj.PreviousCredential(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_Message(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"Message"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Message());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_Message(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"Message"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Message(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_ErrorCode(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"ErrorCode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ErrorCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_ErrorCode(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"ErrorCode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.ErrorCode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_CustomAuthenticationProtocol(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"CustomAuthenticationProtocol"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CustomAuthenticationProtocol());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_CustomAuthenticationProtocol(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"CustomAuthenticationProtocol"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.CustomAuthenticationProtocol(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_CredentialSaveOption(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"CredentialSaveOption"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CredentialSaveOption());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_CredentialSaveOption(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"CredentialSaveOption"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Security::Credentials::UI::CredentialSaveOption>(arg);

            self->obj.CredentialSaveOption(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_Caption(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"Caption"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Caption());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_Caption(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"Caption"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Caption(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_CallerSavesCredential(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"CallerSavesCredential"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CallerSavesCredential());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_CallerSavesCredential(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"CallerSavesCredential"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.CallerSavesCredential(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_AuthenticationProtocol(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"AuthenticationProtocol"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AuthenticationProtocol());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_AuthenticationProtocol(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"AuthenticationProtocol"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Security::Credentials::UI::AuthenticationProtocol>(arg);

            self->obj.AuthenticationProtocol(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_AlwaysDisplayDialog(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"AlwaysDisplayDialog"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AlwaysDisplayDialog());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_AlwaysDisplayDialog(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"AlwaysDisplayDialog"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.AlwaysDisplayDialog(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_CredentialPickerOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Credentials::UI::CredentialPickerOptions>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_CredentialPickerOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Credentials::UI::CredentialPickerOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CredentialPickerOptions[] = {
        { "_assign_array_", _assign_array_CredentialPickerOptions, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CredentialPickerOptions), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CredentialPickerOptions[] = {
        { "target_name", reinterpret_cast<getter>(CredentialPickerOptions_get_TargetName), reinterpret_cast<setter>(CredentialPickerOptions_put_TargetName), nullptr, nullptr },
        { "previous_credential", reinterpret_cast<getter>(CredentialPickerOptions_get_PreviousCredential), reinterpret_cast<setter>(CredentialPickerOptions_put_PreviousCredential), nullptr, nullptr },
        { "message", reinterpret_cast<getter>(CredentialPickerOptions_get_Message), reinterpret_cast<setter>(CredentialPickerOptions_put_Message), nullptr, nullptr },
        { "error_code", reinterpret_cast<getter>(CredentialPickerOptions_get_ErrorCode), reinterpret_cast<setter>(CredentialPickerOptions_put_ErrorCode), nullptr, nullptr },
        { "custom_authentication_protocol", reinterpret_cast<getter>(CredentialPickerOptions_get_CustomAuthenticationProtocol), reinterpret_cast<setter>(CredentialPickerOptions_put_CustomAuthenticationProtocol), nullptr, nullptr },
        { "credential_save_option", reinterpret_cast<getter>(CredentialPickerOptions_get_CredentialSaveOption), reinterpret_cast<setter>(CredentialPickerOptions_put_CredentialSaveOption), nullptr, nullptr },
        { "caption", reinterpret_cast<getter>(CredentialPickerOptions_get_Caption), reinterpret_cast<setter>(CredentialPickerOptions_put_Caption), nullptr, nullptr },
        { "caller_saves_credential", reinterpret_cast<getter>(CredentialPickerOptions_get_CallerSavesCredential), reinterpret_cast<setter>(CredentialPickerOptions_put_CallerSavesCredential), nullptr, nullptr },
        { "authentication_protocol", reinterpret_cast<getter>(CredentialPickerOptions_get_AuthenticationProtocol), reinterpret_cast<setter>(CredentialPickerOptions_put_AuthenticationProtocol), nullptr, nullptr },
        { "always_display_dialog", reinterpret_cast<getter>(CredentialPickerOptions_get_AlwaysDisplayDialog), reinterpret_cast<setter>(CredentialPickerOptions_put_AlwaysDisplayDialog), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_CredentialPickerOptions[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CredentialPickerOptions) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_CredentialPickerOptions) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CredentialPickerOptions) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CredentialPickerOptions) },
        { },
    };

    static PyType_Spec type_spec_CredentialPickerOptions =
    {
        "_winsdk_Windows_Security_Credentials_UI.CredentialPickerOptions",
        sizeof(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CredentialPickerOptions
    };

    // ----- CredentialPickerResults class --------------------
    static constexpr const char* const type_name_CredentialPickerResults = "CredentialPickerResults";

    static PyObject* _new_CredentialPickerResults(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_CredentialPickerResults);
        return nullptr;
    }

    static void _dealloc_CredentialPickerResults(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* CredentialPickerResults_get_Credential(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerResults", L"Credential"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Credential());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CredentialPickerResults_get_CredentialDomainName(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerResults", L"CredentialDomainName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CredentialDomainName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CredentialPickerResults_get_CredentialPassword(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerResults", L"CredentialPassword"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CredentialPassword());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CredentialPickerResults_get_CredentialSaveOption(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerResults", L"CredentialSaveOption"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CredentialSaveOption());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CredentialPickerResults_get_CredentialSaved(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerResults", L"CredentialSaved"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CredentialSaved());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CredentialPickerResults_get_CredentialUserName(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerResults", L"CredentialUserName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CredentialUserName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CredentialPickerResults_get_ErrorCode(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerResults", L"ErrorCode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ErrorCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_CredentialPickerResults(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Credentials::UI::CredentialPickerResults>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_CredentialPickerResults(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Credentials::UI::CredentialPickerResults>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CredentialPickerResults[] = {
        { "_assign_array_", _assign_array_CredentialPickerResults, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CredentialPickerResults), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CredentialPickerResults[] = {
        { "credential", reinterpret_cast<getter>(CredentialPickerResults_get_Credential), nullptr, nullptr, nullptr },
        { "credential_domain_name", reinterpret_cast<getter>(CredentialPickerResults_get_CredentialDomainName), nullptr, nullptr, nullptr },
        { "credential_password", reinterpret_cast<getter>(CredentialPickerResults_get_CredentialPassword), nullptr, nullptr, nullptr },
        { "credential_save_option", reinterpret_cast<getter>(CredentialPickerResults_get_CredentialSaveOption), nullptr, nullptr, nullptr },
        { "credential_saved", reinterpret_cast<getter>(CredentialPickerResults_get_CredentialSaved), nullptr, nullptr, nullptr },
        { "credential_user_name", reinterpret_cast<getter>(CredentialPickerResults_get_CredentialUserName), nullptr, nullptr, nullptr },
        { "error_code", reinterpret_cast<getter>(CredentialPickerResults_get_ErrorCode), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_CredentialPickerResults[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CredentialPickerResults) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_CredentialPickerResults) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CredentialPickerResults) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CredentialPickerResults) },
        { },
    };

    static PyType_Spec type_spec_CredentialPickerResults =
    {
        "_winsdk_Windows_Security_Credentials_UI.CredentialPickerResults",
        sizeof(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CredentialPickerResults
    };

    // ----- UserConsentVerifier class --------------------
    static constexpr const char* const type_name_UserConsentVerifier = "UserConsentVerifier";

    static PyObject* _new_UserConsentVerifier(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_UserConsentVerifier);
        return nullptr;
    }

    static PyObject* UserConsentVerifier_CheckAvailabilityAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Credentials.UI.UserConsentVerifier", L"CheckAvailabilityAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Security::Credentials::UI::UserConsentVerifier::CheckAvailabilityAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserConsentVerifier_RequestVerificationAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Credentials.UI.UserConsentVerifier", L"RequestVerificationAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Security::Credentials::UI::UserConsentVerifier::RequestVerificationAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserConsentVerifier[] = {
        { "check_availability_async", reinterpret_cast<PyCFunction>(UserConsentVerifier_CheckAvailabilityAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "request_verification_async", reinterpret_cast<PyCFunction>(UserConsentVerifier_RequestVerificationAsync), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UserConsentVerifier[] = {
        { }
    };

    static PyType_Slot _type_slots_UserConsentVerifier[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UserConsentVerifier) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UserConsentVerifier) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UserConsentVerifier) },
        { },
    };

    static PyType_Spec type_spec_UserConsentVerifier =
    {
        "_winsdk_Windows_Security_Credentials_UI.UserConsentVerifier",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserConsentVerifier
    };

    // ----- Windows.Security.Credentials.UI Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Security::Credentials::UI");

    static PyMethodDef module_methods[] = {
        {"_register_AuthenticationProtocol", register_AuthenticationProtocol, METH_O, "registers type"},
        {"_register_CredentialSaveOption", register_CredentialSaveOption, METH_O, "registers type"},
        {"_register_UserConsentVerificationResult", register_UserConsentVerificationResult, METH_O, "registers type"},
        {"_register_UserConsentVerifierAvailability", register_UserConsentVerifierAvailability, METH_O, "registers type"},
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_AuthenticationProtocol);
        Py_VISIT(state->type_CredentialSaveOption);
        Py_VISIT(state->type_UserConsentVerificationResult);
        Py_VISIT(state->type_UserConsentVerifierAvailability);
        Py_VISIT(state->type_CredentialPicker);
        Py_VISIT(state->type_CredentialPickerOptions);
        Py_VISIT(state->type_CredentialPickerResults);
        Py_VISIT(state->type_UserConsentVerifier);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_AuthenticationProtocol);
        Py_CLEAR(state->type_CredentialSaveOption);
        Py_CLEAR(state->type_UserConsentVerificationResult);
        Py_CLEAR(state->type_UserConsentVerifierAvailability);
        Py_CLEAR(state->type_CredentialPicker);
        Py_CLEAR(state->type_CredentialPickerOptions);
        Py_CLEAR(state->type_CredentialPickerResults);
        Py_CLEAR(state->type_UserConsentVerifier);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Security_Credentials_UI",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Security::Credentials::UI

PyMODINIT_FUNC PyInit__winsdk_Windows_Security_Credentials_UI(void) noexcept
{
    using namespace py::cpp::Windows::Security::Credentials::UI;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_CredentialPicker = py::register_python_type(module.get(), type_name_CredentialPicker, &type_spec_CredentialPicker, nullptr, nullptr);
    if (!state->type_CredentialPicker)
    {
        return nullptr;
    }

    state->type_CredentialPickerOptions = py::register_python_type(module.get(), type_name_CredentialPickerOptions, &type_spec_CredentialPickerOptions, bases.get(), nullptr);
    if (!state->type_CredentialPickerOptions)
    {
        return nullptr;
    }

    state->type_CredentialPickerResults = py::register_python_type(module.get(), type_name_CredentialPickerResults, &type_spec_CredentialPickerResults, bases.get(), nullptr);
    if (!state->type_CredentialPickerResults)
    {
        return nullptr;
    }

    state->type_UserConsentVerifier = py::register_python_type(module.get(), type_name_UserConsentVerifier, &type_spec_UserConsentVerifier, nullptr, nullptr);
    if (!state->type_UserConsentVerifier)
    {
        return nullptr;
    }


    return module.detach();
}

PyObject* py::py_type<winrt::Windows::Security::Credentials::UI::AuthenticationProtocol>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Credentials::UI;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Credentials::UI");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_AuthenticationProtocol;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Credentials::UI::AuthenticationProtocol is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::Security::Credentials::UI::CredentialSaveOption>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Credentials::UI;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Credentials::UI");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_CredentialSaveOption;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Credentials::UI::CredentialSaveOption is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::Security::Credentials::UI::UserConsentVerificationResult>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Credentials::UI;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Credentials::UI");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_UserConsentVerificationResult;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Credentials::UI::UserConsentVerificationResult is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::Security::Credentials::UI::UserConsentVerifierAvailability>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Credentials::UI;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Credentials::UI");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_UserConsentVerifierAvailability;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Credentials::UI::UserConsentVerifierAvailability is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Credentials::UI::CredentialPicker>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Credentials::UI;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Credentials::UI");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_CredentialPicker;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Credentials::UI::CredentialPicker is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Credentials::UI::CredentialPickerOptions>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Credentials::UI;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Credentials::UI");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_CredentialPickerOptions;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Credentials::UI::CredentialPickerOptions is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Credentials::UI::CredentialPickerResults>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Credentials::UI;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Credentials::UI");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_CredentialPickerResults;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Credentials::UI::CredentialPickerResults is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Credentials::UI::UserConsentVerifier>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Credentials::UI;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Credentials::UI");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_UserConsentVerifier;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Credentials::UI::UserConsentVerifier is not registered");
        return nullptr;
    }

    return python_type;
}
