// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.Services.Maps.LocalSearch.h"


namespace py::cpp::Windows::Services::Maps::LocalSearch
{
    struct module_state
    {
        PyObject* type_LocalLocationFinderStatus;
        PyTypeObject* type_LocalCategories;
        PyTypeObject* type_LocalLocation;
        PyTypeObject* type_LocalLocationFinder;
        PyTypeObject* type_LocalLocationFinderResult;
        PyTypeObject* type_LocalLocationHoursOfOperationItem;
        PyTypeObject* type_LocalLocationRatingInfo;
        PyTypeObject* type_PlaceInfoHelper;
    };

    static PyObject* register_LocalLocationFinderStatus(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_LocalLocationFinderStatus)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_LocalLocationFinderStatus = type;
        Py_INCREF(state->type_LocalLocationFinderStatus);


        Py_RETURN_NONE;
    }

    // ----- LocalCategories class --------------------
    static constexpr const char* const type_name_LocalCategories = "LocalCategories";

    static PyObject* _new_LocalCategories(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_LocalCategories);
        return nullptr;
    }

    static PyObject* LocalCategories_get_All(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalCategories", L"All"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Services::Maps::LocalSearch::LocalCategories::All());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LocalCategories_get_BankAndCreditUnions(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalCategories", L"BankAndCreditUnions"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Services::Maps::LocalSearch::LocalCategories::BankAndCreditUnions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LocalCategories_get_EatDrink(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalCategories", L"EatDrink"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Services::Maps::LocalSearch::LocalCategories::EatDrink());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LocalCategories_get_Hospitals(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalCategories", L"Hospitals"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Services::Maps::LocalSearch::LocalCategories::Hospitals());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LocalCategories_get_HotelsAndMotels(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalCategories", L"HotelsAndMotels"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Services::Maps::LocalSearch::LocalCategories::HotelsAndMotels());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LocalCategories_get_Parking(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalCategories", L"Parking"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Services::Maps::LocalSearch::LocalCategories::Parking());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LocalCategories_get_SeeDo(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalCategories", L"SeeDo"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Services::Maps::LocalSearch::LocalCategories::SeeDo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LocalCategories_get_Shop(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalCategories", L"Shop"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Services::Maps::LocalSearch::LocalCategories::Shop());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LocalCategories[] = {
        { }
    };

    static PyGetSetDef _getset_LocalCategories[] = {
        { }
    };

    static PyType_Slot _type_slots_LocalCategories[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_LocalCategories) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_LocalCategories) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_LocalCategories) },
        { },
    };

    static PyType_Spec type_spec_LocalCategories =
    {
        "_winsdk_Windows_Services_Maps_LocalSearch.LocalCategories",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LocalCategories
    };

    static PyGetSetDef getset_LocalCategories_Meta[] = {
        { "all", reinterpret_cast<getter>(LocalCategories_get_All), nullptr, nullptr, nullptr },
        { "bank_and_credit_unions", reinterpret_cast<getter>(LocalCategories_get_BankAndCreditUnions), nullptr, nullptr, nullptr },
        { "eat_drink", reinterpret_cast<getter>(LocalCategories_get_EatDrink), nullptr, nullptr, nullptr },
        { "hospitals", reinterpret_cast<getter>(LocalCategories_get_Hospitals), nullptr, nullptr, nullptr },
        { "hotels_and_motels", reinterpret_cast<getter>(LocalCategories_get_HotelsAndMotels), nullptr, nullptr, nullptr },
        { "parking", reinterpret_cast<getter>(LocalCategories_get_Parking), nullptr, nullptr, nullptr },
        { "see_do", reinterpret_cast<getter>(LocalCategories_get_SeeDo), nullptr, nullptr, nullptr },
        { "shop", reinterpret_cast<getter>(LocalCategories_get_Shop), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot type_slots_LocalCategories_Meta[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_LocalCategories_Meta) },
        { }
    };

    static PyType_Spec type_spec_LocalCategories_Meta =
    {
        "_winsdk_Windows_Services_Maps_LocalSearch.LocalCategories_Meta",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_LocalCategories_Meta
    };

    // ----- LocalLocation class --------------------
    static constexpr const char* const type_name_LocalLocation = "LocalLocation";

    static PyObject* _new_LocalLocation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_LocalLocation);
        return nullptr;
    }

    static void _dealloc_LocalLocation(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocation* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* LocalLocation_get_Address(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalLocation", L"Address"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Address());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LocalLocation_get_DataAttribution(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalLocation", L"DataAttribution"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DataAttribution());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LocalLocation_get_Description(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalLocation", L"Description"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Description());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LocalLocation_get_DisplayName(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalLocation", L"DisplayName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LocalLocation_get_Identifier(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalLocation", L"Identifier"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Identifier());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LocalLocation_get_PhoneNumber(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalLocation", L"PhoneNumber"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PhoneNumber());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LocalLocation_get_Point(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalLocation", L"Point"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Point());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LocalLocation_get_Category(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalLocation", L"Category"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Category());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LocalLocation_get_HoursOfOperation(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalLocation", L"HoursOfOperation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.HoursOfOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LocalLocation_get_RatingInfo(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalLocation", L"RatingInfo"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RatingInfo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_LocalLocation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Services::Maps::LocalSearch::LocalLocation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_LocalLocation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::LocalSearch::LocalLocation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LocalLocation[] = {
        { "_assign_array_", _assign_array_LocalLocation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_LocalLocation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_LocalLocation[] = {
        { "address", reinterpret_cast<getter>(LocalLocation_get_Address), nullptr, nullptr, nullptr },
        { "data_attribution", reinterpret_cast<getter>(LocalLocation_get_DataAttribution), nullptr, nullptr, nullptr },
        { "description", reinterpret_cast<getter>(LocalLocation_get_Description), nullptr, nullptr, nullptr },
        { "display_name", reinterpret_cast<getter>(LocalLocation_get_DisplayName), nullptr, nullptr, nullptr },
        { "identifier", reinterpret_cast<getter>(LocalLocation_get_Identifier), nullptr, nullptr, nullptr },
        { "phone_number", reinterpret_cast<getter>(LocalLocation_get_PhoneNumber), nullptr, nullptr, nullptr },
        { "point", reinterpret_cast<getter>(LocalLocation_get_Point), nullptr, nullptr, nullptr },
        { "category", reinterpret_cast<getter>(LocalLocation_get_Category), nullptr, nullptr, nullptr },
        { "hours_of_operation", reinterpret_cast<getter>(LocalLocation_get_HoursOfOperation), nullptr, nullptr, nullptr },
        { "rating_info", reinterpret_cast<getter>(LocalLocation_get_RatingInfo), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_LocalLocation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_LocalLocation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_LocalLocation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_LocalLocation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_LocalLocation) },
        { },
    };

    static PyType_Spec type_spec_LocalLocation =
    {
        "_winsdk_Windows_Services_Maps_LocalSearch.LocalLocation",
        sizeof(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LocalLocation
    };

    // ----- LocalLocationFinder class --------------------
    static constexpr const char* const type_name_LocalLocationFinder = "LocalLocationFinder";

    static PyObject* _new_LocalLocationFinder(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_LocalLocationFinder);
        return nullptr;
    }

    static PyObject* LocalLocationFinder_FindLocalLocationsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 4)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.LocalSearch.LocalLocationFinder", L"FindLocalLocationsAsync", 4))
            {
                py::set_arg_count_version_error(4);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::Geocircle>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<uint32_t>(args, 3);

                return py::convert(winrt::Windows::Services::Maps::LocalSearch::LocalLocationFinder::FindLocalLocationsAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_LocalLocationFinder[] = {
        { "find_local_locations_async", reinterpret_cast<PyCFunction>(LocalLocationFinder_FindLocalLocationsAsync), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_LocalLocationFinder[] = {
        { }
    };

    static PyType_Slot _type_slots_LocalLocationFinder[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_LocalLocationFinder) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_LocalLocationFinder) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_LocalLocationFinder) },
        { },
    };

    static PyType_Spec type_spec_LocalLocationFinder =
    {
        "_winsdk_Windows_Services_Maps_LocalSearch.LocalLocationFinder",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LocalLocationFinder
    };

    // ----- LocalLocationFinderResult class --------------------
    static constexpr const char* const type_name_LocalLocationFinderResult = "LocalLocationFinderResult";

    static PyObject* _new_LocalLocationFinderResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_LocalLocationFinderResult);
        return nullptr;
    }

    static void _dealloc_LocalLocationFinderResult(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocationFinderResult* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* LocalLocationFinderResult_get_LocalLocations(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocationFinderResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalLocationFinderResult", L"LocalLocations"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.LocalLocations());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LocalLocationFinderResult_get_Status(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocationFinderResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalLocationFinderResult", L"Status"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_LocalLocationFinderResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Services::Maps::LocalSearch::LocalLocationFinderResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_LocalLocationFinderResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::LocalSearch::LocalLocationFinderResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LocalLocationFinderResult[] = {
        { "_assign_array_", _assign_array_LocalLocationFinderResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_LocalLocationFinderResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_LocalLocationFinderResult[] = {
        { "local_locations", reinterpret_cast<getter>(LocalLocationFinderResult_get_LocalLocations), nullptr, nullptr, nullptr },
        { "status", reinterpret_cast<getter>(LocalLocationFinderResult_get_Status), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_LocalLocationFinderResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_LocalLocationFinderResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_LocalLocationFinderResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_LocalLocationFinderResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_LocalLocationFinderResult) },
        { },
    };

    static PyType_Spec type_spec_LocalLocationFinderResult =
    {
        "_winsdk_Windows_Services_Maps_LocalSearch.LocalLocationFinderResult",
        sizeof(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocationFinderResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LocalLocationFinderResult
    };

    // ----- LocalLocationHoursOfOperationItem class --------------------
    static constexpr const char* const type_name_LocalLocationHoursOfOperationItem = "LocalLocationHoursOfOperationItem";

    static PyObject* _new_LocalLocationHoursOfOperationItem(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_LocalLocationHoursOfOperationItem);
        return nullptr;
    }

    static void _dealloc_LocalLocationHoursOfOperationItem(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocationHoursOfOperationItem* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* LocalLocationHoursOfOperationItem_get_Day(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocationHoursOfOperationItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalLocationHoursOfOperationItem", L"Day"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Day());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LocalLocationHoursOfOperationItem_get_Span(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocationHoursOfOperationItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalLocationHoursOfOperationItem", L"Span"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Span());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LocalLocationHoursOfOperationItem_get_Start(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocationHoursOfOperationItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalLocationHoursOfOperationItem", L"Start"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Start());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_LocalLocationHoursOfOperationItem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Services::Maps::LocalSearch::LocalLocationHoursOfOperationItem>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_LocalLocationHoursOfOperationItem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::LocalSearch::LocalLocationHoursOfOperationItem>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LocalLocationHoursOfOperationItem[] = {
        { "_assign_array_", _assign_array_LocalLocationHoursOfOperationItem, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_LocalLocationHoursOfOperationItem), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_LocalLocationHoursOfOperationItem[] = {
        { "day", reinterpret_cast<getter>(LocalLocationHoursOfOperationItem_get_Day), nullptr, nullptr, nullptr },
        { "span", reinterpret_cast<getter>(LocalLocationHoursOfOperationItem_get_Span), nullptr, nullptr, nullptr },
        { "start", reinterpret_cast<getter>(LocalLocationHoursOfOperationItem_get_Start), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_LocalLocationHoursOfOperationItem[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_LocalLocationHoursOfOperationItem) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_LocalLocationHoursOfOperationItem) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_LocalLocationHoursOfOperationItem) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_LocalLocationHoursOfOperationItem) },
        { },
    };

    static PyType_Spec type_spec_LocalLocationHoursOfOperationItem =
    {
        "_winsdk_Windows_Services_Maps_LocalSearch.LocalLocationHoursOfOperationItem",
        sizeof(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocationHoursOfOperationItem),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LocalLocationHoursOfOperationItem
    };

    // ----- LocalLocationRatingInfo class --------------------
    static constexpr const char* const type_name_LocalLocationRatingInfo = "LocalLocationRatingInfo";

    static PyObject* _new_LocalLocationRatingInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_LocalLocationRatingInfo);
        return nullptr;
    }

    static void _dealloc_LocalLocationRatingInfo(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocationRatingInfo* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* LocalLocationRatingInfo_get_AggregateRating(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocationRatingInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalLocationRatingInfo", L"AggregateRating"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AggregateRating());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LocalLocationRatingInfo_get_ProviderIdentifier(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocationRatingInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalLocationRatingInfo", L"ProviderIdentifier"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProviderIdentifier());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LocalLocationRatingInfo_get_RatingCount(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocationRatingInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.LocalSearch.LocalLocationRatingInfo", L"RatingCount"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RatingCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_LocalLocationRatingInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Services::Maps::LocalSearch::LocalLocationRatingInfo>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_LocalLocationRatingInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::LocalSearch::LocalLocationRatingInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LocalLocationRatingInfo[] = {
        { "_assign_array_", _assign_array_LocalLocationRatingInfo, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_LocalLocationRatingInfo), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_LocalLocationRatingInfo[] = {
        { "aggregate_rating", reinterpret_cast<getter>(LocalLocationRatingInfo_get_AggregateRating), nullptr, nullptr, nullptr },
        { "provider_identifier", reinterpret_cast<getter>(LocalLocationRatingInfo_get_ProviderIdentifier), nullptr, nullptr, nullptr },
        { "rating_count", reinterpret_cast<getter>(LocalLocationRatingInfo_get_RatingCount), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_LocalLocationRatingInfo[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_LocalLocationRatingInfo) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_LocalLocationRatingInfo) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_LocalLocationRatingInfo) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_LocalLocationRatingInfo) },
        { },
    };

    static PyType_Spec type_spec_LocalLocationRatingInfo =
    {
        "_winsdk_Windows_Services_Maps_LocalSearch.LocalLocationRatingInfo",
        sizeof(py::wrapper::Windows::Services::Maps::LocalSearch::LocalLocationRatingInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LocalLocationRatingInfo
    };

    // ----- PlaceInfoHelper class --------------------
    static constexpr const char* const type_name_PlaceInfoHelper = "PlaceInfoHelper";

    static PyObject* _new_PlaceInfoHelper(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_PlaceInfoHelper);
        return nullptr;
    }

    static PyObject* PlaceInfoHelper_CreateFromLocalLocation(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.LocalSearch.PlaceInfoHelper", L"CreateFromLocalLocation", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Services::Maps::LocalSearch::LocalLocation>(args, 0);

                return py::convert(winrt::Windows::Services::Maps::LocalSearch::PlaceInfoHelper::CreateFromLocalLocation(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_PlaceInfoHelper[] = {
        { "create_from_local_location", reinterpret_cast<PyCFunction>(PlaceInfoHelper_CreateFromLocalLocation), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PlaceInfoHelper[] = {
        { }
    };

    static PyType_Slot _type_slots_PlaceInfoHelper[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PlaceInfoHelper) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PlaceInfoHelper) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PlaceInfoHelper) },
        { },
    };

    static PyType_Spec type_spec_PlaceInfoHelper =
    {
        "_winsdk_Windows_Services_Maps_LocalSearch.PlaceInfoHelper",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PlaceInfoHelper
    };

    // ----- Windows.Services.Maps.LocalSearch Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Services::Maps::LocalSearch");

    static PyMethodDef module_methods[] = {
        {"_register_LocalLocationFinderStatus", register_LocalLocationFinderStatus, METH_O, "registers type"},
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_LocalLocationFinderStatus);
        Py_VISIT(state->type_LocalCategories);
        Py_VISIT(state->type_LocalLocation);
        Py_VISIT(state->type_LocalLocationFinder);
        Py_VISIT(state->type_LocalLocationFinderResult);
        Py_VISIT(state->type_LocalLocationHoursOfOperationItem);
        Py_VISIT(state->type_LocalLocationRatingInfo);
        Py_VISIT(state->type_PlaceInfoHelper);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_LocalLocationFinderStatus);
        Py_CLEAR(state->type_LocalCategories);
        Py_CLEAR(state->type_LocalLocation);
        Py_CLEAR(state->type_LocalLocationFinder);
        Py_CLEAR(state->type_LocalLocationFinderResult);
        Py_CLEAR(state->type_LocalLocationHoursOfOperationItem);
        Py_CLEAR(state->type_LocalLocationRatingInfo);
        Py_CLEAR(state->type_PlaceInfoHelper);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Services_Maps_LocalSearch",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Services::Maps::LocalSearch

PyMODINIT_FUNC PyInit__winsdk_Windows_Services_Maps_LocalSearch(void) noexcept
{
    using namespace py::cpp::Windows::Services::Maps::LocalSearch;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    py::pyobj_handle type_LocalCategories_Meta{PyType_FromSpec(&type_spec_LocalCategories_Meta)};
    if (!type_LocalCategories_Meta)
    {
        return nullptr;
    }

    state->type_LocalCategories = py::register_python_type(module.get(), type_name_LocalCategories, &type_spec_LocalCategories, nullptr, reinterpret_cast<PyTypeObject*>(type_LocalCategories_Meta.get()));
    if (!state->type_LocalCategories)
    {
        return nullptr;
    }

    state->type_LocalLocation = py::register_python_type(module.get(), type_name_LocalLocation, &type_spec_LocalLocation, bases.get(), nullptr);
    if (!state->type_LocalLocation)
    {
        return nullptr;
    }

    state->type_LocalLocationFinder = py::register_python_type(module.get(), type_name_LocalLocationFinder, &type_spec_LocalLocationFinder, nullptr, nullptr);
    if (!state->type_LocalLocationFinder)
    {
        return nullptr;
    }

    state->type_LocalLocationFinderResult = py::register_python_type(module.get(), type_name_LocalLocationFinderResult, &type_spec_LocalLocationFinderResult, bases.get(), nullptr);
    if (!state->type_LocalLocationFinderResult)
    {
        return nullptr;
    }

    state->type_LocalLocationHoursOfOperationItem = py::register_python_type(module.get(), type_name_LocalLocationHoursOfOperationItem, &type_spec_LocalLocationHoursOfOperationItem, bases.get(), nullptr);
    if (!state->type_LocalLocationHoursOfOperationItem)
    {
        return nullptr;
    }

    state->type_LocalLocationRatingInfo = py::register_python_type(module.get(), type_name_LocalLocationRatingInfo, &type_spec_LocalLocationRatingInfo, bases.get(), nullptr);
    if (!state->type_LocalLocationRatingInfo)
    {
        return nullptr;
    }

    state->type_PlaceInfoHelper = py::register_python_type(module.get(), type_name_PlaceInfoHelper, &type_spec_PlaceInfoHelper, nullptr, nullptr);
    if (!state->type_PlaceInfoHelper)
    {
        return nullptr;
    }


    return module.detach();
}

PyObject* py::py_type<winrt::Windows::Services::Maps::LocalSearch::LocalLocationFinderStatus>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Services::Maps::LocalSearch;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Services::Maps::LocalSearch");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_LocalLocationFinderStatus;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Services::Maps::LocalSearch::LocalLocationFinderStatus is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::LocalSearch::LocalCategories>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Services::Maps::LocalSearch;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Services::Maps::LocalSearch");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_LocalCategories;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Services::Maps::LocalSearch::LocalCategories is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::LocalSearch::LocalLocation>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Services::Maps::LocalSearch;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Services::Maps::LocalSearch");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_LocalLocation;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Services::Maps::LocalSearch::LocalLocation is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::LocalSearch::LocalLocationFinder>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Services::Maps::LocalSearch;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Services::Maps::LocalSearch");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_LocalLocationFinder;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Services::Maps::LocalSearch::LocalLocationFinder is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::LocalSearch::LocalLocationFinderResult>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Services::Maps::LocalSearch;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Services::Maps::LocalSearch");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_LocalLocationFinderResult;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Services::Maps::LocalSearch::LocalLocationFinderResult is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::LocalSearch::LocalLocationHoursOfOperationItem>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Services::Maps::LocalSearch;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Services::Maps::LocalSearch");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_LocalLocationHoursOfOperationItem;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Services::Maps::LocalSearch::LocalLocationHoursOfOperationItem is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::LocalSearch::LocalLocationRatingInfo>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Services::Maps::LocalSearch;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Services::Maps::LocalSearch");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_LocalLocationRatingInfo;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Services::Maps::LocalSearch::LocalLocationRatingInfo is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::LocalSearch::PlaceInfoHelper>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Services::Maps::LocalSearch;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Services::Maps::LocalSearch");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PlaceInfoHelper;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Services::Maps::LocalSearch::PlaceInfoHelper is not registered");
        return nullptr;
    }

    return python_type;
}
