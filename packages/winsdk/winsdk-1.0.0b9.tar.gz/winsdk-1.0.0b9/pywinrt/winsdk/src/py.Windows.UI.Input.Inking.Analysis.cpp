// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.UI.Input.Inking.Analysis.h"


namespace py::cpp::Windows::UI::Input::Inking::Analysis
{
    struct module_state
    {
        PyObject* type_InkAnalysisDrawingKind;
        PyObject* type_InkAnalysisNodeKind;
        PyObject* type_InkAnalysisStatus;
        PyObject* type_InkAnalysisStrokeKind;
        PyTypeObject* type_InkAnalysisInkBullet;
        PyTypeObject* type_InkAnalysisInkDrawing;
        PyTypeObject* type_InkAnalysisInkWord;
        PyTypeObject* type_InkAnalysisLine;
        PyTypeObject* type_InkAnalysisListItem;
        PyTypeObject* type_InkAnalysisNode;
        PyTypeObject* type_InkAnalysisParagraph;
        PyTypeObject* type_InkAnalysisResult;
        PyTypeObject* type_InkAnalysisRoot;
        PyTypeObject* type_InkAnalysisWritingRegion;
        PyTypeObject* type_InkAnalyzer;
        PyTypeObject* type_IInkAnalysisNode;
        PyTypeObject* type_IInkAnalyzerFactory;
    };

    static PyObject* register_InkAnalysisDrawingKind(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_InkAnalysisDrawingKind)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_InkAnalysisDrawingKind = type;
        Py_INCREF(state->type_InkAnalysisDrawingKind);


        Py_RETURN_NONE;
    }

    static PyObject* register_InkAnalysisNodeKind(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_InkAnalysisNodeKind)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_InkAnalysisNodeKind = type;
        Py_INCREF(state->type_InkAnalysisNodeKind);


        Py_RETURN_NONE;
    }

    static PyObject* register_InkAnalysisStatus(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_InkAnalysisStatus)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_InkAnalysisStatus = type;
        Py_INCREF(state->type_InkAnalysisStatus);


        Py_RETURN_NONE;
    }

    static PyObject* register_InkAnalysisStrokeKind(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_InkAnalysisStrokeKind)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_InkAnalysisStrokeKind = type;
        Py_INCREF(state->type_InkAnalysisStrokeKind);


        Py_RETURN_NONE;
    }

    // ----- InkAnalysisInkBullet class --------------------
    static constexpr const char* const type_name_InkAnalysisInkBullet = "InkAnalysisInkBullet";

    static PyObject* _new_InkAnalysisInkBullet(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_InkAnalysisInkBullet);
        return nullptr;
    }

    static void _dealloc_InkAnalysisInkBullet(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* InkAnalysisInkBullet_GetStrokeIds(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkBullet", L"GetStrokeIds", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetStrokeIds());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkBullet_get_RecognizedText(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkBullet", L"RecognizedText"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RecognizedText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkBullet_get_BoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkBullet", L"BoundingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkBullet_get_Children(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkBullet", L"Children"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Children());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkBullet_get_Id(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkBullet", L"Id"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkBullet_get_Kind(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkBullet", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkBullet_get_Parent(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkBullet", L"Parent"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Parent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkBullet_get_RotatedBoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkBullet", L"RotatedBoundingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RotatedBoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_InkAnalysisInkBullet(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_InkAnalysisInkBullet(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InkAnalysisInkBullet[] = {
        { "get_stroke_ids", reinterpret_cast<PyCFunction>(InkAnalysisInkBullet_GetStrokeIds), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_InkAnalysisInkBullet, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_InkAnalysisInkBullet), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_InkAnalysisInkBullet[] = {
        { "recognized_text", reinterpret_cast<getter>(InkAnalysisInkBullet_get_RecognizedText), nullptr, nullptr, nullptr },
        { "bounding_rect", reinterpret_cast<getter>(InkAnalysisInkBullet_get_BoundingRect), nullptr, nullptr, nullptr },
        { "children", reinterpret_cast<getter>(InkAnalysisInkBullet_get_Children), nullptr, nullptr, nullptr },
        { "id", reinterpret_cast<getter>(InkAnalysisInkBullet_get_Id), nullptr, nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(InkAnalysisInkBullet_get_Kind), nullptr, nullptr, nullptr },
        { "parent", reinterpret_cast<getter>(InkAnalysisInkBullet_get_Parent), nullptr, nullptr, nullptr },
        { "rotated_bounding_rect", reinterpret_cast<getter>(InkAnalysisInkBullet_get_RotatedBoundingRect), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_InkAnalysisInkBullet[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_InkAnalysisInkBullet) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_InkAnalysisInkBullet) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_InkAnalysisInkBullet) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_InkAnalysisInkBullet) },
        { },
    };

    static PyType_Spec type_spec_InkAnalysisInkBullet =
    {
        "_winsdk_Windows_UI_Input_Inking_Analysis.InkAnalysisInkBullet",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InkAnalysisInkBullet
    };

    // ----- InkAnalysisInkDrawing class --------------------
    static constexpr const char* const type_name_InkAnalysisInkDrawing = "InkAnalysisInkDrawing";

    static PyObject* _new_InkAnalysisInkDrawing(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_InkAnalysisInkDrawing);
        return nullptr;
    }

    static void _dealloc_InkAnalysisInkDrawing(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* InkAnalysisInkDrawing_GetStrokeIds(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkDrawing", L"GetStrokeIds", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetStrokeIds());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkDrawing_get_Center(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkDrawing", L"Center"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Center());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkDrawing_get_DrawingKind(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkDrawing", L"DrawingKind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DrawingKind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkDrawing_get_Points(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkDrawing", L"Points"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Points());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkDrawing_get_BoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkDrawing", L"BoundingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkDrawing_get_Children(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkDrawing", L"Children"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Children());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkDrawing_get_Id(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkDrawing", L"Id"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkDrawing_get_Kind(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkDrawing", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkDrawing_get_Parent(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkDrawing", L"Parent"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Parent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkDrawing_get_RotatedBoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkDrawing", L"RotatedBoundingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RotatedBoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_InkAnalysisInkDrawing(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_InkAnalysisInkDrawing(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InkAnalysisInkDrawing[] = {
        { "get_stroke_ids", reinterpret_cast<PyCFunction>(InkAnalysisInkDrawing_GetStrokeIds), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_InkAnalysisInkDrawing, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_InkAnalysisInkDrawing), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_InkAnalysisInkDrawing[] = {
        { "center", reinterpret_cast<getter>(InkAnalysisInkDrawing_get_Center), nullptr, nullptr, nullptr },
        { "drawing_kind", reinterpret_cast<getter>(InkAnalysisInkDrawing_get_DrawingKind), nullptr, nullptr, nullptr },
        { "points", reinterpret_cast<getter>(InkAnalysisInkDrawing_get_Points), nullptr, nullptr, nullptr },
        { "bounding_rect", reinterpret_cast<getter>(InkAnalysisInkDrawing_get_BoundingRect), nullptr, nullptr, nullptr },
        { "children", reinterpret_cast<getter>(InkAnalysisInkDrawing_get_Children), nullptr, nullptr, nullptr },
        { "id", reinterpret_cast<getter>(InkAnalysisInkDrawing_get_Id), nullptr, nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(InkAnalysisInkDrawing_get_Kind), nullptr, nullptr, nullptr },
        { "parent", reinterpret_cast<getter>(InkAnalysisInkDrawing_get_Parent), nullptr, nullptr, nullptr },
        { "rotated_bounding_rect", reinterpret_cast<getter>(InkAnalysisInkDrawing_get_RotatedBoundingRect), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_InkAnalysisInkDrawing[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_InkAnalysisInkDrawing) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_InkAnalysisInkDrawing) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_InkAnalysisInkDrawing) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_InkAnalysisInkDrawing) },
        { },
    };

    static PyType_Spec type_spec_InkAnalysisInkDrawing =
    {
        "_winsdk_Windows_UI_Input_Inking_Analysis.InkAnalysisInkDrawing",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InkAnalysisInkDrawing
    };

    // ----- InkAnalysisInkWord class --------------------
    static constexpr const char* const type_name_InkAnalysisInkWord = "InkAnalysisInkWord";

    static PyObject* _new_InkAnalysisInkWord(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_InkAnalysisInkWord);
        return nullptr;
    }

    static void _dealloc_InkAnalysisInkWord(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* InkAnalysisInkWord_GetStrokeIds(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkWord", L"GetStrokeIds", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetStrokeIds());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkWord_get_RecognizedText(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkWord", L"RecognizedText"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RecognizedText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkWord_get_TextAlternates(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkWord", L"TextAlternates"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TextAlternates());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkWord_get_BoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkWord", L"BoundingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkWord_get_Children(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkWord", L"Children"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Children());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkWord_get_Id(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkWord", L"Id"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkWord_get_Kind(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkWord", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkWord_get_Parent(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkWord", L"Parent"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Parent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkWord_get_RotatedBoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisInkWord", L"RotatedBoundingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RotatedBoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_InkAnalysisInkWord(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_InkAnalysisInkWord(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InkAnalysisInkWord[] = {
        { "get_stroke_ids", reinterpret_cast<PyCFunction>(InkAnalysisInkWord_GetStrokeIds), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_InkAnalysisInkWord, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_InkAnalysisInkWord), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_InkAnalysisInkWord[] = {
        { "recognized_text", reinterpret_cast<getter>(InkAnalysisInkWord_get_RecognizedText), nullptr, nullptr, nullptr },
        { "text_alternates", reinterpret_cast<getter>(InkAnalysisInkWord_get_TextAlternates), nullptr, nullptr, nullptr },
        { "bounding_rect", reinterpret_cast<getter>(InkAnalysisInkWord_get_BoundingRect), nullptr, nullptr, nullptr },
        { "children", reinterpret_cast<getter>(InkAnalysisInkWord_get_Children), nullptr, nullptr, nullptr },
        { "id", reinterpret_cast<getter>(InkAnalysisInkWord_get_Id), nullptr, nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(InkAnalysisInkWord_get_Kind), nullptr, nullptr, nullptr },
        { "parent", reinterpret_cast<getter>(InkAnalysisInkWord_get_Parent), nullptr, nullptr, nullptr },
        { "rotated_bounding_rect", reinterpret_cast<getter>(InkAnalysisInkWord_get_RotatedBoundingRect), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_InkAnalysisInkWord[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_InkAnalysisInkWord) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_InkAnalysisInkWord) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_InkAnalysisInkWord) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_InkAnalysisInkWord) },
        { },
    };

    static PyType_Spec type_spec_InkAnalysisInkWord =
    {
        "_winsdk_Windows_UI_Input_Inking_Analysis.InkAnalysisInkWord",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InkAnalysisInkWord
    };

    // ----- InkAnalysisLine class --------------------
    static constexpr const char* const type_name_InkAnalysisLine = "InkAnalysisLine";

    static PyObject* _new_InkAnalysisLine(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_InkAnalysisLine);
        return nullptr;
    }

    static void _dealloc_InkAnalysisLine(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisLine* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* InkAnalysisLine_GetStrokeIds(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisLine* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisLine", L"GetStrokeIds", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetStrokeIds());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalysisLine_get_IndentLevel(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisLine* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisLine", L"IndentLevel"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IndentLevel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisLine_get_RecognizedText(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisLine* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisLine", L"RecognizedText"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RecognizedText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisLine_get_BoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisLine* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisLine", L"BoundingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisLine_get_Children(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisLine* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisLine", L"Children"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Children());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisLine_get_Id(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisLine* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisLine", L"Id"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisLine_get_Kind(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisLine* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisLine", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisLine_get_Parent(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisLine* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisLine", L"Parent"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Parent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisLine_get_RotatedBoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisLine* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisLine", L"RotatedBoundingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RotatedBoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_InkAnalysisLine(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisLine>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_InkAnalysisLine(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisLine>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InkAnalysisLine[] = {
        { "get_stroke_ids", reinterpret_cast<PyCFunction>(InkAnalysisLine_GetStrokeIds), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_InkAnalysisLine, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_InkAnalysisLine), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_InkAnalysisLine[] = {
        { "indent_level", reinterpret_cast<getter>(InkAnalysisLine_get_IndentLevel), nullptr, nullptr, nullptr },
        { "recognized_text", reinterpret_cast<getter>(InkAnalysisLine_get_RecognizedText), nullptr, nullptr, nullptr },
        { "bounding_rect", reinterpret_cast<getter>(InkAnalysisLine_get_BoundingRect), nullptr, nullptr, nullptr },
        { "children", reinterpret_cast<getter>(InkAnalysisLine_get_Children), nullptr, nullptr, nullptr },
        { "id", reinterpret_cast<getter>(InkAnalysisLine_get_Id), nullptr, nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(InkAnalysisLine_get_Kind), nullptr, nullptr, nullptr },
        { "parent", reinterpret_cast<getter>(InkAnalysisLine_get_Parent), nullptr, nullptr, nullptr },
        { "rotated_bounding_rect", reinterpret_cast<getter>(InkAnalysisLine_get_RotatedBoundingRect), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_InkAnalysisLine[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_InkAnalysisLine) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_InkAnalysisLine) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_InkAnalysisLine) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_InkAnalysisLine) },
        { },
    };

    static PyType_Spec type_spec_InkAnalysisLine =
    {
        "_winsdk_Windows_UI_Input_Inking_Analysis.InkAnalysisLine",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisLine),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InkAnalysisLine
    };

    // ----- InkAnalysisListItem class --------------------
    static constexpr const char* const type_name_InkAnalysisListItem = "InkAnalysisListItem";

    static PyObject* _new_InkAnalysisListItem(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_InkAnalysisListItem);
        return nullptr;
    }

    static void _dealloc_InkAnalysisListItem(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* InkAnalysisListItem_GetStrokeIds(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisListItem", L"GetStrokeIds", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetStrokeIds());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalysisListItem_get_RecognizedText(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisListItem", L"RecognizedText"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RecognizedText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisListItem_get_BoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisListItem", L"BoundingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisListItem_get_Children(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisListItem", L"Children"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Children());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisListItem_get_Id(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisListItem", L"Id"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisListItem_get_Kind(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisListItem", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisListItem_get_Parent(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisListItem", L"Parent"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Parent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisListItem_get_RotatedBoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisListItem", L"RotatedBoundingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RotatedBoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_InkAnalysisListItem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_InkAnalysisListItem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InkAnalysisListItem[] = {
        { "get_stroke_ids", reinterpret_cast<PyCFunction>(InkAnalysisListItem_GetStrokeIds), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_InkAnalysisListItem, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_InkAnalysisListItem), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_InkAnalysisListItem[] = {
        { "recognized_text", reinterpret_cast<getter>(InkAnalysisListItem_get_RecognizedText), nullptr, nullptr, nullptr },
        { "bounding_rect", reinterpret_cast<getter>(InkAnalysisListItem_get_BoundingRect), nullptr, nullptr, nullptr },
        { "children", reinterpret_cast<getter>(InkAnalysisListItem_get_Children), nullptr, nullptr, nullptr },
        { "id", reinterpret_cast<getter>(InkAnalysisListItem_get_Id), nullptr, nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(InkAnalysisListItem_get_Kind), nullptr, nullptr, nullptr },
        { "parent", reinterpret_cast<getter>(InkAnalysisListItem_get_Parent), nullptr, nullptr, nullptr },
        { "rotated_bounding_rect", reinterpret_cast<getter>(InkAnalysisListItem_get_RotatedBoundingRect), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_InkAnalysisListItem[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_InkAnalysisListItem) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_InkAnalysisListItem) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_InkAnalysisListItem) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_InkAnalysisListItem) },
        { },
    };

    static PyType_Spec type_spec_InkAnalysisListItem =
    {
        "_winsdk_Windows_UI_Input_Inking_Analysis.InkAnalysisListItem",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InkAnalysisListItem
    };

    // ----- InkAnalysisNode class --------------------
    static constexpr const char* const type_name_InkAnalysisNode = "InkAnalysisNode";

    static PyObject* _new_InkAnalysisNode(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_InkAnalysisNode);
        return nullptr;
    }

    static void _dealloc_InkAnalysisNode(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisNode* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* InkAnalysisNode_GetStrokeIds(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisNode* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisNode", L"GetStrokeIds", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetStrokeIds());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalysisNode_get_BoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisNode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisNode", L"BoundingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisNode_get_Children(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisNode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisNode", L"Children"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Children());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisNode_get_Id(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisNode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisNode", L"Id"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisNode_get_Kind(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisNode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisNode", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisNode_get_Parent(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisNode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisNode", L"Parent"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Parent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisNode_get_RotatedBoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisNode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisNode", L"RotatedBoundingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RotatedBoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_InkAnalysisNode(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisNode>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_InkAnalysisNode(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisNode>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InkAnalysisNode[] = {
        { "get_stroke_ids", reinterpret_cast<PyCFunction>(InkAnalysisNode_GetStrokeIds), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_InkAnalysisNode, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_InkAnalysisNode), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_InkAnalysisNode[] = {
        { "bounding_rect", reinterpret_cast<getter>(InkAnalysisNode_get_BoundingRect), nullptr, nullptr, nullptr },
        { "children", reinterpret_cast<getter>(InkAnalysisNode_get_Children), nullptr, nullptr, nullptr },
        { "id", reinterpret_cast<getter>(InkAnalysisNode_get_Id), nullptr, nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(InkAnalysisNode_get_Kind), nullptr, nullptr, nullptr },
        { "parent", reinterpret_cast<getter>(InkAnalysisNode_get_Parent), nullptr, nullptr, nullptr },
        { "rotated_bounding_rect", reinterpret_cast<getter>(InkAnalysisNode_get_RotatedBoundingRect), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_InkAnalysisNode[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_InkAnalysisNode) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_InkAnalysisNode) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_InkAnalysisNode) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_InkAnalysisNode) },
        { },
    };

    static PyType_Spec type_spec_InkAnalysisNode =
    {
        "_winsdk_Windows_UI_Input_Inking_Analysis.InkAnalysisNode",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisNode),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InkAnalysisNode
    };

    // ----- InkAnalysisParagraph class --------------------
    static constexpr const char* const type_name_InkAnalysisParagraph = "InkAnalysisParagraph";

    static PyObject* _new_InkAnalysisParagraph(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_InkAnalysisParagraph);
        return nullptr;
    }

    static void _dealloc_InkAnalysisParagraph(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* InkAnalysisParagraph_GetStrokeIds(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisParagraph", L"GetStrokeIds", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetStrokeIds());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalysisParagraph_get_BoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisParagraph", L"BoundingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisParagraph_get_Children(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisParagraph", L"Children"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Children());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisParagraph_get_Id(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisParagraph", L"Id"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisParagraph_get_Kind(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisParagraph", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisParagraph_get_Parent(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisParagraph", L"Parent"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Parent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisParagraph_get_RotatedBoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisParagraph", L"RotatedBoundingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RotatedBoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisParagraph_get_RecognizedText(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisParagraph", L"RecognizedText"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RecognizedText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_InkAnalysisParagraph(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_InkAnalysisParagraph(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InkAnalysisParagraph[] = {
        { "get_stroke_ids", reinterpret_cast<PyCFunction>(InkAnalysisParagraph_GetStrokeIds), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_InkAnalysisParagraph, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_InkAnalysisParagraph), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_InkAnalysisParagraph[] = {
        { "bounding_rect", reinterpret_cast<getter>(InkAnalysisParagraph_get_BoundingRect), nullptr, nullptr, nullptr },
        { "children", reinterpret_cast<getter>(InkAnalysisParagraph_get_Children), nullptr, nullptr, nullptr },
        { "id", reinterpret_cast<getter>(InkAnalysisParagraph_get_Id), nullptr, nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(InkAnalysisParagraph_get_Kind), nullptr, nullptr, nullptr },
        { "parent", reinterpret_cast<getter>(InkAnalysisParagraph_get_Parent), nullptr, nullptr, nullptr },
        { "rotated_bounding_rect", reinterpret_cast<getter>(InkAnalysisParagraph_get_RotatedBoundingRect), nullptr, nullptr, nullptr },
        { "recognized_text", reinterpret_cast<getter>(InkAnalysisParagraph_get_RecognizedText), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_InkAnalysisParagraph[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_InkAnalysisParagraph) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_InkAnalysisParagraph) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_InkAnalysisParagraph) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_InkAnalysisParagraph) },
        { },
    };

    static PyType_Spec type_spec_InkAnalysisParagraph =
    {
        "_winsdk_Windows_UI_Input_Inking_Analysis.InkAnalysisParagraph",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InkAnalysisParagraph
    };

    // ----- InkAnalysisResult class --------------------
    static constexpr const char* const type_name_InkAnalysisResult = "InkAnalysisResult";

    static PyObject* _new_InkAnalysisResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_InkAnalysisResult);
        return nullptr;
    }

    static void _dealloc_InkAnalysisResult(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisResult* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* InkAnalysisResult_get_Status(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisResult", L"Status"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_InkAnalysisResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_InkAnalysisResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InkAnalysisResult[] = {
        { "_assign_array_", _assign_array_InkAnalysisResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_InkAnalysisResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_InkAnalysisResult[] = {
        { "status", reinterpret_cast<getter>(InkAnalysisResult_get_Status), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_InkAnalysisResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_InkAnalysisResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_InkAnalysisResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_InkAnalysisResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_InkAnalysisResult) },
        { },
    };

    static PyType_Spec type_spec_InkAnalysisResult =
    {
        "_winsdk_Windows_UI_Input_Inking_Analysis.InkAnalysisResult",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InkAnalysisResult
    };

    // ----- InkAnalysisRoot class --------------------
    static constexpr const char* const type_name_InkAnalysisRoot = "InkAnalysisRoot";

    static PyObject* _new_InkAnalysisRoot(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_InkAnalysisRoot);
        return nullptr;
    }

    static void _dealloc_InkAnalysisRoot(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* InkAnalysisRoot_FindNodes(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisRoot", L"FindNodes", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisNodeKind>(args, 0);

                return py::convert(self->obj.FindNodes(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalysisRoot_GetStrokeIds(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisRoot", L"GetStrokeIds", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetStrokeIds());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalysisRoot_get_BoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisRoot", L"BoundingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisRoot_get_Children(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisRoot", L"Children"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Children());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisRoot_get_Id(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisRoot", L"Id"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisRoot_get_Kind(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisRoot", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisRoot_get_Parent(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisRoot", L"Parent"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Parent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisRoot_get_RotatedBoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisRoot", L"RotatedBoundingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RotatedBoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisRoot_get_RecognizedText(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisRoot", L"RecognizedText"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RecognizedText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_InkAnalysisRoot(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_InkAnalysisRoot(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InkAnalysisRoot[] = {
        { "find_nodes", reinterpret_cast<PyCFunction>(InkAnalysisRoot_FindNodes), METH_VARARGS, nullptr },
        { "get_stroke_ids", reinterpret_cast<PyCFunction>(InkAnalysisRoot_GetStrokeIds), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_InkAnalysisRoot, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_InkAnalysisRoot), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_InkAnalysisRoot[] = {
        { "bounding_rect", reinterpret_cast<getter>(InkAnalysisRoot_get_BoundingRect), nullptr, nullptr, nullptr },
        { "children", reinterpret_cast<getter>(InkAnalysisRoot_get_Children), nullptr, nullptr, nullptr },
        { "id", reinterpret_cast<getter>(InkAnalysisRoot_get_Id), nullptr, nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(InkAnalysisRoot_get_Kind), nullptr, nullptr, nullptr },
        { "parent", reinterpret_cast<getter>(InkAnalysisRoot_get_Parent), nullptr, nullptr, nullptr },
        { "rotated_bounding_rect", reinterpret_cast<getter>(InkAnalysisRoot_get_RotatedBoundingRect), nullptr, nullptr, nullptr },
        { "recognized_text", reinterpret_cast<getter>(InkAnalysisRoot_get_RecognizedText), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_InkAnalysisRoot[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_InkAnalysisRoot) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_InkAnalysisRoot) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_InkAnalysisRoot) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_InkAnalysisRoot) },
        { },
    };

    static PyType_Spec type_spec_InkAnalysisRoot =
    {
        "_winsdk_Windows_UI_Input_Inking_Analysis.InkAnalysisRoot",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InkAnalysisRoot
    };

    // ----- InkAnalysisWritingRegion class --------------------
    static constexpr const char* const type_name_InkAnalysisWritingRegion = "InkAnalysisWritingRegion";

    static PyObject* _new_InkAnalysisWritingRegion(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_InkAnalysisWritingRegion);
        return nullptr;
    }

    static void _dealloc_InkAnalysisWritingRegion(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* InkAnalysisWritingRegion_GetStrokeIds(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisWritingRegion", L"GetStrokeIds", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetStrokeIds());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalysisWritingRegion_get_BoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisWritingRegion", L"BoundingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisWritingRegion_get_Children(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisWritingRegion", L"Children"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Children());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisWritingRegion_get_Id(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisWritingRegion", L"Id"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisWritingRegion_get_Kind(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisWritingRegion", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisWritingRegion_get_Parent(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisWritingRegion", L"Parent"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Parent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisWritingRegion_get_RotatedBoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisWritingRegion", L"RotatedBoundingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RotatedBoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisWritingRegion_get_RecognizedText(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalysisWritingRegion", L"RecognizedText"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RecognizedText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_InkAnalysisWritingRegion(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_InkAnalysisWritingRegion(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InkAnalysisWritingRegion[] = {
        { "get_stroke_ids", reinterpret_cast<PyCFunction>(InkAnalysisWritingRegion_GetStrokeIds), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_InkAnalysisWritingRegion, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_InkAnalysisWritingRegion), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_InkAnalysisWritingRegion[] = {
        { "bounding_rect", reinterpret_cast<getter>(InkAnalysisWritingRegion_get_BoundingRect), nullptr, nullptr, nullptr },
        { "children", reinterpret_cast<getter>(InkAnalysisWritingRegion_get_Children), nullptr, nullptr, nullptr },
        { "id", reinterpret_cast<getter>(InkAnalysisWritingRegion_get_Id), nullptr, nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(InkAnalysisWritingRegion_get_Kind), nullptr, nullptr, nullptr },
        { "parent", reinterpret_cast<getter>(InkAnalysisWritingRegion_get_Parent), nullptr, nullptr, nullptr },
        { "rotated_bounding_rect", reinterpret_cast<getter>(InkAnalysisWritingRegion_get_RotatedBoundingRect), nullptr, nullptr, nullptr },
        { "recognized_text", reinterpret_cast<getter>(InkAnalysisWritingRegion_get_RecognizedText), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_InkAnalysisWritingRegion[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_InkAnalysisWritingRegion) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_InkAnalysisWritingRegion) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_InkAnalysisWritingRegion) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_InkAnalysisWritingRegion) },
        { },
    };

    static PyType_Spec type_spec_InkAnalysisWritingRegion =
    {
        "_winsdk_Windows_UI_Input_Inking_Analysis.InkAnalysisWritingRegion",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InkAnalysisWritingRegion
    };

    // ----- InkAnalyzer class --------------------
    static constexpr const char* const type_name_InkAnalyzer = "InkAnalyzer";

    static PyObject* _new_InkAnalyzer(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::UI::Input::Inking::Analysis::InkAnalyzer instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_InkAnalyzer(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* InkAnalyzer_AddDataForStroke(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalyzer", L"AddDataForStroke", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Input::Inking::InkStroke>(args, 0);

                self->obj.AddDataForStroke(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalyzer_AddDataForStrokes(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalyzer", L"AddDataForStrokes", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::UI::Input::Inking::InkStroke>>(args, 0);

                self->obj.AddDataForStrokes(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalyzer_AnalyzeAsync(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalyzer", L"AnalyzeAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.AnalyzeAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalyzer_ClearDataForAllStrokes(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalyzer", L"ClearDataForAllStrokes", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.ClearDataForAllStrokes();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalyzer_RemoveDataForStroke(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalyzer", L"RemoveDataForStroke", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                self->obj.RemoveDataForStroke(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalyzer_RemoveDataForStrokes(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalyzer", L"RemoveDataForStrokes", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<uint32_t>>(args, 0);

                self->obj.RemoveDataForStrokes(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalyzer_ReplaceDataForStroke(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalyzer", L"ReplaceDataForStroke", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Input::Inking::InkStroke>(args, 0);

                self->obj.ReplaceDataForStroke(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalyzer_SetStrokeDataKind(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalyzer", L"SetStrokeDataKind", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisStrokeKind>(args, 1);

                self->obj.SetStrokeDataKind(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalyzer_get_AnalysisRoot(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalyzer", L"AnalysisRoot"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AnalysisRoot());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalyzer_get_IsAnalyzing(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.InkAnalyzer", L"IsAnalyzing"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsAnalyzing());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_InkAnalyzer(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Input::Inking::Analysis::InkAnalyzer>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_InkAnalyzer(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::InkAnalyzer>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InkAnalyzer[] = {
        { "add_data_for_stroke", reinterpret_cast<PyCFunction>(InkAnalyzer_AddDataForStroke), METH_VARARGS, nullptr },
        { "add_data_for_strokes", reinterpret_cast<PyCFunction>(InkAnalyzer_AddDataForStrokes), METH_VARARGS, nullptr },
        { "analyze_async", reinterpret_cast<PyCFunction>(InkAnalyzer_AnalyzeAsync), METH_VARARGS, nullptr },
        { "clear_data_for_all_strokes", reinterpret_cast<PyCFunction>(InkAnalyzer_ClearDataForAllStrokes), METH_VARARGS, nullptr },
        { "remove_data_for_stroke", reinterpret_cast<PyCFunction>(InkAnalyzer_RemoveDataForStroke), METH_VARARGS, nullptr },
        { "remove_data_for_strokes", reinterpret_cast<PyCFunction>(InkAnalyzer_RemoveDataForStrokes), METH_VARARGS, nullptr },
        { "replace_data_for_stroke", reinterpret_cast<PyCFunction>(InkAnalyzer_ReplaceDataForStroke), METH_VARARGS, nullptr },
        { "set_stroke_data_kind", reinterpret_cast<PyCFunction>(InkAnalyzer_SetStrokeDataKind), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_InkAnalyzer, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_InkAnalyzer), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_InkAnalyzer[] = {
        { "analysis_root", reinterpret_cast<getter>(InkAnalyzer_get_AnalysisRoot), nullptr, nullptr, nullptr },
        { "is_analyzing", reinterpret_cast<getter>(InkAnalyzer_get_IsAnalyzing), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_InkAnalyzer[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_InkAnalyzer) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_InkAnalyzer) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_InkAnalyzer) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_InkAnalyzer) },
        { },
    };

    static PyType_Spec type_spec_InkAnalyzer =
    {
        "_winsdk_Windows_UI_Input_Inking_Analysis.InkAnalyzer",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InkAnalyzer
    };

    // ----- IInkAnalysisNode interface --------------------
    static constexpr const char* const type_name_IInkAnalysisNode = "IInkAnalysisNode";

    static PyObject* _new_IInkAnalysisNode(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */) noexcept
    {
        py::set_invalid_activation_error(type_name_IInkAnalysisNode);
        return nullptr;
    }

    static void _dealloc_IInkAnalysisNode(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IInkAnalysisNode_GetStrokeIds(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Analysis.IInkAnalysisNode", L"GetStrokeIds", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetStrokeIds());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IInkAnalysisNode_get_BoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.IInkAnalysisNode", L"BoundingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IInkAnalysisNode_get_Children(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.IInkAnalysisNode", L"Children"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Children());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IInkAnalysisNode_get_Id(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.IInkAnalysisNode", L"Id"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IInkAnalysisNode_get_Kind(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.IInkAnalysisNode", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IInkAnalysisNode_get_Parent(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.IInkAnalysisNode", L"Parent"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Parent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IInkAnalysisNode_get_RotatedBoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Analysis.IInkAnalysisNode", L"RotatedBoundingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RotatedBoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_IInkAnalysisNode(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IInkAnalysisNode(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IInkAnalysisNode[] = {
        { "get_stroke_ids", reinterpret_cast<PyCFunction>(IInkAnalysisNode_GetStrokeIds), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_IInkAnalysisNode, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IInkAnalysisNode), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IInkAnalysisNode[] = {
        { "bounding_rect", reinterpret_cast<getter>(IInkAnalysisNode_get_BoundingRect), nullptr, nullptr, nullptr },
        { "children", reinterpret_cast<getter>(IInkAnalysisNode_get_Children), nullptr, nullptr, nullptr },
        { "id", reinterpret_cast<getter>(IInkAnalysisNode_get_Id), nullptr, nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(IInkAnalysisNode_get_Kind), nullptr, nullptr, nullptr },
        { "parent", reinterpret_cast<getter>(IInkAnalysisNode_get_Parent), nullptr, nullptr, nullptr },
        { "rotated_bounding_rect", reinterpret_cast<getter>(IInkAnalysisNode_get_RotatedBoundingRect), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_IInkAnalysisNode[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_IInkAnalysisNode) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IInkAnalysisNode) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IInkAnalysisNode) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IInkAnalysisNode) },
        { },
    };

    static PyType_Spec type_spec_IInkAnalysisNode =
    {
        "_winsdk_Windows_UI_Input_Inking_Analysis.IInkAnalysisNode",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IInkAnalysisNode
    };

    // ----- IInkAnalyzerFactory interface --------------------
    static constexpr const char* const type_name_IInkAnalyzerFactory = "IInkAnalyzerFactory";

    static PyObject* _new_IInkAnalyzerFactory(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */) noexcept
    {
        py::set_invalid_activation_error(type_name_IInkAnalyzerFactory);
        return nullptr;
    }

    static void _dealloc_IInkAnalyzerFactory(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalyzerFactory* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IInkAnalyzerFactory_CreateAnalyzer(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalyzerFactory* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Analysis.IInkAnalyzerFactory", L"CreateAnalyzer", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.CreateAnalyzer());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_IInkAnalyzerFactory(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Input::Inking::Analysis::IInkAnalyzerFactory>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IInkAnalyzerFactory(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::IInkAnalyzerFactory>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IInkAnalyzerFactory[] = {
        { "create_analyzer", reinterpret_cast<PyCFunction>(IInkAnalyzerFactory_CreateAnalyzer), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_IInkAnalyzerFactory, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IInkAnalyzerFactory), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IInkAnalyzerFactory[] = {
        { }
    };

    static PyType_Slot _type_slots_IInkAnalyzerFactory[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_IInkAnalyzerFactory) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IInkAnalyzerFactory) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IInkAnalyzerFactory) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IInkAnalyzerFactory) },
        { },
    };

    static PyType_Spec type_spec_IInkAnalyzerFactory =
    {
        "_winsdk_Windows_UI_Input_Inking_Analysis.IInkAnalyzerFactory",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalyzerFactory),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IInkAnalyzerFactory
    };

    // ----- Windows.UI.Input.Inking.Analysis Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::UI::Input::Inking::Analysis");

    static PyMethodDef module_methods[] = {
        {"_register_InkAnalysisDrawingKind", register_InkAnalysisDrawingKind, METH_O, "registers type"},
        {"_register_InkAnalysisNodeKind", register_InkAnalysisNodeKind, METH_O, "registers type"},
        {"_register_InkAnalysisStatus", register_InkAnalysisStatus, METH_O, "registers type"},
        {"_register_InkAnalysisStrokeKind", register_InkAnalysisStrokeKind, METH_O, "registers type"},
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_InkAnalysisDrawingKind);
        Py_VISIT(state->type_InkAnalysisNodeKind);
        Py_VISIT(state->type_InkAnalysisStatus);
        Py_VISIT(state->type_InkAnalysisStrokeKind);
        Py_VISIT(state->type_InkAnalysisInkBullet);
        Py_VISIT(state->type_InkAnalysisInkDrawing);
        Py_VISIT(state->type_InkAnalysisInkWord);
        Py_VISIT(state->type_InkAnalysisLine);
        Py_VISIT(state->type_InkAnalysisListItem);
        Py_VISIT(state->type_InkAnalysisNode);
        Py_VISIT(state->type_InkAnalysisParagraph);
        Py_VISIT(state->type_InkAnalysisResult);
        Py_VISIT(state->type_InkAnalysisRoot);
        Py_VISIT(state->type_InkAnalysisWritingRegion);
        Py_VISIT(state->type_InkAnalyzer);
        Py_VISIT(state->type_IInkAnalysisNode);
        Py_VISIT(state->type_IInkAnalyzerFactory);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_InkAnalysisDrawingKind);
        Py_CLEAR(state->type_InkAnalysisNodeKind);
        Py_CLEAR(state->type_InkAnalysisStatus);
        Py_CLEAR(state->type_InkAnalysisStrokeKind);
        Py_CLEAR(state->type_InkAnalysisInkBullet);
        Py_CLEAR(state->type_InkAnalysisInkDrawing);
        Py_CLEAR(state->type_InkAnalysisInkWord);
        Py_CLEAR(state->type_InkAnalysisLine);
        Py_CLEAR(state->type_InkAnalysisListItem);
        Py_CLEAR(state->type_InkAnalysisNode);
        Py_CLEAR(state->type_InkAnalysisParagraph);
        Py_CLEAR(state->type_InkAnalysisResult);
        Py_CLEAR(state->type_InkAnalysisRoot);
        Py_CLEAR(state->type_InkAnalysisWritingRegion);
        Py_CLEAR(state->type_InkAnalyzer);
        Py_CLEAR(state->type_IInkAnalysisNode);
        Py_CLEAR(state->type_IInkAnalyzerFactory);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_UI_Input_Inking_Analysis",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::UI::Input::Inking::Analysis

PyMODINIT_FUNC PyInit__winsdk_Windows_UI_Input_Inking_Analysis(void) noexcept
{
    using namespace py::cpp::Windows::UI::Input::Inking::Analysis;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_InkAnalysisInkBullet = py::register_python_type(module.get(), type_name_InkAnalysisInkBullet, &type_spec_InkAnalysisInkBullet, bases.get(), nullptr);
    if (!state->type_InkAnalysisInkBullet)
    {
        return nullptr;
    }

    state->type_InkAnalysisInkDrawing = py::register_python_type(module.get(), type_name_InkAnalysisInkDrawing, &type_spec_InkAnalysisInkDrawing, bases.get(), nullptr);
    if (!state->type_InkAnalysisInkDrawing)
    {
        return nullptr;
    }

    state->type_InkAnalysisInkWord = py::register_python_type(module.get(), type_name_InkAnalysisInkWord, &type_spec_InkAnalysisInkWord, bases.get(), nullptr);
    if (!state->type_InkAnalysisInkWord)
    {
        return nullptr;
    }

    state->type_InkAnalysisLine = py::register_python_type(module.get(), type_name_InkAnalysisLine, &type_spec_InkAnalysisLine, bases.get(), nullptr);
    if (!state->type_InkAnalysisLine)
    {
        return nullptr;
    }

    state->type_InkAnalysisListItem = py::register_python_type(module.get(), type_name_InkAnalysisListItem, &type_spec_InkAnalysisListItem, bases.get(), nullptr);
    if (!state->type_InkAnalysisListItem)
    {
        return nullptr;
    }

    state->type_InkAnalysisNode = py::register_python_type(module.get(), type_name_InkAnalysisNode, &type_spec_InkAnalysisNode, bases.get(), nullptr);
    if (!state->type_InkAnalysisNode)
    {
        return nullptr;
    }

    state->type_InkAnalysisParagraph = py::register_python_type(module.get(), type_name_InkAnalysisParagraph, &type_spec_InkAnalysisParagraph, bases.get(), nullptr);
    if (!state->type_InkAnalysisParagraph)
    {
        return nullptr;
    }

    state->type_InkAnalysisResult = py::register_python_type(module.get(), type_name_InkAnalysisResult, &type_spec_InkAnalysisResult, bases.get(), nullptr);
    if (!state->type_InkAnalysisResult)
    {
        return nullptr;
    }

    state->type_InkAnalysisRoot = py::register_python_type(module.get(), type_name_InkAnalysisRoot, &type_spec_InkAnalysisRoot, bases.get(), nullptr);
    if (!state->type_InkAnalysisRoot)
    {
        return nullptr;
    }

    state->type_InkAnalysisWritingRegion = py::register_python_type(module.get(), type_name_InkAnalysisWritingRegion, &type_spec_InkAnalysisWritingRegion, bases.get(), nullptr);
    if (!state->type_InkAnalysisWritingRegion)
    {
        return nullptr;
    }

    state->type_InkAnalyzer = py::register_python_type(module.get(), type_name_InkAnalyzer, &type_spec_InkAnalyzer, bases.get(), nullptr);
    if (!state->type_InkAnalyzer)
    {
        return nullptr;
    }

    state->type_IInkAnalysisNode = py::register_python_type(module.get(), type_name_IInkAnalysisNode, &type_spec_IInkAnalysisNode, bases.get(), nullptr);
    if (!state->type_IInkAnalysisNode)
    {
        return nullptr;
    }

    state->type_IInkAnalyzerFactory = py::register_python_type(module.get(), type_name_IInkAnalyzerFactory, &type_spec_IInkAnalyzerFactory, bases.get(), nullptr);
    if (!state->type_IInkAnalyzerFactory)
    {
        return nullptr;
    }


    return module.detach();
}

PyObject* py::py_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisDrawingKind>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Input::Inking::Analysis;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Input::Inking::Analysis");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_InkAnalysisDrawingKind;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisDrawingKind is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisNodeKind>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Input::Inking::Analysis;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Input::Inking::Analysis");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_InkAnalysisNodeKind;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisNodeKind is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisStatus>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Input::Inking::Analysis;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Input::Inking::Analysis");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_InkAnalysisStatus;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisStatus is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisStrokeKind>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Input::Inking::Analysis;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Input::Inking::Analysis");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_InkAnalysisStrokeKind;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisStrokeKind is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Input::Inking::Analysis;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Input::Inking::Analysis");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_InkAnalysisInkBullet;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Input::Inking::Analysis;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Input::Inking::Analysis");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_InkAnalysisInkDrawing;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Input::Inking::Analysis;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Input::Inking::Analysis");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_InkAnalysisInkWord;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisLine>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Input::Inking::Analysis;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Input::Inking::Analysis");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_InkAnalysisLine;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisLine is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Input::Inking::Analysis;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Input::Inking::Analysis");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_InkAnalysisListItem;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisNode>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Input::Inking::Analysis;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Input::Inking::Analysis");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_InkAnalysisNode;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisNode is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Input::Inking::Analysis;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Input::Inking::Analysis");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_InkAnalysisParagraph;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisResult>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Input::Inking::Analysis;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Input::Inking::Analysis");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_InkAnalysisResult;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisResult is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Input::Inking::Analysis;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Input::Inking::Analysis");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_InkAnalysisRoot;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Input::Inking::Analysis;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Input::Inking::Analysis");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_InkAnalysisWritingRegion;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalyzer>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Input::Inking::Analysis;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Input::Inking::Analysis");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_InkAnalyzer;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Input::Inking::Analysis::InkAnalyzer is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Input::Inking::Analysis;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Input::Inking::Analysis");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_IInkAnalysisNode;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::IInkAnalyzerFactory>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Input::Inking::Analysis;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Input::Inking::Analysis");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_IInkAnalyzerFactory;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Input::Inking::Analysis::IInkAnalyzerFactory is not registered");
        return nullptr;
    }

    return python_type;
}
