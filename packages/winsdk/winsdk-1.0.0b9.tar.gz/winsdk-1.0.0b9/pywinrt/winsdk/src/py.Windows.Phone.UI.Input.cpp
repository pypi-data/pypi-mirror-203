// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.Phone.UI.Input.h"


namespace py::cpp::Windows::Phone::UI::Input
{
    struct module_state
    {
        PyTypeObject* type_BackPressedEventArgs;
        PyTypeObject* type_CameraEventArgs;
        PyTypeObject* type_HardwareButtons;
    };

    // ----- BackPressedEventArgs class --------------------
    static constexpr const char* const type_name_BackPressedEventArgs = "BackPressedEventArgs";

    static PyObject* _new_BackPressedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_BackPressedEventArgs);
        return nullptr;
    }

    static void _dealloc_BackPressedEventArgs(py::wrapper::Windows::Phone::UI::Input::BackPressedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* BackPressedEventArgs_get_Handled(py::wrapper::Windows::Phone::UI::Input::BackPressedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Phone.UI.Input.BackPressedEventArgs", L"Handled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int BackPressedEventArgs_put_Handled(py::wrapper::Windows::Phone::UI::Input::BackPressedEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Phone.UI.Input.BackPressedEventArgs", L"Handled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Handled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_BackPressedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Phone::UI::Input::BackPressedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_BackPressedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Phone::UI::Input::BackPressedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_BackPressedEventArgs[] = {
        { "_assign_array_", _assign_array_BackPressedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_BackPressedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_BackPressedEventArgs[] = {
        { "handled", reinterpret_cast<getter>(BackPressedEventArgs_get_Handled), reinterpret_cast<setter>(BackPressedEventArgs_put_Handled), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_BackPressedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_BackPressedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_BackPressedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_BackPressedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_BackPressedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_BackPressedEventArgs =
    {
        "_winsdk_Windows_Phone_UI_Input.BackPressedEventArgs",
        sizeof(py::wrapper::Windows::Phone::UI::Input::BackPressedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_BackPressedEventArgs
    };

    // ----- CameraEventArgs class --------------------
    static constexpr const char* const type_name_CameraEventArgs = "CameraEventArgs";

    static PyObject* _new_CameraEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_CameraEventArgs);
        return nullptr;
    }

    static void _dealloc_CameraEventArgs(py::wrapper::Windows::Phone::UI::Input::CameraEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_CameraEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Phone::UI::Input::CameraEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_CameraEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Phone::UI::Input::CameraEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CameraEventArgs[] = {
        { "_assign_array_", _assign_array_CameraEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CameraEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CameraEventArgs[] = {
        { }
    };

    static PyType_Slot _type_slots_CameraEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CameraEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_CameraEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CameraEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CameraEventArgs) },
        { },
    };

    static PyType_Spec type_spec_CameraEventArgs =
    {
        "_winsdk_Windows_Phone_UI_Input.CameraEventArgs",
        sizeof(py::wrapper::Windows::Phone::UI::Input::CameraEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CameraEventArgs
    };

    // ----- HardwareButtons class --------------------
    static constexpr const char* const type_name_HardwareButtons = "HardwareButtons";

    static PyObject* _new_HardwareButtons(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_HardwareButtons);
        return nullptr;
    }

    static PyObject* HardwareButtons_add_BackPressed(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Phone.UI.Input.HardwareButtons", L"BackPressed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Phone::UI::Input::BackPressedEventArgs>>(arg);

            return py::convert(winrt::Windows::Phone::UI::Input::HardwareButtons::BackPressed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HardwareButtons_remove_BackPressed(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Phone.UI.Input.HardwareButtons", L"BackPressed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::Phone::UI::Input::HardwareButtons::BackPressed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HardwareButtons_add_CameraHalfPressed(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Phone.UI.Input.HardwareButtons", L"CameraHalfPressed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Phone::UI::Input::CameraEventArgs>>(arg);

            return py::convert(winrt::Windows::Phone::UI::Input::HardwareButtons::CameraHalfPressed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HardwareButtons_remove_CameraHalfPressed(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Phone.UI.Input.HardwareButtons", L"CameraHalfPressed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::Phone::UI::Input::HardwareButtons::CameraHalfPressed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HardwareButtons_add_CameraPressed(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Phone.UI.Input.HardwareButtons", L"CameraPressed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Phone::UI::Input::CameraEventArgs>>(arg);

            return py::convert(winrt::Windows::Phone::UI::Input::HardwareButtons::CameraPressed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HardwareButtons_remove_CameraPressed(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Phone.UI.Input.HardwareButtons", L"CameraPressed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::Phone::UI::Input::HardwareButtons::CameraPressed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HardwareButtons_add_CameraReleased(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Phone.UI.Input.HardwareButtons", L"CameraReleased"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Phone::UI::Input::CameraEventArgs>>(arg);

            return py::convert(winrt::Windows::Phone::UI::Input::HardwareButtons::CameraReleased(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HardwareButtons_remove_CameraReleased(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Phone.UI.Input.HardwareButtons", L"CameraReleased"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::Phone::UI::Input::HardwareButtons::CameraReleased(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HardwareButtons[] = {
        { "add_back_pressed", reinterpret_cast<PyCFunction>(HardwareButtons_add_BackPressed), METH_O | METH_STATIC, nullptr },
        { "remove_back_pressed", reinterpret_cast<PyCFunction>(HardwareButtons_remove_BackPressed), METH_O | METH_STATIC, nullptr },
        { "add_camera_half_pressed", reinterpret_cast<PyCFunction>(HardwareButtons_add_CameraHalfPressed), METH_O | METH_STATIC, nullptr },
        { "remove_camera_half_pressed", reinterpret_cast<PyCFunction>(HardwareButtons_remove_CameraHalfPressed), METH_O | METH_STATIC, nullptr },
        { "add_camera_pressed", reinterpret_cast<PyCFunction>(HardwareButtons_add_CameraPressed), METH_O | METH_STATIC, nullptr },
        { "remove_camera_pressed", reinterpret_cast<PyCFunction>(HardwareButtons_remove_CameraPressed), METH_O | METH_STATIC, nullptr },
        { "add_camera_released", reinterpret_cast<PyCFunction>(HardwareButtons_add_CameraReleased), METH_O | METH_STATIC, nullptr },
        { "remove_camera_released", reinterpret_cast<PyCFunction>(HardwareButtons_remove_CameraReleased), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_HardwareButtons[] = {
        { }
    };

    static PyType_Slot _type_slots_HardwareButtons[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_HardwareButtons) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HardwareButtons) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HardwareButtons) },
        { },
    };

    static PyType_Spec type_spec_HardwareButtons =
    {
        "_winsdk_Windows_Phone_UI_Input.HardwareButtons",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HardwareButtons
    };

    // ----- Windows.Phone.UI.Input Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Phone::UI::Input");

    static PyMethodDef module_methods[] = {
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_BackPressedEventArgs);
        Py_VISIT(state->type_CameraEventArgs);
        Py_VISIT(state->type_HardwareButtons);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_BackPressedEventArgs);
        Py_CLEAR(state->type_CameraEventArgs);
        Py_CLEAR(state->type_HardwareButtons);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Phone_UI_Input",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Phone::UI::Input

PyMODINIT_FUNC PyInit__winsdk_Windows_Phone_UI_Input(void) noexcept
{
    using namespace py::cpp::Windows::Phone::UI::Input;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_BackPressedEventArgs = py::register_python_type(module.get(), type_name_BackPressedEventArgs, &type_spec_BackPressedEventArgs, bases.get(), nullptr);
    if (!state->type_BackPressedEventArgs)
    {
        return nullptr;
    }

    state->type_CameraEventArgs = py::register_python_type(module.get(), type_name_CameraEventArgs, &type_spec_CameraEventArgs, bases.get(), nullptr);
    if (!state->type_CameraEventArgs)
    {
        return nullptr;
    }

    state->type_HardwareButtons = py::register_python_type(module.get(), type_name_HardwareButtons, &type_spec_HardwareButtons, nullptr, nullptr);
    if (!state->type_HardwareButtons)
    {
        return nullptr;
    }


    return module.detach();
}

PyTypeObject* py::winrt_type<winrt::Windows::Phone::UI::Input::BackPressedEventArgs>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Phone::UI::Input;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Phone::UI::Input");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_BackPressedEventArgs;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Phone::UI::Input::BackPressedEventArgs is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Phone::UI::Input::CameraEventArgs>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Phone::UI::Input;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Phone::UI::Input");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_CameraEventArgs;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Phone::UI::Input::CameraEventArgs is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Phone::UI::Input::HardwareButtons>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Phone::UI::Input;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Phone::UI::Input");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_HardwareButtons;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Phone::UI::Input::HardwareButtons is not registered");
        return nullptr;
    }

    return python_type;
}
