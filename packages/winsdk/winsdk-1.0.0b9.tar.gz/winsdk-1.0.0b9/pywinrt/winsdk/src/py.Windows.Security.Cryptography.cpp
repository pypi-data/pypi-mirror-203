// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.Security.Cryptography.h"


namespace py::cpp::Windows::Security::Cryptography
{
    struct module_state
    {
        PyObject* type_BinaryStringEncoding;
        PyTypeObject* type_CryptographicBuffer;
    };

    static PyObject* register_BinaryStringEncoding(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_BinaryStringEncoding)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_BinaryStringEncoding = type;
        Py_INCREF(state->type_BinaryStringEncoding);


        Py_RETURN_NONE;
    }

    // ----- CryptographicBuffer class --------------------
    static constexpr const char* const type_name_CryptographicBuffer = "CryptographicBuffer";

    static PyObject* _new_CryptographicBuffer(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_CryptographicBuffer);
        return nullptr;
    }

    static PyObject* CryptographicBuffer_Compare(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.CryptographicBuffer", L"Compare", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 1);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::Compare(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_ConvertBinaryToString(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.CryptographicBuffer", L"ConvertBinaryToString", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Cryptography::BinaryStringEncoding>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 1);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::ConvertBinaryToString(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_ConvertStringToBinary(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.CryptographicBuffer", L"ConvertStringToBinary", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Security::Cryptography::BinaryStringEncoding>(args, 1);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::ConvertStringToBinary(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_CopyToByteArray(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.CryptographicBuffer", L"CopyToByteArray", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);
                winrt::com_array<uint8_t> param1 { };

                winrt::Windows::Security::Cryptography::CryptographicBuffer::CopyToByteArray(param0, param1);

                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return out1.detach();
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_CreateFromByteArray(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.CryptographicBuffer", L"CreateFromByteArray", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<py::pybuf_view<uint8_t, false>>(args, 0);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::CreateFromByteArray(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_DecodeFromBase64String(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.CryptographicBuffer", L"DecodeFromBase64String", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::DecodeFromBase64String(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_DecodeFromHexString(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.CryptographicBuffer", L"DecodeFromHexString", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::DecodeFromHexString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_EncodeToBase64String(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.CryptographicBuffer", L"EncodeToBase64String", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::EncodeToBase64String(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_EncodeToHexString(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.CryptographicBuffer", L"EncodeToHexString", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::EncodeToHexString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_GenerateRandom(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.CryptographicBuffer", L"GenerateRandom", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::GenerateRandom(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_GenerateRandomNumber(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.CryptographicBuffer", L"GenerateRandomNumber", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::GenerateRandomNumber());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_CryptographicBuffer[] = {
        { "compare", reinterpret_cast<PyCFunction>(CryptographicBuffer_Compare), METH_VARARGS | METH_STATIC, nullptr },
        { "convert_binary_to_string", reinterpret_cast<PyCFunction>(CryptographicBuffer_ConvertBinaryToString), METH_VARARGS | METH_STATIC, nullptr },
        { "convert_string_to_binary", reinterpret_cast<PyCFunction>(CryptographicBuffer_ConvertStringToBinary), METH_VARARGS | METH_STATIC, nullptr },
        { "copy_to_byte_array", reinterpret_cast<PyCFunction>(CryptographicBuffer_CopyToByteArray), METH_VARARGS | METH_STATIC, nullptr },
        { "create_from_byte_array", reinterpret_cast<PyCFunction>(CryptographicBuffer_CreateFromByteArray), METH_VARARGS | METH_STATIC, nullptr },
        { "decode_from_base64_string", reinterpret_cast<PyCFunction>(CryptographicBuffer_DecodeFromBase64String), METH_VARARGS | METH_STATIC, nullptr },
        { "decode_from_hex_string", reinterpret_cast<PyCFunction>(CryptographicBuffer_DecodeFromHexString), METH_VARARGS | METH_STATIC, nullptr },
        { "encode_to_base64_string", reinterpret_cast<PyCFunction>(CryptographicBuffer_EncodeToBase64String), METH_VARARGS | METH_STATIC, nullptr },
        { "encode_to_hex_string", reinterpret_cast<PyCFunction>(CryptographicBuffer_EncodeToHexString), METH_VARARGS | METH_STATIC, nullptr },
        { "generate_random", reinterpret_cast<PyCFunction>(CryptographicBuffer_GenerateRandom), METH_VARARGS | METH_STATIC, nullptr },
        { "generate_random_number", reinterpret_cast<PyCFunction>(CryptographicBuffer_GenerateRandomNumber), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CryptographicBuffer[] = {
        { }
    };

    static PyType_Slot _type_slots_CryptographicBuffer[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CryptographicBuffer) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CryptographicBuffer) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CryptographicBuffer) },
        { },
    };

    static PyType_Spec type_spec_CryptographicBuffer =
    {
        "_winsdk_Windows_Security_Cryptography.CryptographicBuffer",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CryptographicBuffer
    };

    // ----- Windows.Security.Cryptography Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Security::Cryptography");

    static PyMethodDef module_methods[] = {
        {"_register_BinaryStringEncoding", register_BinaryStringEncoding, METH_O, "registers type"},
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_BinaryStringEncoding);
        Py_VISIT(state->type_CryptographicBuffer);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_BinaryStringEncoding);
        Py_CLEAR(state->type_CryptographicBuffer);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Security_Cryptography",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Security::Cryptography

PyMODINIT_FUNC PyInit__winsdk_Windows_Security_Cryptography(void) noexcept
{
    using namespace py::cpp::Windows::Security::Cryptography;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_CryptographicBuffer = py::register_python_type(module.get(), type_name_CryptographicBuffer, &type_spec_CryptographicBuffer, nullptr, nullptr);
    if (!state->type_CryptographicBuffer)
    {
        return nullptr;
    }


    return module.detach();
}

PyObject* py::py_type<winrt::Windows::Security::Cryptography::BinaryStringEncoding>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Cryptography;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Cryptography");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_BinaryStringEncoding;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Cryptography::BinaryStringEncoding is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Cryptography::CryptographicBuffer>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Cryptography;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Cryptography");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_CryptographicBuffer;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Cryptography::CryptographicBuffer is not registered");
        return nullptr;
    }

    return python_type;
}
