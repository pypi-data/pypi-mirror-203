// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.Security.Authentication.Web.Provider.h"


namespace py::cpp::Windows::Security::Authentication::Web::Provider
{
    struct module_state
    {
        PyObject* type_WebAccountClientViewType;
        PyObject* type_WebAccountProviderOperationKind;
        PyObject* type_WebAccountScope;
        PyObject* type_WebAccountSelectionOptions;
        PyTypeObject* type_WebAccountClientView;
        PyTypeObject* type_WebAccountManager;
        PyTypeObject* type_WebAccountProviderAddAccountOperation;
        PyTypeObject* type_WebAccountProviderDeleteAccountOperation;
        PyTypeObject* type_WebAccountProviderGetTokenSilentOperation;
        PyTypeObject* type_WebAccountProviderManageAccountOperation;
        PyTypeObject* type_WebAccountProviderRequestTokenOperation;
        PyTypeObject* type_WebAccountProviderRetrieveCookiesOperation;
        PyTypeObject* type_WebAccountProviderSignOutAccountOperation;
        PyTypeObject* type_WebAccountProviderTriggerDetails;
        PyTypeObject* type_WebProviderTokenRequest;
        PyTypeObject* type_WebProviderTokenResponse;
        PyTypeObject* type_IWebAccountProviderBaseReportOperation;
        PyTypeObject* type_IWebAccountProviderOperation;
        PyTypeObject* type_IWebAccountProviderSilentReportOperation;
        PyTypeObject* type_IWebAccountProviderTokenObjects;
        PyTypeObject* type_IWebAccountProviderTokenObjects2;
        PyTypeObject* type_IWebAccountProviderTokenOperation;
        PyTypeObject* type_IWebAccountProviderUIReportOperation;
    };

    static PyObject* register_WebAccountClientViewType(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_WebAccountClientViewType)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_WebAccountClientViewType = type;
        Py_INCREF(state->type_WebAccountClientViewType);


        Py_RETURN_NONE;
    }

    static PyObject* register_WebAccountProviderOperationKind(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_WebAccountProviderOperationKind)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_WebAccountProviderOperationKind = type;
        Py_INCREF(state->type_WebAccountProviderOperationKind);


        Py_RETURN_NONE;
    }

    static PyObject* register_WebAccountScope(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_WebAccountScope)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_WebAccountScope = type;
        Py_INCREF(state->type_WebAccountScope);


        Py_RETURN_NONE;
    }

    static PyObject* register_WebAccountSelectionOptions(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_WebAccountSelectionOptions)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_WebAccountSelectionOptions = type;
        Py_INCREF(state->type_WebAccountSelectionOptions);


        Py_RETURN_NONE;
    }

    // ----- WebAccountClientView class --------------------
    static constexpr const char* const type_name_WebAccountClientView = "WebAccountClientView";

    static PyObject* _new_WebAccountClientView(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Provider::WebAccountClientViewType>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 1);

                winrt::Windows::Security::Authentication::Web::Provider::WebAccountClientView instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Provider::WebAccountClientViewType>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                winrt::Windows::Security::Authentication::Web::Provider::WebAccountClientView instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_WebAccountClientView(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountClientView* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* WebAccountClientView_get_AccountPairwiseId(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountClientView* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountClientView", L"AccountPairwiseId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AccountPairwiseId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountClientView_get_ApplicationCallbackUri(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountClientView* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountClientView", L"ApplicationCallbackUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ApplicationCallbackUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountClientView_get_Type(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountClientView* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountClientView", L"Type"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_WebAccountClientView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Authentication::Web::Provider::WebAccountClientView>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_WebAccountClientView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::WebAccountClientView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAccountClientView[] = {
        { "_assign_array_", _assign_array_WebAccountClientView, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WebAccountClientView), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebAccountClientView[] = {
        { "account_pairwise_id", reinterpret_cast<getter>(WebAccountClientView_get_AccountPairwiseId), nullptr, nullptr, nullptr },
        { "application_callback_uri", reinterpret_cast<getter>(WebAccountClientView_get_ApplicationCallbackUri), nullptr, nullptr, nullptr },
        { "type", reinterpret_cast<getter>(WebAccountClientView_get_Type), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebAccountClientView[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WebAccountClientView) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_WebAccountClientView) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WebAccountClientView) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WebAccountClientView) },
        { },
    };

    static PyType_Spec type_spec_WebAccountClientView =
    {
        "_winsdk_Windows_Security_Authentication_Web_Provider.WebAccountClientView",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountClientView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAccountClientView
    };

    // ----- WebAccountManager class --------------------
    static constexpr const char* const type_name_WebAccountManager = "WebAccountManager";

    static PyObject* _new_WebAccountManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_WebAccountManager);
        return nullptr;
    }

    static PyObject* WebAccountManager_AddWebAccountAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"AddWebAccountAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring>>(args, 2);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::AddWebAccountAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"AddWebAccountAsync", 4))
            {
                py::set_arg_count_version_error(4);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring>>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Security::Authentication::Web::Provider::WebAccountScope>(args, 3);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::AddWebAccountAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 5)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"AddWebAccountAsync", 5))
            {
                py::set_arg_count_version_error(5);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring>>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Security::Authentication::Web::Provider::WebAccountScope>(args, 3);
                auto param4 = py::convert_to<winrt::hstring>(args, 4);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::AddWebAccountAsync(param0, param1, param2, param3, param4));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_AddWebAccountForUserAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 4)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"AddWebAccountForUserAsync", 4))
            {
                py::set_arg_count_version_error(4);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring>>(args, 3);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::AddWebAccountForUserAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 5)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"AddWebAccountForUserAsync", 5))
            {
                py::set_arg_count_version_error(5);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring>>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::Security::Authentication::Web::Provider::WebAccountScope>(args, 4);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::AddWebAccountForUserAsync(param0, param1, param2, param3, param4));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 6)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"AddWebAccountForUserAsync", 6))
            {
                py::set_arg_count_version_error(6);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring>>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::Security::Authentication::Web::Provider::WebAccountScope>(args, 4);
                auto param5 = py::convert_to<winrt::hstring>(args, 5);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::AddWebAccountForUserAsync(param0, param1, param2, param3, param4, param5));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_ClearPerUserFromPerAppAccountAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"ClearPerUserFromPerAppAccountAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::ClearPerUserFromPerAppAccountAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_ClearViewAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"ClearViewAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 1);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::ClearViewAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_ClearWebAccountPictureAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"ClearWebAccountPictureAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::ClearWebAccountPictureAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_DeleteWebAccountAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"DeleteWebAccountAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::DeleteWebAccountAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_FindAllProviderWebAccountsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"FindAllProviderWebAccountsAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::FindAllProviderWebAccountsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_FindAllProviderWebAccountsForUserAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"FindAllProviderWebAccountsForUserAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::FindAllProviderWebAccountsForUserAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_GetPerUserFromPerAppAccountAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"GetPerUserFromPerAppAccountAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::GetPerUserFromPerAppAccountAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_GetScope(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"GetScope", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::GetScope(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_GetViewsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"GetViewsAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::GetViewsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_InvalidateAppCacheForAccountAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"InvalidateAppCacheForAccountAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::InvalidateAppCacheForAccountAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_InvalidateAppCacheForAllAccountsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"InvalidateAppCacheForAllAccountsAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::InvalidateAppCacheForAllAccountsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_PullCookiesAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"PullCookiesAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::PullCookiesAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_PushCookiesAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"PushCookiesAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Web::Http::HttpCookie>>(args, 1);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::PushCookiesAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_SetPerAppToPerUserAccountAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"SetPerAppToPerUserAccountAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::SetPerAppToPerUserAccountAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_SetScopeAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"SetScopeAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Security::Authentication::Web::Provider::WebAccountScope>(args, 1);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::SetScopeAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_SetViewAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"SetViewAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Security::Authentication::Web::Provider::WebAccountClientView>(args, 1);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::SetViewAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_SetWebAccountPictureAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"SetWebAccountPictureAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(args, 1);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::SetWebAccountPictureAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_UpdateWebAccountPropertiesAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountManager", L"UpdateWebAccountPropertiesAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring>>(args, 2);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::UpdateWebAccountPropertiesAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAccountManager[] = {
        { "add_web_account_async", reinterpret_cast<PyCFunction>(WebAccountManager_AddWebAccountAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "add_web_account_for_user_async", reinterpret_cast<PyCFunction>(WebAccountManager_AddWebAccountForUserAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "clear_per_user_from_per_app_account_async", reinterpret_cast<PyCFunction>(WebAccountManager_ClearPerUserFromPerAppAccountAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "clear_view_async", reinterpret_cast<PyCFunction>(WebAccountManager_ClearViewAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "clear_web_account_picture_async", reinterpret_cast<PyCFunction>(WebAccountManager_ClearWebAccountPictureAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "delete_web_account_async", reinterpret_cast<PyCFunction>(WebAccountManager_DeleteWebAccountAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "find_all_provider_web_accounts_async", reinterpret_cast<PyCFunction>(WebAccountManager_FindAllProviderWebAccountsAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "find_all_provider_web_accounts_for_user_async", reinterpret_cast<PyCFunction>(WebAccountManager_FindAllProviderWebAccountsForUserAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_per_user_from_per_app_account_async", reinterpret_cast<PyCFunction>(WebAccountManager_GetPerUserFromPerAppAccountAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_scope", reinterpret_cast<PyCFunction>(WebAccountManager_GetScope), METH_VARARGS | METH_STATIC, nullptr },
        { "get_views_async", reinterpret_cast<PyCFunction>(WebAccountManager_GetViewsAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "invalidate_app_cache_for_account_async", reinterpret_cast<PyCFunction>(WebAccountManager_InvalidateAppCacheForAccountAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "invalidate_app_cache_for_all_accounts_async", reinterpret_cast<PyCFunction>(WebAccountManager_InvalidateAppCacheForAllAccountsAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "pull_cookies_async", reinterpret_cast<PyCFunction>(WebAccountManager_PullCookiesAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "push_cookies_async", reinterpret_cast<PyCFunction>(WebAccountManager_PushCookiesAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "set_per_app_to_per_user_account_async", reinterpret_cast<PyCFunction>(WebAccountManager_SetPerAppToPerUserAccountAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "set_scope_async", reinterpret_cast<PyCFunction>(WebAccountManager_SetScopeAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "set_view_async", reinterpret_cast<PyCFunction>(WebAccountManager_SetViewAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "set_web_account_picture_async", reinterpret_cast<PyCFunction>(WebAccountManager_SetWebAccountPictureAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "update_web_account_properties_async", reinterpret_cast<PyCFunction>(WebAccountManager_UpdateWebAccountPropertiesAsync), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebAccountManager[] = {
        { }
    };

    static PyType_Slot _type_slots_WebAccountManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WebAccountManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WebAccountManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WebAccountManager) },
        { },
    };

    static PyType_Spec type_spec_WebAccountManager =
    {
        "_winsdk_Windows_Security_Authentication_Web_Provider.WebAccountManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAccountManager
    };

    // ----- WebAccountProviderAddAccountOperation class --------------------
    static constexpr const char* const type_name_WebAccountProviderAddAccountOperation = "WebAccountProviderAddAccountOperation";

    static PyObject* _new_WebAccountProviderAddAccountOperation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_WebAccountProviderAddAccountOperation);
        return nullptr;
    }

    static void _dealloc_WebAccountProviderAddAccountOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderAddAccountOperation* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* WebAccountProviderAddAccountOperation_ReportCompleted(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderAddAccountOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderAddAccountOperation", L"ReportCompleted", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.ReportCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderAddAccountOperation_get_Kind(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderAddAccountOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderAddAccountOperation", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_WebAccountProviderAddAccountOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderAddAccountOperation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_WebAccountProviderAddAccountOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderAddAccountOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAccountProviderAddAccountOperation[] = {
        { "report_completed", reinterpret_cast<PyCFunction>(WebAccountProviderAddAccountOperation_ReportCompleted), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_WebAccountProviderAddAccountOperation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WebAccountProviderAddAccountOperation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebAccountProviderAddAccountOperation[] = {
        { "kind", reinterpret_cast<getter>(WebAccountProviderAddAccountOperation_get_Kind), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebAccountProviderAddAccountOperation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WebAccountProviderAddAccountOperation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_WebAccountProviderAddAccountOperation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WebAccountProviderAddAccountOperation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WebAccountProviderAddAccountOperation) },
        { },
    };

    static PyType_Spec type_spec_WebAccountProviderAddAccountOperation =
    {
        "_winsdk_Windows_Security_Authentication_Web_Provider.WebAccountProviderAddAccountOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderAddAccountOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAccountProviderAddAccountOperation
    };

    // ----- WebAccountProviderDeleteAccountOperation class --------------------
    static constexpr const char* const type_name_WebAccountProviderDeleteAccountOperation = "WebAccountProviderDeleteAccountOperation";

    static PyObject* _new_WebAccountProviderDeleteAccountOperation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_WebAccountProviderDeleteAccountOperation);
        return nullptr;
    }

    static void _dealloc_WebAccountProviderDeleteAccountOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderDeleteAccountOperation* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* WebAccountProviderDeleteAccountOperation_ReportCompleted(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderDeleteAccountOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderDeleteAccountOperation", L"ReportCompleted", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.ReportCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderDeleteAccountOperation_ReportError(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderDeleteAccountOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderDeleteAccountOperation", L"ReportError", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>(args, 0);

                self->obj.ReportError(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderDeleteAccountOperation_get_WebAccount(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderDeleteAccountOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderDeleteAccountOperation", L"WebAccount"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.WebAccount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderDeleteAccountOperation_get_Kind(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderDeleteAccountOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderDeleteAccountOperation", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_WebAccountProviderDeleteAccountOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderDeleteAccountOperation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_WebAccountProviderDeleteAccountOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderDeleteAccountOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAccountProviderDeleteAccountOperation[] = {
        { "report_completed", reinterpret_cast<PyCFunction>(WebAccountProviderDeleteAccountOperation_ReportCompleted), METH_VARARGS, nullptr },
        { "report_error", reinterpret_cast<PyCFunction>(WebAccountProviderDeleteAccountOperation_ReportError), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_WebAccountProviderDeleteAccountOperation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WebAccountProviderDeleteAccountOperation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebAccountProviderDeleteAccountOperation[] = {
        { "web_account", reinterpret_cast<getter>(WebAccountProviderDeleteAccountOperation_get_WebAccount), nullptr, nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(WebAccountProviderDeleteAccountOperation_get_Kind), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebAccountProviderDeleteAccountOperation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WebAccountProviderDeleteAccountOperation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_WebAccountProviderDeleteAccountOperation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WebAccountProviderDeleteAccountOperation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WebAccountProviderDeleteAccountOperation) },
        { },
    };

    static PyType_Spec type_spec_WebAccountProviderDeleteAccountOperation =
    {
        "_winsdk_Windows_Security_Authentication_Web_Provider.WebAccountProviderDeleteAccountOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderDeleteAccountOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAccountProviderDeleteAccountOperation
    };

    // ----- WebAccountProviderGetTokenSilentOperation class --------------------
    static constexpr const char* const type_name_WebAccountProviderGetTokenSilentOperation = "WebAccountProviderGetTokenSilentOperation";

    static PyObject* _new_WebAccountProviderGetTokenSilentOperation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_WebAccountProviderGetTokenSilentOperation);
        return nullptr;
    }

    static void _dealloc_WebAccountProviderGetTokenSilentOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* WebAccountProviderGetTokenSilentOperation_ReportCompleted(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderGetTokenSilentOperation", L"ReportCompleted", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.ReportCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderGetTokenSilentOperation_ReportError(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderGetTokenSilentOperation", L"ReportError", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>(args, 0);

                self->obj.ReportError(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderGetTokenSilentOperation_ReportUserInteractionRequired(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderGetTokenSilentOperation", L"ReportUserInteractionRequired", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.ReportUserInteractionRequired();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderGetTokenSilentOperation", L"ReportUserInteractionRequired", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>(args, 0);

                self->obj.ReportUserInteractionRequired(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderGetTokenSilentOperation_get_Kind(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderGetTokenSilentOperation", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderGetTokenSilentOperation_get_CacheExpirationTime(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderGetTokenSilentOperation", L"CacheExpirationTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CacheExpirationTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WebAccountProviderGetTokenSilentOperation_put_CacheExpirationTime(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderGetTokenSilentOperation", L"CacheExpirationTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::DateTime>(arg);

            self->obj.CacheExpirationTime(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WebAccountProviderGetTokenSilentOperation_get_ProviderRequest(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderGetTokenSilentOperation", L"ProviderRequest"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProviderRequest());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderGetTokenSilentOperation_get_ProviderResponses(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderGetTokenSilentOperation", L"ProviderResponses"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProviderResponses());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_WebAccountProviderGetTokenSilentOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_WebAccountProviderGetTokenSilentOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAccountProviderGetTokenSilentOperation[] = {
        { "report_completed", reinterpret_cast<PyCFunction>(WebAccountProviderGetTokenSilentOperation_ReportCompleted), METH_VARARGS, nullptr },
        { "report_error", reinterpret_cast<PyCFunction>(WebAccountProviderGetTokenSilentOperation_ReportError), METH_VARARGS, nullptr },
        { "report_user_interaction_required", reinterpret_cast<PyCFunction>(WebAccountProviderGetTokenSilentOperation_ReportUserInteractionRequired), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_WebAccountProviderGetTokenSilentOperation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WebAccountProviderGetTokenSilentOperation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebAccountProviderGetTokenSilentOperation[] = {
        { "kind", reinterpret_cast<getter>(WebAccountProviderGetTokenSilentOperation_get_Kind), nullptr, nullptr, nullptr },
        { "cache_expiration_time", reinterpret_cast<getter>(WebAccountProviderGetTokenSilentOperation_get_CacheExpirationTime), reinterpret_cast<setter>(WebAccountProviderGetTokenSilentOperation_put_CacheExpirationTime), nullptr, nullptr },
        { "provider_request", reinterpret_cast<getter>(WebAccountProviderGetTokenSilentOperation_get_ProviderRequest), nullptr, nullptr, nullptr },
        { "provider_responses", reinterpret_cast<getter>(WebAccountProviderGetTokenSilentOperation_get_ProviderResponses), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebAccountProviderGetTokenSilentOperation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WebAccountProviderGetTokenSilentOperation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_WebAccountProviderGetTokenSilentOperation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WebAccountProviderGetTokenSilentOperation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WebAccountProviderGetTokenSilentOperation) },
        { },
    };

    static PyType_Spec type_spec_WebAccountProviderGetTokenSilentOperation =
    {
        "_winsdk_Windows_Security_Authentication_Web_Provider.WebAccountProviderGetTokenSilentOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAccountProviderGetTokenSilentOperation
    };

    // ----- WebAccountProviderManageAccountOperation class --------------------
    static constexpr const char* const type_name_WebAccountProviderManageAccountOperation = "WebAccountProviderManageAccountOperation";

    static PyObject* _new_WebAccountProviderManageAccountOperation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_WebAccountProviderManageAccountOperation);
        return nullptr;
    }

    static void _dealloc_WebAccountProviderManageAccountOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderManageAccountOperation* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* WebAccountProviderManageAccountOperation_ReportCompleted(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderManageAccountOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderManageAccountOperation", L"ReportCompleted", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.ReportCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderManageAccountOperation_get_WebAccount(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderManageAccountOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderManageAccountOperation", L"WebAccount"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.WebAccount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderManageAccountOperation_get_Kind(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderManageAccountOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderManageAccountOperation", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_WebAccountProviderManageAccountOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderManageAccountOperation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_WebAccountProviderManageAccountOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderManageAccountOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAccountProviderManageAccountOperation[] = {
        { "report_completed", reinterpret_cast<PyCFunction>(WebAccountProviderManageAccountOperation_ReportCompleted), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_WebAccountProviderManageAccountOperation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WebAccountProviderManageAccountOperation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebAccountProviderManageAccountOperation[] = {
        { "web_account", reinterpret_cast<getter>(WebAccountProviderManageAccountOperation_get_WebAccount), nullptr, nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(WebAccountProviderManageAccountOperation_get_Kind), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebAccountProviderManageAccountOperation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WebAccountProviderManageAccountOperation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_WebAccountProviderManageAccountOperation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WebAccountProviderManageAccountOperation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WebAccountProviderManageAccountOperation) },
        { },
    };

    static PyType_Spec type_spec_WebAccountProviderManageAccountOperation =
    {
        "_winsdk_Windows_Security_Authentication_Web_Provider.WebAccountProviderManageAccountOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderManageAccountOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAccountProviderManageAccountOperation
    };

    // ----- WebAccountProviderRequestTokenOperation class --------------------
    static constexpr const char* const type_name_WebAccountProviderRequestTokenOperation = "WebAccountProviderRequestTokenOperation";

    static PyObject* _new_WebAccountProviderRequestTokenOperation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_WebAccountProviderRequestTokenOperation);
        return nullptr;
    }

    static void _dealloc_WebAccountProviderRequestTokenOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* WebAccountProviderRequestTokenOperation_ReportCompleted(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderRequestTokenOperation", L"ReportCompleted", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.ReportCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderRequestTokenOperation_ReportError(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderRequestTokenOperation", L"ReportError", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>(args, 0);

                self->obj.ReportError(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderRequestTokenOperation_ReportUserCanceled(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderRequestTokenOperation", L"ReportUserCanceled", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.ReportUserCanceled();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderRequestTokenOperation_get_Kind(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderRequestTokenOperation", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderRequestTokenOperation_get_CacheExpirationTime(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderRequestTokenOperation", L"CacheExpirationTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CacheExpirationTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WebAccountProviderRequestTokenOperation_put_CacheExpirationTime(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderRequestTokenOperation", L"CacheExpirationTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::DateTime>(arg);

            self->obj.CacheExpirationTime(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WebAccountProviderRequestTokenOperation_get_ProviderRequest(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderRequestTokenOperation", L"ProviderRequest"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProviderRequest());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderRequestTokenOperation_get_ProviderResponses(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderRequestTokenOperation", L"ProviderResponses"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProviderResponses());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_WebAccountProviderRequestTokenOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_WebAccountProviderRequestTokenOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAccountProviderRequestTokenOperation[] = {
        { "report_completed", reinterpret_cast<PyCFunction>(WebAccountProviderRequestTokenOperation_ReportCompleted), METH_VARARGS, nullptr },
        { "report_error", reinterpret_cast<PyCFunction>(WebAccountProviderRequestTokenOperation_ReportError), METH_VARARGS, nullptr },
        { "report_user_canceled", reinterpret_cast<PyCFunction>(WebAccountProviderRequestTokenOperation_ReportUserCanceled), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_WebAccountProviderRequestTokenOperation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WebAccountProviderRequestTokenOperation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebAccountProviderRequestTokenOperation[] = {
        { "kind", reinterpret_cast<getter>(WebAccountProviderRequestTokenOperation_get_Kind), nullptr, nullptr, nullptr },
        { "cache_expiration_time", reinterpret_cast<getter>(WebAccountProviderRequestTokenOperation_get_CacheExpirationTime), reinterpret_cast<setter>(WebAccountProviderRequestTokenOperation_put_CacheExpirationTime), nullptr, nullptr },
        { "provider_request", reinterpret_cast<getter>(WebAccountProviderRequestTokenOperation_get_ProviderRequest), nullptr, nullptr, nullptr },
        { "provider_responses", reinterpret_cast<getter>(WebAccountProviderRequestTokenOperation_get_ProviderResponses), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebAccountProviderRequestTokenOperation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WebAccountProviderRequestTokenOperation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_WebAccountProviderRequestTokenOperation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WebAccountProviderRequestTokenOperation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WebAccountProviderRequestTokenOperation) },
        { },
    };

    static PyType_Spec type_spec_WebAccountProviderRequestTokenOperation =
    {
        "_winsdk_Windows_Security_Authentication_Web_Provider.WebAccountProviderRequestTokenOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAccountProviderRequestTokenOperation
    };

    // ----- WebAccountProviderRetrieveCookiesOperation class --------------------
    static constexpr const char* const type_name_WebAccountProviderRetrieveCookiesOperation = "WebAccountProviderRetrieveCookiesOperation";

    static PyObject* _new_WebAccountProviderRetrieveCookiesOperation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_WebAccountProviderRetrieveCookiesOperation);
        return nullptr;
    }

    static void _dealloc_WebAccountProviderRetrieveCookiesOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* WebAccountProviderRetrieveCookiesOperation_ReportCompleted(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderRetrieveCookiesOperation", L"ReportCompleted", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.ReportCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderRetrieveCookiesOperation_ReportError(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderRetrieveCookiesOperation", L"ReportError", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>(args, 0);

                self->obj.ReportError(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderRetrieveCookiesOperation_get_Kind(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderRetrieveCookiesOperation", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderRetrieveCookiesOperation_get_Uri(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderRetrieveCookiesOperation", L"Uri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WebAccountProviderRetrieveCookiesOperation_put_Uri(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderRetrieveCookiesOperation", L"Uri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.Uri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WebAccountProviderRetrieveCookiesOperation_get_ApplicationCallbackUri(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderRetrieveCookiesOperation", L"ApplicationCallbackUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ApplicationCallbackUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderRetrieveCookiesOperation_get_Context(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderRetrieveCookiesOperation", L"Context"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Context());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderRetrieveCookiesOperation_get_Cookies(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderRetrieveCookiesOperation", L"Cookies"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Cookies());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_WebAccountProviderRetrieveCookiesOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_WebAccountProviderRetrieveCookiesOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAccountProviderRetrieveCookiesOperation[] = {
        { "report_completed", reinterpret_cast<PyCFunction>(WebAccountProviderRetrieveCookiesOperation_ReportCompleted), METH_VARARGS, nullptr },
        { "report_error", reinterpret_cast<PyCFunction>(WebAccountProviderRetrieveCookiesOperation_ReportError), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_WebAccountProviderRetrieveCookiesOperation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WebAccountProviderRetrieveCookiesOperation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebAccountProviderRetrieveCookiesOperation[] = {
        { "kind", reinterpret_cast<getter>(WebAccountProviderRetrieveCookiesOperation_get_Kind), nullptr, nullptr, nullptr },
        { "uri", reinterpret_cast<getter>(WebAccountProviderRetrieveCookiesOperation_get_Uri), reinterpret_cast<setter>(WebAccountProviderRetrieveCookiesOperation_put_Uri), nullptr, nullptr },
        { "application_callback_uri", reinterpret_cast<getter>(WebAccountProviderRetrieveCookiesOperation_get_ApplicationCallbackUri), nullptr, nullptr, nullptr },
        { "context", reinterpret_cast<getter>(WebAccountProviderRetrieveCookiesOperation_get_Context), nullptr, nullptr, nullptr },
        { "cookies", reinterpret_cast<getter>(WebAccountProviderRetrieveCookiesOperation_get_Cookies), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebAccountProviderRetrieveCookiesOperation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WebAccountProviderRetrieveCookiesOperation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_WebAccountProviderRetrieveCookiesOperation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WebAccountProviderRetrieveCookiesOperation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WebAccountProviderRetrieveCookiesOperation) },
        { },
    };

    static PyType_Spec type_spec_WebAccountProviderRetrieveCookiesOperation =
    {
        "_winsdk_Windows_Security_Authentication_Web_Provider.WebAccountProviderRetrieveCookiesOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAccountProviderRetrieveCookiesOperation
    };

    // ----- WebAccountProviderSignOutAccountOperation class --------------------
    static constexpr const char* const type_name_WebAccountProviderSignOutAccountOperation = "WebAccountProviderSignOutAccountOperation";

    static PyObject* _new_WebAccountProviderSignOutAccountOperation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_WebAccountProviderSignOutAccountOperation);
        return nullptr;
    }

    static void _dealloc_WebAccountProviderSignOutAccountOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* WebAccountProviderSignOutAccountOperation_ReportCompleted(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderSignOutAccountOperation", L"ReportCompleted", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.ReportCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderSignOutAccountOperation_ReportError(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderSignOutAccountOperation", L"ReportError", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>(args, 0);

                self->obj.ReportError(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderSignOutAccountOperation_get_Kind(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderSignOutAccountOperation", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderSignOutAccountOperation_get_ApplicationCallbackUri(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderSignOutAccountOperation", L"ApplicationCallbackUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ApplicationCallbackUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderSignOutAccountOperation_get_ClientId(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderSignOutAccountOperation", L"ClientId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ClientId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderSignOutAccountOperation_get_WebAccount(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderSignOutAccountOperation", L"WebAccount"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.WebAccount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_WebAccountProviderSignOutAccountOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_WebAccountProviderSignOutAccountOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAccountProviderSignOutAccountOperation[] = {
        { "report_completed", reinterpret_cast<PyCFunction>(WebAccountProviderSignOutAccountOperation_ReportCompleted), METH_VARARGS, nullptr },
        { "report_error", reinterpret_cast<PyCFunction>(WebAccountProviderSignOutAccountOperation_ReportError), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_WebAccountProviderSignOutAccountOperation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WebAccountProviderSignOutAccountOperation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebAccountProviderSignOutAccountOperation[] = {
        { "kind", reinterpret_cast<getter>(WebAccountProviderSignOutAccountOperation_get_Kind), nullptr, nullptr, nullptr },
        { "application_callback_uri", reinterpret_cast<getter>(WebAccountProviderSignOutAccountOperation_get_ApplicationCallbackUri), nullptr, nullptr, nullptr },
        { "client_id", reinterpret_cast<getter>(WebAccountProviderSignOutAccountOperation_get_ClientId), nullptr, nullptr, nullptr },
        { "web_account", reinterpret_cast<getter>(WebAccountProviderSignOutAccountOperation_get_WebAccount), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebAccountProviderSignOutAccountOperation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WebAccountProviderSignOutAccountOperation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_WebAccountProviderSignOutAccountOperation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WebAccountProviderSignOutAccountOperation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WebAccountProviderSignOutAccountOperation) },
        { },
    };

    static PyType_Spec type_spec_WebAccountProviderSignOutAccountOperation =
    {
        "_winsdk_Windows_Security_Authentication_Web_Provider.WebAccountProviderSignOutAccountOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAccountProviderSignOutAccountOperation
    };

    // ----- WebAccountProviderTriggerDetails class --------------------
    static constexpr const char* const type_name_WebAccountProviderTriggerDetails = "WebAccountProviderTriggerDetails";

    static PyObject* _new_WebAccountProviderTriggerDetails(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_WebAccountProviderTriggerDetails);
        return nullptr;
    }

    static void _dealloc_WebAccountProviderTriggerDetails(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderTriggerDetails* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* WebAccountProviderTriggerDetails_get_Operation(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderTriggerDetails* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderTriggerDetails", L"Operation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Operation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderTriggerDetails_get_User(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderTriggerDetails* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebAccountProviderTriggerDetails", L"User"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_WebAccountProviderTriggerDetails(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderTriggerDetails>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_WebAccountProviderTriggerDetails(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderTriggerDetails>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAccountProviderTriggerDetails[] = {
        { "_assign_array_", _assign_array_WebAccountProviderTriggerDetails, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WebAccountProviderTriggerDetails), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebAccountProviderTriggerDetails[] = {
        { "operation", reinterpret_cast<getter>(WebAccountProviderTriggerDetails_get_Operation), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebAccountProviderTriggerDetails_get_User), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebAccountProviderTriggerDetails[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WebAccountProviderTriggerDetails) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_WebAccountProviderTriggerDetails) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WebAccountProviderTriggerDetails) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WebAccountProviderTriggerDetails) },
        { },
    };

    static PyType_Spec type_spec_WebAccountProviderTriggerDetails =
    {
        "_winsdk_Windows_Security_Authentication_Web_Provider.WebAccountProviderTriggerDetails",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderTriggerDetails),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAccountProviderTriggerDetails
    };

    // ----- WebProviderTokenRequest class --------------------
    static constexpr const char* const type_name_WebProviderTokenRequest = "WebProviderTokenRequest";

    static PyObject* _new_WebProviderTokenRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_WebProviderTokenRequest);
        return nullptr;
    }

    static void _dealloc_WebProviderTokenRequest(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* WebProviderTokenRequest_CheckApplicationForCapabilityAsync(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebProviderTokenRequest", L"CheckApplicationForCapabilityAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.CheckApplicationForCapabilityAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebProviderTokenRequest_GetApplicationTokenBindingKeyAsync(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebProviderTokenRequest", L"GetApplicationTokenBindingKeyAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::TokenBindingKeyType>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 1);

                return py::convert(self->obj.GetApplicationTokenBindingKeyAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebProviderTokenRequest_GetApplicationTokenBindingKeyIdAsync(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.WebProviderTokenRequest", L"GetApplicationTokenBindingKeyIdAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::TokenBindingKeyType>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 1);

                return py::convert(self->obj.GetApplicationTokenBindingKeyIdAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebProviderTokenRequest_get_ApplicationCallbackUri(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebProviderTokenRequest", L"ApplicationCallbackUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ApplicationCallbackUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebProviderTokenRequest_get_ClientRequest(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebProviderTokenRequest", L"ClientRequest"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ClientRequest());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebProviderTokenRequest_get_WebAccountSelectionOptions(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebProviderTokenRequest", L"WebAccountSelectionOptions"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.WebAccountSelectionOptions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebProviderTokenRequest_get_WebAccounts(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebProviderTokenRequest", L"WebAccounts"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.WebAccounts());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebProviderTokenRequest_get_ApplicationPackageFamilyName(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebProviderTokenRequest", L"ApplicationPackageFamilyName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ApplicationPackageFamilyName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebProviderTokenRequest_get_ApplicationProcessName(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebProviderTokenRequest", L"ApplicationProcessName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ApplicationProcessName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_WebProviderTokenRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_WebProviderTokenRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebProviderTokenRequest[] = {
        { "check_application_for_capability_async", reinterpret_cast<PyCFunction>(WebProviderTokenRequest_CheckApplicationForCapabilityAsync), METH_VARARGS, nullptr },
        { "get_application_token_binding_key_async", reinterpret_cast<PyCFunction>(WebProviderTokenRequest_GetApplicationTokenBindingKeyAsync), METH_VARARGS, nullptr },
        { "get_application_token_binding_key_id_async", reinterpret_cast<PyCFunction>(WebProviderTokenRequest_GetApplicationTokenBindingKeyIdAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_WebProviderTokenRequest, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WebProviderTokenRequest), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebProviderTokenRequest[] = {
        { "application_callback_uri", reinterpret_cast<getter>(WebProviderTokenRequest_get_ApplicationCallbackUri), nullptr, nullptr, nullptr },
        { "client_request", reinterpret_cast<getter>(WebProviderTokenRequest_get_ClientRequest), nullptr, nullptr, nullptr },
        { "web_account_selection_options", reinterpret_cast<getter>(WebProviderTokenRequest_get_WebAccountSelectionOptions), nullptr, nullptr, nullptr },
        { "web_accounts", reinterpret_cast<getter>(WebProviderTokenRequest_get_WebAccounts), nullptr, nullptr, nullptr },
        { "application_package_family_name", reinterpret_cast<getter>(WebProviderTokenRequest_get_ApplicationPackageFamilyName), nullptr, nullptr, nullptr },
        { "application_process_name", reinterpret_cast<getter>(WebProviderTokenRequest_get_ApplicationProcessName), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebProviderTokenRequest[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WebProviderTokenRequest) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_WebProviderTokenRequest) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WebProviderTokenRequest) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WebProviderTokenRequest) },
        { },
    };

    static PyType_Spec type_spec_WebProviderTokenRequest =
    {
        "_winsdk_Windows_Security_Authentication_Web_Provider.WebProviderTokenRequest",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebProviderTokenRequest
    };

    // ----- WebProviderTokenResponse class --------------------
    static constexpr const char* const type_name_WebProviderTokenResponse = "WebProviderTokenResponse";

    static PyObject* _new_WebProviderTokenResponse(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebTokenResponse>(args, 0);

                winrt::Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_WebProviderTokenResponse(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* WebProviderTokenResponse_get_ClientResponse(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.WebProviderTokenResponse", L"ClientResponse"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ClientResponse());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_WebProviderTokenResponse(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_WebProviderTokenResponse(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebProviderTokenResponse[] = {
        { "_assign_array_", _assign_array_WebProviderTokenResponse, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WebProviderTokenResponse), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebProviderTokenResponse[] = {
        { "client_response", reinterpret_cast<getter>(WebProviderTokenResponse_get_ClientResponse), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebProviderTokenResponse[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WebProviderTokenResponse) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_WebProviderTokenResponse) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WebProviderTokenResponse) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WebProviderTokenResponse) },
        { },
    };

    static PyType_Spec type_spec_WebProviderTokenResponse =
    {
        "_winsdk_Windows_Security_Authentication_Web_Provider.WebProviderTokenResponse",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebProviderTokenResponse
    };

    // ----- IWebAccountProviderBaseReportOperation interface --------------------
    static constexpr const char* const type_name_IWebAccountProviderBaseReportOperation = "IWebAccountProviderBaseReportOperation";

    static PyObject* _new_IWebAccountProviderBaseReportOperation(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */) noexcept
    {
        py::set_invalid_activation_error(type_name_IWebAccountProviderBaseReportOperation);
        return nullptr;
    }

    static void _dealloc_IWebAccountProviderBaseReportOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IWebAccountProviderBaseReportOperation_ReportCompleted(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation", L"ReportCompleted", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.ReportCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebAccountProviderBaseReportOperation_ReportError(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation", L"ReportError", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>(args, 0);

                self->obj.ReportError(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_IWebAccountProviderBaseReportOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IWebAccountProviderBaseReportOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IWebAccountProviderBaseReportOperation[] = {
        { "report_completed", reinterpret_cast<PyCFunction>(IWebAccountProviderBaseReportOperation_ReportCompleted), METH_VARARGS, nullptr },
        { "report_error", reinterpret_cast<PyCFunction>(IWebAccountProviderBaseReportOperation_ReportError), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_IWebAccountProviderBaseReportOperation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IWebAccountProviderBaseReportOperation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IWebAccountProviderBaseReportOperation[] = {
        { }
    };

    static PyType_Slot _type_slots_IWebAccountProviderBaseReportOperation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_IWebAccountProviderBaseReportOperation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IWebAccountProviderBaseReportOperation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IWebAccountProviderBaseReportOperation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IWebAccountProviderBaseReportOperation) },
        { },
    };

    static PyType_Spec type_spec_IWebAccountProviderBaseReportOperation =
    {
        "_winsdk_Windows_Security_Authentication_Web_Provider.IWebAccountProviderBaseReportOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IWebAccountProviderBaseReportOperation
    };

    // ----- IWebAccountProviderOperation interface --------------------
    static constexpr const char* const type_name_IWebAccountProviderOperation = "IWebAccountProviderOperation";

    static PyObject* _new_IWebAccountProviderOperation(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */) noexcept
    {
        py::set_invalid_activation_error(type_name_IWebAccountProviderOperation);
        return nullptr;
    }

    static void _dealloc_IWebAccountProviderOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IWebAccountProviderOperation_get_Kind(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_IWebAccountProviderOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IWebAccountProviderOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IWebAccountProviderOperation[] = {
        { "_assign_array_", _assign_array_IWebAccountProviderOperation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IWebAccountProviderOperation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IWebAccountProviderOperation[] = {
        { "kind", reinterpret_cast<getter>(IWebAccountProviderOperation_get_Kind), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_IWebAccountProviderOperation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_IWebAccountProviderOperation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IWebAccountProviderOperation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IWebAccountProviderOperation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IWebAccountProviderOperation) },
        { },
    };

    static PyType_Spec type_spec_IWebAccountProviderOperation =
    {
        "_winsdk_Windows_Security_Authentication_Web_Provider.IWebAccountProviderOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IWebAccountProviderOperation
    };

    // ----- IWebAccountProviderSilentReportOperation interface --------------------
    static constexpr const char* const type_name_IWebAccountProviderSilentReportOperation = "IWebAccountProviderSilentReportOperation";

    static PyObject* _new_IWebAccountProviderSilentReportOperation(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */) noexcept
    {
        py::set_invalid_activation_error(type_name_IWebAccountProviderSilentReportOperation);
        return nullptr;
    }

    static void _dealloc_IWebAccountProviderSilentReportOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IWebAccountProviderSilentReportOperation_ReportCompleted(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation", L"ReportCompleted", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.ReportCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebAccountProviderSilentReportOperation_ReportError(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation", L"ReportError", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>(args, 0);

                self->obj.ReportError(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebAccountProviderSilentReportOperation_ReportUserInteractionRequired(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.IWebAccountProviderSilentReportOperation", L"ReportUserInteractionRequired", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.ReportUserInteractionRequired();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.IWebAccountProviderSilentReportOperation", L"ReportUserInteractionRequired", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>(args, 0);

                self->obj.ReportUserInteractionRequired(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_IWebAccountProviderSilentReportOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IWebAccountProviderSilentReportOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IWebAccountProviderSilentReportOperation[] = {
        { "report_completed", reinterpret_cast<PyCFunction>(IWebAccountProviderSilentReportOperation_ReportCompleted), METH_VARARGS, nullptr },
        { "report_error", reinterpret_cast<PyCFunction>(IWebAccountProviderSilentReportOperation_ReportError), METH_VARARGS, nullptr },
        { "report_user_interaction_required", reinterpret_cast<PyCFunction>(IWebAccountProviderSilentReportOperation_ReportUserInteractionRequired), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_IWebAccountProviderSilentReportOperation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IWebAccountProviderSilentReportOperation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IWebAccountProviderSilentReportOperation[] = {
        { }
    };

    static PyType_Slot _type_slots_IWebAccountProviderSilentReportOperation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_IWebAccountProviderSilentReportOperation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IWebAccountProviderSilentReportOperation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IWebAccountProviderSilentReportOperation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IWebAccountProviderSilentReportOperation) },
        { },
    };

    static PyType_Spec type_spec_IWebAccountProviderSilentReportOperation =
    {
        "_winsdk_Windows_Security_Authentication_Web_Provider.IWebAccountProviderSilentReportOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IWebAccountProviderSilentReportOperation
    };

    // ----- IWebAccountProviderTokenObjects interface --------------------
    static constexpr const char* const type_name_IWebAccountProviderTokenObjects = "IWebAccountProviderTokenObjects";

    static PyObject* _new_IWebAccountProviderTokenObjects(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */) noexcept
    {
        py::set_invalid_activation_error(type_name_IWebAccountProviderTokenObjects);
        return nullptr;
    }

    static void _dealloc_IWebAccountProviderTokenObjects(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IWebAccountProviderTokenObjects_get_Operation(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenObjects", L"Operation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Operation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_IWebAccountProviderTokenObjects(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IWebAccountProviderTokenObjects(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IWebAccountProviderTokenObjects[] = {
        { "_assign_array_", _assign_array_IWebAccountProviderTokenObjects, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IWebAccountProviderTokenObjects), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IWebAccountProviderTokenObjects[] = {
        { "operation", reinterpret_cast<getter>(IWebAccountProviderTokenObjects_get_Operation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_IWebAccountProviderTokenObjects[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_IWebAccountProviderTokenObjects) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IWebAccountProviderTokenObjects) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IWebAccountProviderTokenObjects) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IWebAccountProviderTokenObjects) },
        { },
    };

    static PyType_Spec type_spec_IWebAccountProviderTokenObjects =
    {
        "_winsdk_Windows_Security_Authentication_Web_Provider.IWebAccountProviderTokenObjects",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IWebAccountProviderTokenObjects
    };

    // ----- IWebAccountProviderTokenObjects2 interface --------------------
    static constexpr const char* const type_name_IWebAccountProviderTokenObjects2 = "IWebAccountProviderTokenObjects2";

    static PyObject* _new_IWebAccountProviderTokenObjects2(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */) noexcept
    {
        py::set_invalid_activation_error(type_name_IWebAccountProviderTokenObjects2);
        return nullptr;
    }

    static void _dealloc_IWebAccountProviderTokenObjects2(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects2* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IWebAccountProviderTokenObjects2_get_User(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects2* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenObjects2", L"User"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebAccountProviderTokenObjects2_get_Operation(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects2* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenObjects", L"Operation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Operation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_IWebAccountProviderTokenObjects2(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects2>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IWebAccountProviderTokenObjects2(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects2>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IWebAccountProviderTokenObjects2[] = {
        { "_assign_array_", _assign_array_IWebAccountProviderTokenObjects2, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IWebAccountProviderTokenObjects2), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IWebAccountProviderTokenObjects2[] = {
        { "user", reinterpret_cast<getter>(IWebAccountProviderTokenObjects2_get_User), nullptr, nullptr, nullptr },
        { "operation", reinterpret_cast<getter>(IWebAccountProviderTokenObjects2_get_Operation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_IWebAccountProviderTokenObjects2[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_IWebAccountProviderTokenObjects2) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IWebAccountProviderTokenObjects2) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IWebAccountProviderTokenObjects2) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IWebAccountProviderTokenObjects2) },
        { },
    };

    static PyType_Spec type_spec_IWebAccountProviderTokenObjects2 =
    {
        "_winsdk_Windows_Security_Authentication_Web_Provider.IWebAccountProviderTokenObjects2",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects2),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IWebAccountProviderTokenObjects2
    };

    // ----- IWebAccountProviderTokenOperation interface --------------------
    static constexpr const char* const type_name_IWebAccountProviderTokenOperation = "IWebAccountProviderTokenOperation";

    static PyObject* _new_IWebAccountProviderTokenOperation(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */) noexcept
    {
        py::set_invalid_activation_error(type_name_IWebAccountProviderTokenOperation);
        return nullptr;
    }

    static void _dealloc_IWebAccountProviderTokenOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IWebAccountProviderTokenOperation_get_CacheExpirationTime(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenOperation", L"CacheExpirationTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CacheExpirationTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IWebAccountProviderTokenOperation_put_CacheExpirationTime(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenOperation", L"CacheExpirationTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::DateTime>(arg);

            self->obj.CacheExpirationTime(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IWebAccountProviderTokenOperation_get_ProviderRequest(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenOperation", L"ProviderRequest"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProviderRequest());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebAccountProviderTokenOperation_get_ProviderResponses(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenOperation", L"ProviderResponses"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProviderResponses());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebAccountProviderTokenOperation_get_Kind(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_IWebAccountProviderTokenOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IWebAccountProviderTokenOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IWebAccountProviderTokenOperation[] = {
        { "_assign_array_", _assign_array_IWebAccountProviderTokenOperation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IWebAccountProviderTokenOperation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IWebAccountProviderTokenOperation[] = {
        { "cache_expiration_time", reinterpret_cast<getter>(IWebAccountProviderTokenOperation_get_CacheExpirationTime), reinterpret_cast<setter>(IWebAccountProviderTokenOperation_put_CacheExpirationTime), nullptr, nullptr },
        { "provider_request", reinterpret_cast<getter>(IWebAccountProviderTokenOperation_get_ProviderRequest), nullptr, nullptr, nullptr },
        { "provider_responses", reinterpret_cast<getter>(IWebAccountProviderTokenOperation_get_ProviderResponses), nullptr, nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(IWebAccountProviderTokenOperation_get_Kind), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_IWebAccountProviderTokenOperation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_IWebAccountProviderTokenOperation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IWebAccountProviderTokenOperation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IWebAccountProviderTokenOperation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IWebAccountProviderTokenOperation) },
        { },
    };

    static PyType_Spec type_spec_IWebAccountProviderTokenOperation =
    {
        "_winsdk_Windows_Security_Authentication_Web_Provider.IWebAccountProviderTokenOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IWebAccountProviderTokenOperation
    };

    // ----- IWebAccountProviderUIReportOperation interface --------------------
    static constexpr const char* const type_name_IWebAccountProviderUIReportOperation = "IWebAccountProviderUIReportOperation";

    static PyObject* _new_IWebAccountProviderUIReportOperation(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */) noexcept
    {
        py::set_invalid_activation_error(type_name_IWebAccountProviderUIReportOperation);
        return nullptr;
    }

    static void _dealloc_IWebAccountProviderUIReportOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IWebAccountProviderUIReportOperation_ReportCompleted(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation", L"ReportCompleted", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.ReportCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebAccountProviderUIReportOperation_ReportError(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation", L"ReportError", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>(args, 0);

                self->obj.ReportError(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebAccountProviderUIReportOperation_ReportUserCanceled(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Authentication.Web.Provider.IWebAccountProviderUIReportOperation", L"ReportUserCanceled", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.ReportUserCanceled();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_IWebAccountProviderUIReportOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IWebAccountProviderUIReportOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IWebAccountProviderUIReportOperation[] = {
        { "report_completed", reinterpret_cast<PyCFunction>(IWebAccountProviderUIReportOperation_ReportCompleted), METH_VARARGS, nullptr },
        { "report_error", reinterpret_cast<PyCFunction>(IWebAccountProviderUIReportOperation_ReportError), METH_VARARGS, nullptr },
        { "report_user_canceled", reinterpret_cast<PyCFunction>(IWebAccountProviderUIReportOperation_ReportUserCanceled), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_IWebAccountProviderUIReportOperation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IWebAccountProviderUIReportOperation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IWebAccountProviderUIReportOperation[] = {
        { }
    };

    static PyType_Slot _type_slots_IWebAccountProviderUIReportOperation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_IWebAccountProviderUIReportOperation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IWebAccountProviderUIReportOperation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IWebAccountProviderUIReportOperation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IWebAccountProviderUIReportOperation) },
        { },
    };

    static PyType_Spec type_spec_IWebAccountProviderUIReportOperation =
    {
        "_winsdk_Windows_Security_Authentication_Web_Provider.IWebAccountProviderUIReportOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IWebAccountProviderUIReportOperation
    };

    // ----- Windows.Security.Authentication.Web.Provider Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Security::Authentication::Web::Provider");

    static PyMethodDef module_methods[] = {
        {"_register_WebAccountClientViewType", register_WebAccountClientViewType, METH_O, "registers type"},
        {"_register_WebAccountProviderOperationKind", register_WebAccountProviderOperationKind, METH_O, "registers type"},
        {"_register_WebAccountScope", register_WebAccountScope, METH_O, "registers type"},
        {"_register_WebAccountSelectionOptions", register_WebAccountSelectionOptions, METH_O, "registers type"},
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_WebAccountClientViewType);
        Py_VISIT(state->type_WebAccountProviderOperationKind);
        Py_VISIT(state->type_WebAccountScope);
        Py_VISIT(state->type_WebAccountSelectionOptions);
        Py_VISIT(state->type_WebAccountClientView);
        Py_VISIT(state->type_WebAccountManager);
        Py_VISIT(state->type_WebAccountProviderAddAccountOperation);
        Py_VISIT(state->type_WebAccountProviderDeleteAccountOperation);
        Py_VISIT(state->type_WebAccountProviderGetTokenSilentOperation);
        Py_VISIT(state->type_WebAccountProviderManageAccountOperation);
        Py_VISIT(state->type_WebAccountProviderRequestTokenOperation);
        Py_VISIT(state->type_WebAccountProviderRetrieveCookiesOperation);
        Py_VISIT(state->type_WebAccountProviderSignOutAccountOperation);
        Py_VISIT(state->type_WebAccountProviderTriggerDetails);
        Py_VISIT(state->type_WebProviderTokenRequest);
        Py_VISIT(state->type_WebProviderTokenResponse);
        Py_VISIT(state->type_IWebAccountProviderBaseReportOperation);
        Py_VISIT(state->type_IWebAccountProviderOperation);
        Py_VISIT(state->type_IWebAccountProviderSilentReportOperation);
        Py_VISIT(state->type_IWebAccountProviderTokenObjects);
        Py_VISIT(state->type_IWebAccountProviderTokenObjects2);
        Py_VISIT(state->type_IWebAccountProviderTokenOperation);
        Py_VISIT(state->type_IWebAccountProviderUIReportOperation);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_WebAccountClientViewType);
        Py_CLEAR(state->type_WebAccountProviderOperationKind);
        Py_CLEAR(state->type_WebAccountScope);
        Py_CLEAR(state->type_WebAccountSelectionOptions);
        Py_CLEAR(state->type_WebAccountClientView);
        Py_CLEAR(state->type_WebAccountManager);
        Py_CLEAR(state->type_WebAccountProviderAddAccountOperation);
        Py_CLEAR(state->type_WebAccountProviderDeleteAccountOperation);
        Py_CLEAR(state->type_WebAccountProviderGetTokenSilentOperation);
        Py_CLEAR(state->type_WebAccountProviderManageAccountOperation);
        Py_CLEAR(state->type_WebAccountProviderRequestTokenOperation);
        Py_CLEAR(state->type_WebAccountProviderRetrieveCookiesOperation);
        Py_CLEAR(state->type_WebAccountProviderSignOutAccountOperation);
        Py_CLEAR(state->type_WebAccountProviderTriggerDetails);
        Py_CLEAR(state->type_WebProviderTokenRequest);
        Py_CLEAR(state->type_WebProviderTokenResponse);
        Py_CLEAR(state->type_IWebAccountProviderBaseReportOperation);
        Py_CLEAR(state->type_IWebAccountProviderOperation);
        Py_CLEAR(state->type_IWebAccountProviderSilentReportOperation);
        Py_CLEAR(state->type_IWebAccountProviderTokenObjects);
        Py_CLEAR(state->type_IWebAccountProviderTokenObjects2);
        Py_CLEAR(state->type_IWebAccountProviderTokenOperation);
        Py_CLEAR(state->type_IWebAccountProviderUIReportOperation);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Security_Authentication_Web_Provider",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Security::Authentication::Web::Provider

PyMODINIT_FUNC PyInit__winsdk_Windows_Security_Authentication_Web_Provider(void) noexcept
{
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_WebAccountClientView = py::register_python_type(module.get(), type_name_WebAccountClientView, &type_spec_WebAccountClientView, bases.get(), nullptr);
    if (!state->type_WebAccountClientView)
    {
        return nullptr;
    }

    state->type_WebAccountManager = py::register_python_type(module.get(), type_name_WebAccountManager, &type_spec_WebAccountManager, nullptr, nullptr);
    if (!state->type_WebAccountManager)
    {
        return nullptr;
    }

    state->type_WebAccountProviderAddAccountOperation = py::register_python_type(module.get(), type_name_WebAccountProviderAddAccountOperation, &type_spec_WebAccountProviderAddAccountOperation, bases.get(), nullptr);
    if (!state->type_WebAccountProviderAddAccountOperation)
    {
        return nullptr;
    }

    state->type_WebAccountProviderDeleteAccountOperation = py::register_python_type(module.get(), type_name_WebAccountProviderDeleteAccountOperation, &type_spec_WebAccountProviderDeleteAccountOperation, bases.get(), nullptr);
    if (!state->type_WebAccountProviderDeleteAccountOperation)
    {
        return nullptr;
    }

    state->type_WebAccountProviderGetTokenSilentOperation = py::register_python_type(module.get(), type_name_WebAccountProviderGetTokenSilentOperation, &type_spec_WebAccountProviderGetTokenSilentOperation, bases.get(), nullptr);
    if (!state->type_WebAccountProviderGetTokenSilentOperation)
    {
        return nullptr;
    }

    state->type_WebAccountProviderManageAccountOperation = py::register_python_type(module.get(), type_name_WebAccountProviderManageAccountOperation, &type_spec_WebAccountProviderManageAccountOperation, bases.get(), nullptr);
    if (!state->type_WebAccountProviderManageAccountOperation)
    {
        return nullptr;
    }

    state->type_WebAccountProviderRequestTokenOperation = py::register_python_type(module.get(), type_name_WebAccountProviderRequestTokenOperation, &type_spec_WebAccountProviderRequestTokenOperation, bases.get(), nullptr);
    if (!state->type_WebAccountProviderRequestTokenOperation)
    {
        return nullptr;
    }

    state->type_WebAccountProviderRetrieveCookiesOperation = py::register_python_type(module.get(), type_name_WebAccountProviderRetrieveCookiesOperation, &type_spec_WebAccountProviderRetrieveCookiesOperation, bases.get(), nullptr);
    if (!state->type_WebAccountProviderRetrieveCookiesOperation)
    {
        return nullptr;
    }

    state->type_WebAccountProviderSignOutAccountOperation = py::register_python_type(module.get(), type_name_WebAccountProviderSignOutAccountOperation, &type_spec_WebAccountProviderSignOutAccountOperation, bases.get(), nullptr);
    if (!state->type_WebAccountProviderSignOutAccountOperation)
    {
        return nullptr;
    }

    state->type_WebAccountProviderTriggerDetails = py::register_python_type(module.get(), type_name_WebAccountProviderTriggerDetails, &type_spec_WebAccountProviderTriggerDetails, bases.get(), nullptr);
    if (!state->type_WebAccountProviderTriggerDetails)
    {
        return nullptr;
    }

    state->type_WebProviderTokenRequest = py::register_python_type(module.get(), type_name_WebProviderTokenRequest, &type_spec_WebProviderTokenRequest, bases.get(), nullptr);
    if (!state->type_WebProviderTokenRequest)
    {
        return nullptr;
    }

    state->type_WebProviderTokenResponse = py::register_python_type(module.get(), type_name_WebProviderTokenResponse, &type_spec_WebProviderTokenResponse, bases.get(), nullptr);
    if (!state->type_WebProviderTokenResponse)
    {
        return nullptr;
    }

    state->type_IWebAccountProviderBaseReportOperation = py::register_python_type(module.get(), type_name_IWebAccountProviderBaseReportOperation, &type_spec_IWebAccountProviderBaseReportOperation, bases.get(), nullptr);
    if (!state->type_IWebAccountProviderBaseReportOperation)
    {
        return nullptr;
    }

    state->type_IWebAccountProviderOperation = py::register_python_type(module.get(), type_name_IWebAccountProviderOperation, &type_spec_IWebAccountProviderOperation, bases.get(), nullptr);
    if (!state->type_IWebAccountProviderOperation)
    {
        return nullptr;
    }

    state->type_IWebAccountProviderSilentReportOperation = py::register_python_type(module.get(), type_name_IWebAccountProviderSilentReportOperation, &type_spec_IWebAccountProviderSilentReportOperation, bases.get(), nullptr);
    if (!state->type_IWebAccountProviderSilentReportOperation)
    {
        return nullptr;
    }

    state->type_IWebAccountProviderTokenObjects = py::register_python_type(module.get(), type_name_IWebAccountProviderTokenObjects, &type_spec_IWebAccountProviderTokenObjects, bases.get(), nullptr);
    if (!state->type_IWebAccountProviderTokenObjects)
    {
        return nullptr;
    }

    state->type_IWebAccountProviderTokenObjects2 = py::register_python_type(module.get(), type_name_IWebAccountProviderTokenObjects2, &type_spec_IWebAccountProviderTokenObjects2, bases.get(), nullptr);
    if (!state->type_IWebAccountProviderTokenObjects2)
    {
        return nullptr;
    }

    state->type_IWebAccountProviderTokenOperation = py::register_python_type(module.get(), type_name_IWebAccountProviderTokenOperation, &type_spec_IWebAccountProviderTokenOperation, bases.get(), nullptr);
    if (!state->type_IWebAccountProviderTokenOperation)
    {
        return nullptr;
    }

    state->type_IWebAccountProviderUIReportOperation = py::register_python_type(module.get(), type_name_IWebAccountProviderUIReportOperation, &type_spec_IWebAccountProviderUIReportOperation, bases.get(), nullptr);
    if (!state->type_IWebAccountProviderUIReportOperation)
    {
        return nullptr;
    }


    return module.detach();
}

PyObject* py::py_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountClientViewType>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_WebAccountClientViewType;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::WebAccountClientViewType is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderOperationKind>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_WebAccountProviderOperationKind;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderOperationKind is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountScope>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_WebAccountScope;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::WebAccountScope is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountSelectionOptions>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_WebAccountSelectionOptions;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::WebAccountSelectionOptions is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountClientView>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_WebAccountClientView;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::WebAccountClientView is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_WebAccountManager;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderAddAccountOperation>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_WebAccountProviderAddAccountOperation;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderAddAccountOperation is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderDeleteAccountOperation>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_WebAccountProviderDeleteAccountOperation;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderDeleteAccountOperation is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_WebAccountProviderGetTokenSilentOperation;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderManageAccountOperation>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_WebAccountProviderManageAccountOperation;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderManageAccountOperation is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_WebAccountProviderRequestTokenOperation;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_WebAccountProviderRetrieveCookiesOperation;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_WebAccountProviderSignOutAccountOperation;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderTriggerDetails>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_WebAccountProviderTriggerDetails;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderTriggerDetails is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_WebProviderTokenRequest;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_WebProviderTokenResponse;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_IWebAccountProviderBaseReportOperation;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_IWebAccountProviderOperation;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_IWebAccountProviderSilentReportOperation;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_IWebAccountProviderTokenObjects;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects2>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_IWebAccountProviderTokenObjects2;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects2 is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_IWebAccountProviderTokenOperation;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::Authentication::Web::Provider;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::Authentication::Web::Provider");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_IWebAccountProviderUIReportOperation;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation is not registered");
        return nullptr;
    }

    return python_type;
}
