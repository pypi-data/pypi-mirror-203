// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.Phone.System.UserProfile.GameServices.Core.h"


namespace py::cpp::Windows::Phone::System::UserProfile::GameServices::Core
{
    struct module_state
    {
        PyObject* type_GameServiceGameOutcome;
        PyObject* type_GameServiceScoreKind;
        PyTypeObject* type_GameService;
        PyTypeObject* type_GameServicePropertyCollection;
    };

    static PyObject* register_GameServiceGameOutcome(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_GameServiceGameOutcome)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_GameServiceGameOutcome = type;
        Py_INCREF(state->type_GameServiceGameOutcome);


        Py_RETURN_NONE;
    }

    static PyObject* register_GameServiceScoreKind(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_GameServiceScoreKind)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_GameServiceScoreKind = type;
        Py_INCREF(state->type_GameServiceScoreKind);


        Py_RETURN_NONE;
    }

    // ----- GameService class --------------------
    static constexpr const char* const type_name_GameService = "GameService";

    static PyObject* _new_GameService(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_GameService);
        return nullptr;
    }

    static PyObject* GameService_GetAuthenticationStatus(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.System.UserProfile.GameServices.Core.GameService", L"GetAuthenticationStatus", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService::GetAuthenticationStatus());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameService_GetGamerProfileAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.System.UserProfile.GameServices.Core.GameService", L"GetGamerProfileAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService::GetGamerProfileAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameService_GetInstalledGameItemsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.System.UserProfile.GameServices.Core.GameService", L"GetInstalledGameItemsAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService::GetInstalledGameItemsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameService_GetPartnerTokenAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.System.UserProfile.GameServices.Core.GameService", L"GetPartnerTokenAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                return py::convert(winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService::GetPartnerTokenAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameService_GetPrivilegesAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.System.UserProfile.GameServices.Core.GameService", L"GetPrivilegesAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService::GetPrivilegesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameService_GrantAchievement(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.System.UserProfile.GameServices.Core.GameService", L"GrantAchievement", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService::GrantAchievement(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameService_GrantAvatarAward(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.System.UserProfile.GameServices.Core.GameService", L"GrantAvatarAward", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService::GrantAvatarAward(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameService_NotifyPartnerTokenExpired(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.System.UserProfile.GameServices.Core.GameService", L"NotifyPartnerTokenExpired", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService::NotifyPartnerTokenExpired(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameService_PostResult(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 5)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.System.UserProfile.GameServices.Core.GameService", L"PostResult", 5))
            {
                py::set_arg_count_version_error(5);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameServiceScoreKind>(args, 1);
                auto param2 = py::convert_to<int64_t>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameServiceGameOutcome>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 4);

                winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService::PostResult(param0, param1, param2, param3, param4);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameService_get_ServiceUri(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Phone.System.UserProfile.GameServices.Core.GameService", L"ServiceUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService::ServiceUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameService[] = {
        { "get_authentication_status", reinterpret_cast<PyCFunction>(GameService_GetAuthenticationStatus), METH_VARARGS | METH_STATIC, nullptr },
        { "get_gamer_profile_async", reinterpret_cast<PyCFunction>(GameService_GetGamerProfileAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_installed_game_items_async", reinterpret_cast<PyCFunction>(GameService_GetInstalledGameItemsAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_partner_token_async", reinterpret_cast<PyCFunction>(GameService_GetPartnerTokenAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_privileges_async", reinterpret_cast<PyCFunction>(GameService_GetPrivilegesAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "grant_achievement", reinterpret_cast<PyCFunction>(GameService_GrantAchievement), METH_VARARGS | METH_STATIC, nullptr },
        { "grant_avatar_award", reinterpret_cast<PyCFunction>(GameService_GrantAvatarAward), METH_VARARGS | METH_STATIC, nullptr },
        { "notify_partner_token_expired", reinterpret_cast<PyCFunction>(GameService_NotifyPartnerTokenExpired), METH_VARARGS | METH_STATIC, nullptr },
        { "post_result", reinterpret_cast<PyCFunction>(GameService_PostResult), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GameService[] = {
        { }
    };

    static PyType_Slot _type_slots_GameService[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GameService) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GameService) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GameService) },
        { },
    };

    static PyType_Spec type_spec_GameService =
    {
        "_winsdk_Windows_Phone_System_UserProfile_GameServices_Core.GameService",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameService
    };

    static PyGetSetDef getset_GameService_Meta[] = {
        { "service_uri", reinterpret_cast<getter>(GameService_get_ServiceUri), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot type_slots_GameService_Meta[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_GameService_Meta) },
        { }
    };

    static PyType_Spec type_spec_GameService_Meta =
    {
        "_winsdk_Windows_Phone_System_UserProfile_GameServices_Core.GameService_Meta",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_GameService_Meta
    };

    // ----- GameServicePropertyCollection class --------------------
    static constexpr const char* const type_name_GameServicePropertyCollection = "GameServicePropertyCollection";

    static PyObject* _new_GameServicePropertyCollection(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_GameServicePropertyCollection);
        return nullptr;
    }

    static void _dealloc_GameServicePropertyCollection(py::wrapper::Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GameServicePropertyCollection_GetPropertyAsync(py::wrapper::Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.System.UserProfile.GameServices.Core.GameServicePropertyCollection", L"GetPropertyAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetPropertyAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_GameServicePropertyCollection(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GameServicePropertyCollection(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameServicePropertyCollection[] = {
        { "get_property_async", reinterpret_cast<PyCFunction>(GameServicePropertyCollection_GetPropertyAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_GameServicePropertyCollection, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GameServicePropertyCollection), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GameServicePropertyCollection[] = {
        { }
    };

    static PyType_Slot _type_slots_GameServicePropertyCollection[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GameServicePropertyCollection) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GameServicePropertyCollection) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GameServicePropertyCollection) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GameServicePropertyCollection) },
        { },
    };

    static PyType_Spec type_spec_GameServicePropertyCollection =
    {
        "_winsdk_Windows_Phone_System_UserProfile_GameServices_Core.GameServicePropertyCollection",
        sizeof(py::wrapper::Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameServicePropertyCollection
    };

    // ----- Windows.Phone.System.UserProfile.GameServices.Core Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Phone::System::UserProfile::GameServices::Core");

    static PyMethodDef module_methods[] = {
        {"_register_GameServiceGameOutcome", register_GameServiceGameOutcome, METH_O, "registers type"},
        {"_register_GameServiceScoreKind", register_GameServiceScoreKind, METH_O, "registers type"},
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_GameServiceGameOutcome);
        Py_VISIT(state->type_GameServiceScoreKind);
        Py_VISIT(state->type_GameService);
        Py_VISIT(state->type_GameServicePropertyCollection);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_GameServiceGameOutcome);
        Py_CLEAR(state->type_GameServiceScoreKind);
        Py_CLEAR(state->type_GameService);
        Py_CLEAR(state->type_GameServicePropertyCollection);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Phone_System_UserProfile_GameServices_Core",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Phone::System::UserProfile::GameServices::Core

PyMODINIT_FUNC PyInit__winsdk_Windows_Phone_System_UserProfile_GameServices_Core(void) noexcept
{
    using namespace py::cpp::Windows::Phone::System::UserProfile::GameServices::Core;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    py::pyobj_handle type_GameService_Meta{PyType_FromSpec(&type_spec_GameService_Meta)};
    if (!type_GameService_Meta)
    {
        return nullptr;
    }

    state->type_GameService = py::register_python_type(module.get(), type_name_GameService, &type_spec_GameService, nullptr, reinterpret_cast<PyTypeObject*>(type_GameService_Meta.get()));
    if (!state->type_GameService)
    {
        return nullptr;
    }

    state->type_GameServicePropertyCollection = py::register_python_type(module.get(), type_name_GameServicePropertyCollection, &type_spec_GameServicePropertyCollection, bases.get(), nullptr);
    if (!state->type_GameServicePropertyCollection)
    {
        return nullptr;
    }


    return module.detach();
}

PyObject* py::py_type<winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameServiceGameOutcome>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Phone::System::UserProfile::GameServices::Core;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Phone::System::UserProfile::GameServices::Core");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_GameServiceGameOutcome;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameServiceGameOutcome is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameServiceScoreKind>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Phone::System::UserProfile::GameServices::Core;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Phone::System::UserProfile::GameServices::Core");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_GameServiceScoreKind;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameServiceScoreKind is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Phone::System::UserProfile::GameServices::Core;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Phone::System::UserProfile::GameServices::Core");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_GameService;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Phone::System::UserProfile::GameServices::Core;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Phone::System::UserProfile::GameServices::Core");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_GameServicePropertyCollection;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection is not registered");
        return nullptr;
    }

    return python_type;
}
