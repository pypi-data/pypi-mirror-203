// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.Data.Text.h"


PyObject* py::converter<winrt::Windows::Data::Text::TextSegment>::convert(winrt::Windows::Data::Text::TextSegment instance) noexcept
{
    auto type = py::get_python_type<winrt::Windows::Data::Text::TextSegment>();
    if (!type)
    {
        return nullptr;
    }

    return py::wrap_struct(instance, type);
}
winrt::Windows::Data::Text::TextSegment py::converter<winrt::Windows::Data::Text::TextSegment>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    auto type =  py::get_python_type<winrt::Windows::Data::Text::TextSegment>();

    if (!type) {
        throw python_exception();
    }

    if (Py_TYPE(obj) == type)
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Data::Text::TextSegment>*>(obj)->obj;
    }

    PyErr_SetString(PyExc_TypeError, "expecting winrt::Windows::Data::Text::TextSegment");
    throw python_exception();
}

namespace py::cpp::Windows::Data::Text
{
    struct module_state
    {
        PyObject* type_AlternateNormalizationFormat;
        PyObject* type_TextPredictionOptions;
        PyObject* type_UnicodeGeneralCategory;
        PyObject* type_UnicodeNumericType;
        PyTypeObject* type_AlternateWordForm;
        PyTypeObject* type_SelectableWordSegment;
        PyTypeObject* type_SelectableWordsSegmenter;
        PyTypeObject* type_SemanticTextQuery;
        PyTypeObject* type_TextConversionGenerator;
        PyTypeObject* type_TextPhoneme;
        PyTypeObject* type_TextPredictionGenerator;
        PyTypeObject* type_TextReverseConversionGenerator;
        PyTypeObject* type_UnicodeCharacters;
        PyTypeObject* type_WordSegment;
        PyTypeObject* type_WordsSegmenter;
        PyTypeObject* type_TextSegment;
    };

    static PyObject* register_AlternateNormalizationFormat(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_AlternateNormalizationFormat)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_AlternateNormalizationFormat = type;
        Py_INCREF(state->type_AlternateNormalizationFormat);


        Py_RETURN_NONE;
    }

    static PyObject* register_TextPredictionOptions(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_TextPredictionOptions)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_TextPredictionOptions = type;
        Py_INCREF(state->type_TextPredictionOptions);


        Py_RETURN_NONE;
    }

    static PyObject* register_UnicodeGeneralCategory(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_UnicodeGeneralCategory)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_UnicodeGeneralCategory = type;
        Py_INCREF(state->type_UnicodeGeneralCategory);


        Py_RETURN_NONE;
    }

    static PyObject* register_UnicodeNumericType(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_UnicodeNumericType)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_UnicodeNumericType = type;
        Py_INCREF(state->type_UnicodeNumericType);


        Py_RETURN_NONE;
    }

    // ----- AlternateWordForm class --------------------
    static constexpr const char* const type_name_AlternateWordForm = "AlternateWordForm";

    static PyObject* _new_AlternateWordForm(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_AlternateWordForm);
        return nullptr;
    }

    static void _dealloc_AlternateWordForm(py::wrapper::Windows::Data::Text::AlternateWordForm* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AlternateWordForm_get_AlternateText(py::wrapper::Windows::Data::Text::AlternateWordForm* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Text.AlternateWordForm", L"AlternateText"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AlternateText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AlternateWordForm_get_NormalizationFormat(py::wrapper::Windows::Data::Text::AlternateWordForm* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Text.AlternateWordForm", L"NormalizationFormat"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.NormalizationFormat());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AlternateWordForm_get_SourceTextSegment(py::wrapper::Windows::Data::Text::AlternateWordForm* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Text.AlternateWordForm", L"SourceTextSegment"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SourceTextSegment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AlternateWordForm(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Data::Text::AlternateWordForm>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AlternateWordForm(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Text::AlternateWordForm>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AlternateWordForm[] = {
        { "_assign_array_", _assign_array_AlternateWordForm, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AlternateWordForm), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AlternateWordForm[] = {
        { "alternate_text", reinterpret_cast<getter>(AlternateWordForm_get_AlternateText), nullptr, nullptr, nullptr },
        { "normalization_format", reinterpret_cast<getter>(AlternateWordForm_get_NormalizationFormat), nullptr, nullptr, nullptr },
        { "source_text_segment", reinterpret_cast<getter>(AlternateWordForm_get_SourceTextSegment), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AlternateWordForm[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AlternateWordForm) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AlternateWordForm) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AlternateWordForm) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AlternateWordForm) },
        { },
    };

    static PyType_Spec type_spec_AlternateWordForm =
    {
        "_winsdk_Windows_Data_Text.AlternateWordForm",
        sizeof(py::wrapper::Windows::Data::Text::AlternateWordForm),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AlternateWordForm
    };

    // ----- SelectableWordSegment class --------------------
    static constexpr const char* const type_name_SelectableWordSegment = "SelectableWordSegment";

    static PyObject* _new_SelectableWordSegment(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_SelectableWordSegment);
        return nullptr;
    }

    static void _dealloc_SelectableWordSegment(py::wrapper::Windows::Data::Text::SelectableWordSegment* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SelectableWordSegment_get_SourceTextSegment(py::wrapper::Windows::Data::Text::SelectableWordSegment* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Text.SelectableWordSegment", L"SourceTextSegment"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SourceTextSegment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SelectableWordSegment_get_Text(py::wrapper::Windows::Data::Text::SelectableWordSegment* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Text.SelectableWordSegment", L"Text"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Text());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_SelectableWordSegment(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Data::Text::SelectableWordSegment>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SelectableWordSegment(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Text::SelectableWordSegment>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SelectableWordSegment[] = {
        { "_assign_array_", _assign_array_SelectableWordSegment, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SelectableWordSegment), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SelectableWordSegment[] = {
        { "source_text_segment", reinterpret_cast<getter>(SelectableWordSegment_get_SourceTextSegment), nullptr, nullptr, nullptr },
        { "text", reinterpret_cast<getter>(SelectableWordSegment_get_Text), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SelectableWordSegment[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_SelectableWordSegment) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SelectableWordSegment) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SelectableWordSegment) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SelectableWordSegment) },
        { },
    };

    static PyType_Spec type_spec_SelectableWordSegment =
    {
        "_winsdk_Windows_Data_Text.SelectableWordSegment",
        sizeof(py::wrapper::Windows::Data::Text::SelectableWordSegment),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SelectableWordSegment
    };

    // ----- SelectableWordsSegmenter class --------------------
    static constexpr const char* const type_name_SelectableWordsSegmenter = "SelectableWordsSegmenter";

    static PyObject* _new_SelectableWordsSegmenter(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Data::Text::SelectableWordsSegmenter instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SelectableWordsSegmenter(py::wrapper::Windows::Data::Text::SelectableWordsSegmenter* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SelectableWordsSegmenter_GetTokenAt(py::wrapper::Windows::Data::Text::SelectableWordsSegmenter* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.SelectableWordsSegmenter", L"GetTokenAt", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);

                return py::convert(self->obj.GetTokenAt(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SelectableWordsSegmenter_GetTokens(py::wrapper::Windows::Data::Text::SelectableWordsSegmenter* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.SelectableWordsSegmenter", L"GetTokens", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetTokens(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SelectableWordsSegmenter_Tokenize(py::wrapper::Windows::Data::Text::SelectableWordsSegmenter* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.SelectableWordsSegmenter", L"Tokenize", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Data::Text::SelectableWordSegmentsTokenizingHandler>(args, 2);

                self->obj.Tokenize(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SelectableWordsSegmenter_get_ResolvedLanguage(py::wrapper::Windows::Data::Text::SelectableWordsSegmenter* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Text.SelectableWordsSegmenter", L"ResolvedLanguage"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_SelectableWordsSegmenter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Data::Text::SelectableWordsSegmenter>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SelectableWordsSegmenter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Text::SelectableWordsSegmenter>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SelectableWordsSegmenter[] = {
        { "get_token_at", reinterpret_cast<PyCFunction>(SelectableWordsSegmenter_GetTokenAt), METH_VARARGS, nullptr },
        { "get_tokens", reinterpret_cast<PyCFunction>(SelectableWordsSegmenter_GetTokens), METH_VARARGS, nullptr },
        { "tokenize", reinterpret_cast<PyCFunction>(SelectableWordsSegmenter_Tokenize), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_SelectableWordsSegmenter, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SelectableWordsSegmenter), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SelectableWordsSegmenter[] = {
        { "resolved_language", reinterpret_cast<getter>(SelectableWordsSegmenter_get_ResolvedLanguage), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SelectableWordsSegmenter[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_SelectableWordsSegmenter) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SelectableWordsSegmenter) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SelectableWordsSegmenter) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SelectableWordsSegmenter) },
        { },
    };

    static PyType_Spec type_spec_SelectableWordsSegmenter =
    {
        "_winsdk_Windows_Data_Text.SelectableWordsSegmenter",
        sizeof(py::wrapper::Windows::Data::Text::SelectableWordsSegmenter),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SelectableWordsSegmenter
    };

    // ----- SemanticTextQuery class --------------------
    static constexpr const char* const type_name_SemanticTextQuery = "SemanticTextQuery";

    static PyObject* _new_SemanticTextQuery(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Data::Text::SemanticTextQuery instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::Data::Text::SemanticTextQuery instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SemanticTextQuery(py::wrapper::Windows::Data::Text::SemanticTextQuery* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SemanticTextQuery_Find(py::wrapper::Windows::Data::Text::SemanticTextQuery* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.SemanticTextQuery", L"Find", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.Find(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SemanticTextQuery_FindInProperty(py::wrapper::Windows::Data::Text::SemanticTextQuery* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.SemanticTextQuery", L"FindInProperty", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.FindInProperty(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_SemanticTextQuery(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Data::Text::SemanticTextQuery>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SemanticTextQuery(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Text::SemanticTextQuery>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SemanticTextQuery[] = {
        { "find", reinterpret_cast<PyCFunction>(SemanticTextQuery_Find), METH_VARARGS, nullptr },
        { "find_in_property", reinterpret_cast<PyCFunction>(SemanticTextQuery_FindInProperty), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_SemanticTextQuery, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SemanticTextQuery), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SemanticTextQuery[] = {
        { }
    };

    static PyType_Slot _type_slots_SemanticTextQuery[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_SemanticTextQuery) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SemanticTextQuery) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SemanticTextQuery) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SemanticTextQuery) },
        { },
    };

    static PyType_Spec type_spec_SemanticTextQuery =
    {
        "_winsdk_Windows_Data_Text.SemanticTextQuery",
        sizeof(py::wrapper::Windows::Data::Text::SemanticTextQuery),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SemanticTextQuery
    };

    // ----- TextConversionGenerator class --------------------
    static constexpr const char* const type_name_TextConversionGenerator = "TextConversionGenerator";

    static PyObject* _new_TextConversionGenerator(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Data::Text::TextConversionGenerator instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_TextConversionGenerator(py::wrapper::Windows::Data::Text::TextConversionGenerator* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* TextConversionGenerator_GetCandidatesAsync(py::wrapper::Windows::Data::Text::TextConversionGenerator* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.TextConversionGenerator", L"GetCandidatesAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetCandidatesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.TextConversionGenerator", L"GetCandidatesAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);

                return py::convert(self->obj.GetCandidatesAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TextConversionGenerator_get_LanguageAvailableButNotInstalled(py::wrapper::Windows::Data::Text::TextConversionGenerator* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Text.TextConversionGenerator", L"LanguageAvailableButNotInstalled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.LanguageAvailableButNotInstalled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TextConversionGenerator_get_ResolvedLanguage(py::wrapper::Windows::Data::Text::TextConversionGenerator* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Text.TextConversionGenerator", L"ResolvedLanguage"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_TextConversionGenerator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Data::Text::TextConversionGenerator>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_TextConversionGenerator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Text::TextConversionGenerator>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TextConversionGenerator[] = {
        { "get_candidates_async", reinterpret_cast<PyCFunction>(TextConversionGenerator_GetCandidatesAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_TextConversionGenerator, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_TextConversionGenerator), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_TextConversionGenerator[] = {
        { "language_available_but_not_installed", reinterpret_cast<getter>(TextConversionGenerator_get_LanguageAvailableButNotInstalled), nullptr, nullptr, nullptr },
        { "resolved_language", reinterpret_cast<getter>(TextConversionGenerator_get_ResolvedLanguage), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_TextConversionGenerator[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_TextConversionGenerator) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_TextConversionGenerator) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_TextConversionGenerator) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_TextConversionGenerator) },
        { },
    };

    static PyType_Spec type_spec_TextConversionGenerator =
    {
        "_winsdk_Windows_Data_Text.TextConversionGenerator",
        sizeof(py::wrapper::Windows::Data::Text::TextConversionGenerator),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TextConversionGenerator
    };

    // ----- TextPhoneme class --------------------
    static constexpr const char* const type_name_TextPhoneme = "TextPhoneme";

    static PyObject* _new_TextPhoneme(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_TextPhoneme);
        return nullptr;
    }

    static void _dealloc_TextPhoneme(py::wrapper::Windows::Data::Text::TextPhoneme* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* TextPhoneme_get_DisplayText(py::wrapper::Windows::Data::Text::TextPhoneme* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Text.TextPhoneme", L"DisplayText"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DisplayText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TextPhoneme_get_ReadingText(py::wrapper::Windows::Data::Text::TextPhoneme* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Text.TextPhoneme", L"ReadingText"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ReadingText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_TextPhoneme(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Data::Text::TextPhoneme>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_TextPhoneme(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Text::TextPhoneme>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TextPhoneme[] = {
        { "_assign_array_", _assign_array_TextPhoneme, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_TextPhoneme), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_TextPhoneme[] = {
        { "display_text", reinterpret_cast<getter>(TextPhoneme_get_DisplayText), nullptr, nullptr, nullptr },
        { "reading_text", reinterpret_cast<getter>(TextPhoneme_get_ReadingText), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_TextPhoneme[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_TextPhoneme) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_TextPhoneme) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_TextPhoneme) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_TextPhoneme) },
        { },
    };

    static PyType_Spec type_spec_TextPhoneme =
    {
        "_winsdk_Windows_Data_Text.TextPhoneme",
        sizeof(py::wrapper::Windows::Data::Text::TextPhoneme),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TextPhoneme
    };

    // ----- TextPredictionGenerator class --------------------
    static constexpr const char* const type_name_TextPredictionGenerator = "TextPredictionGenerator";

    static PyObject* _new_TextPredictionGenerator(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Data::Text::TextPredictionGenerator instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_TextPredictionGenerator(py::wrapper::Windows::Data::Text::TextPredictionGenerator* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* TextPredictionGenerator_GetCandidatesAsync(py::wrapper::Windows::Data::Text::TextPredictionGenerator* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.TextPredictionGenerator", L"GetCandidatesAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetCandidatesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.TextPredictionGenerator", L"GetCandidatesAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);

                return py::convert(self->obj.GetCandidatesAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.TextPredictionGenerator", L"GetCandidatesAsync", 4))
            {
                py::set_arg_count_version_error(4);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Data::Text::TextPredictionOptions>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 3);

                return py::convert(self->obj.GetCandidatesAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TextPredictionGenerator_GetNextWordCandidatesAsync(py::wrapper::Windows::Data::Text::TextPredictionGenerator* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.TextPredictionGenerator", L"GetNextWordCandidatesAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 1);

                return py::convert(self->obj.GetNextWordCandidatesAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TextPredictionGenerator_get_LanguageAvailableButNotInstalled(py::wrapper::Windows::Data::Text::TextPredictionGenerator* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Text.TextPredictionGenerator", L"LanguageAvailableButNotInstalled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.LanguageAvailableButNotInstalled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TextPredictionGenerator_get_ResolvedLanguage(py::wrapper::Windows::Data::Text::TextPredictionGenerator* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Text.TextPredictionGenerator", L"ResolvedLanguage"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TextPredictionGenerator_get_InputScope(py::wrapper::Windows::Data::Text::TextPredictionGenerator* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Text.TextPredictionGenerator", L"InputScope"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.InputScope());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int TextPredictionGenerator_put_InputScope(py::wrapper::Windows::Data::Text::TextPredictionGenerator* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Text.TextPredictionGenerator", L"InputScope"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Text::Core::CoreTextInputScope>(arg);

            self->obj.InputScope(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_TextPredictionGenerator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Data::Text::TextPredictionGenerator>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_TextPredictionGenerator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Text::TextPredictionGenerator>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TextPredictionGenerator[] = {
        { "get_candidates_async", reinterpret_cast<PyCFunction>(TextPredictionGenerator_GetCandidatesAsync), METH_VARARGS, nullptr },
        { "get_next_word_candidates_async", reinterpret_cast<PyCFunction>(TextPredictionGenerator_GetNextWordCandidatesAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_TextPredictionGenerator, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_TextPredictionGenerator), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_TextPredictionGenerator[] = {
        { "language_available_but_not_installed", reinterpret_cast<getter>(TextPredictionGenerator_get_LanguageAvailableButNotInstalled), nullptr, nullptr, nullptr },
        { "resolved_language", reinterpret_cast<getter>(TextPredictionGenerator_get_ResolvedLanguage), nullptr, nullptr, nullptr },
        { "input_scope", reinterpret_cast<getter>(TextPredictionGenerator_get_InputScope), reinterpret_cast<setter>(TextPredictionGenerator_put_InputScope), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_TextPredictionGenerator[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_TextPredictionGenerator) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_TextPredictionGenerator) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_TextPredictionGenerator) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_TextPredictionGenerator) },
        { },
    };

    static PyType_Spec type_spec_TextPredictionGenerator =
    {
        "_winsdk_Windows_Data_Text.TextPredictionGenerator",
        sizeof(py::wrapper::Windows::Data::Text::TextPredictionGenerator),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TextPredictionGenerator
    };

    // ----- TextReverseConversionGenerator class --------------------
    static constexpr const char* const type_name_TextReverseConversionGenerator = "TextReverseConversionGenerator";

    static PyObject* _new_TextReverseConversionGenerator(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Data::Text::TextReverseConversionGenerator instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_TextReverseConversionGenerator(py::wrapper::Windows::Data::Text::TextReverseConversionGenerator* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* TextReverseConversionGenerator_ConvertBackAsync(py::wrapper::Windows::Data::Text::TextReverseConversionGenerator* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.TextReverseConversionGenerator", L"ConvertBackAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ConvertBackAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TextReverseConversionGenerator_GetPhonemesAsync(py::wrapper::Windows::Data::Text::TextReverseConversionGenerator* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.TextReverseConversionGenerator", L"GetPhonemesAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetPhonemesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TextReverseConversionGenerator_get_LanguageAvailableButNotInstalled(py::wrapper::Windows::Data::Text::TextReverseConversionGenerator* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Text.TextReverseConversionGenerator", L"LanguageAvailableButNotInstalled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.LanguageAvailableButNotInstalled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TextReverseConversionGenerator_get_ResolvedLanguage(py::wrapper::Windows::Data::Text::TextReverseConversionGenerator* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Text.TextReverseConversionGenerator", L"ResolvedLanguage"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_TextReverseConversionGenerator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Data::Text::TextReverseConversionGenerator>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_TextReverseConversionGenerator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Text::TextReverseConversionGenerator>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TextReverseConversionGenerator[] = {
        { "convert_back_async", reinterpret_cast<PyCFunction>(TextReverseConversionGenerator_ConvertBackAsync), METH_VARARGS, nullptr },
        { "get_phonemes_async", reinterpret_cast<PyCFunction>(TextReverseConversionGenerator_GetPhonemesAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_TextReverseConversionGenerator, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_TextReverseConversionGenerator), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_TextReverseConversionGenerator[] = {
        { "language_available_but_not_installed", reinterpret_cast<getter>(TextReverseConversionGenerator_get_LanguageAvailableButNotInstalled), nullptr, nullptr, nullptr },
        { "resolved_language", reinterpret_cast<getter>(TextReverseConversionGenerator_get_ResolvedLanguage), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_TextReverseConversionGenerator[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_TextReverseConversionGenerator) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_TextReverseConversionGenerator) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_TextReverseConversionGenerator) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_TextReverseConversionGenerator) },
        { },
    };

    static PyType_Spec type_spec_TextReverseConversionGenerator =
    {
        "_winsdk_Windows_Data_Text.TextReverseConversionGenerator",
        sizeof(py::wrapper::Windows::Data::Text::TextReverseConversionGenerator),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TextReverseConversionGenerator
    };

    // ----- UnicodeCharacters class --------------------
    static constexpr const char* const type_name_UnicodeCharacters = "UnicodeCharacters";

    static PyObject* _new_UnicodeCharacters(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_UnicodeCharacters);
        return nullptr;
    }

    static PyObject* UnicodeCharacters_GetCodepointFromSurrogatePair(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.UnicodeCharacters", L"GetCodepointFromSurrogatePair", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::GetCodepointFromSurrogatePair(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_GetGeneralCategory(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.UnicodeCharacters", L"GetGeneralCategory", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::GetGeneralCategory(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_GetNumericType(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.UnicodeCharacters", L"GetNumericType", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::GetNumericType(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_GetSurrogatePairFromCodepoint(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.UnicodeCharacters", L"GetSurrogatePairFromCodepoint", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                char16_t param1 {  };
                char16_t param2 {  };

                winrt::Windows::Data::Text::UnicodeCharacters::GetSurrogatePairFromCodepoint(param0, param1, param2);

                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                py::pyobj_handle out2{ py::convert(param2) };
                if (!out2)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out1.get(), out2.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsAlphabetic(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.UnicodeCharacters", L"IsAlphabetic", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsAlphabetic(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsCased(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.UnicodeCharacters", L"IsCased", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsCased(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsGraphemeBase(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.UnicodeCharacters", L"IsGraphemeBase", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsGraphemeBase(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsGraphemeExtend(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.UnicodeCharacters", L"IsGraphemeExtend", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsGraphemeExtend(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsHighSurrogate(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.UnicodeCharacters", L"IsHighSurrogate", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsHighSurrogate(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsIdContinue(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.UnicodeCharacters", L"IsIdContinue", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsIdContinue(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsIdStart(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.UnicodeCharacters", L"IsIdStart", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsIdStart(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsLowSurrogate(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.UnicodeCharacters", L"IsLowSurrogate", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsLowSurrogate(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsLowercase(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.UnicodeCharacters", L"IsLowercase", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsLowercase(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsNoncharacter(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.UnicodeCharacters", L"IsNoncharacter", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsNoncharacter(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsSupplementary(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.UnicodeCharacters", L"IsSupplementary", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsSupplementary(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsUppercase(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.UnicodeCharacters", L"IsUppercase", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsUppercase(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsWhitespace(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.UnicodeCharacters", L"IsWhitespace", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsWhitespace(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_UnicodeCharacters[] = {
        { "get_codepoint_from_surrogate_pair", reinterpret_cast<PyCFunction>(UnicodeCharacters_GetCodepointFromSurrogatePair), METH_VARARGS | METH_STATIC, nullptr },
        { "get_general_category", reinterpret_cast<PyCFunction>(UnicodeCharacters_GetGeneralCategory), METH_VARARGS | METH_STATIC, nullptr },
        { "get_numeric_type", reinterpret_cast<PyCFunction>(UnicodeCharacters_GetNumericType), METH_VARARGS | METH_STATIC, nullptr },
        { "get_surrogate_pair_from_codepoint", reinterpret_cast<PyCFunction>(UnicodeCharacters_GetSurrogatePairFromCodepoint), METH_VARARGS | METH_STATIC, nullptr },
        { "is_alphabetic", reinterpret_cast<PyCFunction>(UnicodeCharacters_IsAlphabetic), METH_VARARGS | METH_STATIC, nullptr },
        { "is_cased", reinterpret_cast<PyCFunction>(UnicodeCharacters_IsCased), METH_VARARGS | METH_STATIC, nullptr },
        { "is_grapheme_base", reinterpret_cast<PyCFunction>(UnicodeCharacters_IsGraphemeBase), METH_VARARGS | METH_STATIC, nullptr },
        { "is_grapheme_extend", reinterpret_cast<PyCFunction>(UnicodeCharacters_IsGraphemeExtend), METH_VARARGS | METH_STATIC, nullptr },
        { "is_high_surrogate", reinterpret_cast<PyCFunction>(UnicodeCharacters_IsHighSurrogate), METH_VARARGS | METH_STATIC, nullptr },
        { "is_id_continue", reinterpret_cast<PyCFunction>(UnicodeCharacters_IsIdContinue), METH_VARARGS | METH_STATIC, nullptr },
        { "is_id_start", reinterpret_cast<PyCFunction>(UnicodeCharacters_IsIdStart), METH_VARARGS | METH_STATIC, nullptr },
        { "is_low_surrogate", reinterpret_cast<PyCFunction>(UnicodeCharacters_IsLowSurrogate), METH_VARARGS | METH_STATIC, nullptr },
        { "is_lowercase", reinterpret_cast<PyCFunction>(UnicodeCharacters_IsLowercase), METH_VARARGS | METH_STATIC, nullptr },
        { "is_noncharacter", reinterpret_cast<PyCFunction>(UnicodeCharacters_IsNoncharacter), METH_VARARGS | METH_STATIC, nullptr },
        { "is_supplementary", reinterpret_cast<PyCFunction>(UnicodeCharacters_IsSupplementary), METH_VARARGS | METH_STATIC, nullptr },
        { "is_uppercase", reinterpret_cast<PyCFunction>(UnicodeCharacters_IsUppercase), METH_VARARGS | METH_STATIC, nullptr },
        { "is_whitespace", reinterpret_cast<PyCFunction>(UnicodeCharacters_IsWhitespace), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UnicodeCharacters[] = {
        { }
    };

    static PyType_Slot _type_slots_UnicodeCharacters[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UnicodeCharacters) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UnicodeCharacters) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UnicodeCharacters) },
        { },
    };

    static PyType_Spec type_spec_UnicodeCharacters =
    {
        "_winsdk_Windows_Data_Text.UnicodeCharacters",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UnicodeCharacters
    };

    // ----- WordSegment class --------------------
    static constexpr const char* const type_name_WordSegment = "WordSegment";

    static PyObject* _new_WordSegment(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_WordSegment);
        return nullptr;
    }

    static void _dealloc_WordSegment(py::wrapper::Windows::Data::Text::WordSegment* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* WordSegment_get_AlternateForms(py::wrapper::Windows::Data::Text::WordSegment* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Text.WordSegment", L"AlternateForms"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AlternateForms());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WordSegment_get_SourceTextSegment(py::wrapper::Windows::Data::Text::WordSegment* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Text.WordSegment", L"SourceTextSegment"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SourceTextSegment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WordSegment_get_Text(py::wrapper::Windows::Data::Text::WordSegment* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Text.WordSegment", L"Text"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Text());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_WordSegment(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Data::Text::WordSegment>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_WordSegment(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Text::WordSegment>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WordSegment[] = {
        { "_assign_array_", _assign_array_WordSegment, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WordSegment), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WordSegment[] = {
        { "alternate_forms", reinterpret_cast<getter>(WordSegment_get_AlternateForms), nullptr, nullptr, nullptr },
        { "source_text_segment", reinterpret_cast<getter>(WordSegment_get_SourceTextSegment), nullptr, nullptr, nullptr },
        { "text", reinterpret_cast<getter>(WordSegment_get_Text), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WordSegment[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WordSegment) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_WordSegment) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WordSegment) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WordSegment) },
        { },
    };

    static PyType_Spec type_spec_WordSegment =
    {
        "_winsdk_Windows_Data_Text.WordSegment",
        sizeof(py::wrapper::Windows::Data::Text::WordSegment),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WordSegment
    };

    // ----- WordsSegmenter class --------------------
    static constexpr const char* const type_name_WordsSegmenter = "WordsSegmenter";

    static PyObject* _new_WordsSegmenter(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Data::Text::WordsSegmenter instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_WordsSegmenter(py::wrapper::Windows::Data::Text::WordsSegmenter* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* WordsSegmenter_GetTokenAt(py::wrapper::Windows::Data::Text::WordsSegmenter* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.WordsSegmenter", L"GetTokenAt", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);

                return py::convert(self->obj.GetTokenAt(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WordsSegmenter_GetTokens(py::wrapper::Windows::Data::Text::WordsSegmenter* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.WordsSegmenter", L"GetTokens", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetTokens(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WordsSegmenter_Tokenize(py::wrapper::Windows::Data::Text::WordsSegmenter* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Text.WordsSegmenter", L"Tokenize", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Data::Text::WordSegmentsTokenizingHandler>(args, 2);

                self->obj.Tokenize(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WordsSegmenter_get_ResolvedLanguage(py::wrapper::Windows::Data::Text::WordsSegmenter* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Text.WordsSegmenter", L"ResolvedLanguage"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_WordsSegmenter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Data::Text::WordsSegmenter>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_WordsSegmenter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Text::WordsSegmenter>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WordsSegmenter[] = {
        { "get_token_at", reinterpret_cast<PyCFunction>(WordsSegmenter_GetTokenAt), METH_VARARGS, nullptr },
        { "get_tokens", reinterpret_cast<PyCFunction>(WordsSegmenter_GetTokens), METH_VARARGS, nullptr },
        { "tokenize", reinterpret_cast<PyCFunction>(WordsSegmenter_Tokenize), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_WordsSegmenter, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WordsSegmenter), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WordsSegmenter[] = {
        { "resolved_language", reinterpret_cast<getter>(WordsSegmenter_get_ResolvedLanguage), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WordsSegmenter[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WordsSegmenter) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_WordsSegmenter) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WordsSegmenter) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WordsSegmenter) },
        { },
    };

    static PyType_Spec type_spec_WordsSegmenter =
    {
        "_winsdk_Windows_Data_Text.WordsSegmenter",
        sizeof(py::wrapper::Windows::Data::Text::WordsSegmenter),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WordsSegmenter
    };

    // ----- TextSegment struct --------------------
    static constexpr const char* const type_name_TextSegment = "TextSegment";

    PyObject* _new_TextSegment(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::Data::Text::TextSegment return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        uint32_t _StartPosition{};
        uint32_t _Length{};

        static const char* kwlist[] = {"start_position", "length", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "II", const_cast<char**>(kwlist), &_StartPosition, &_Length))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::Data::Text::TextSegment return_value{ _StartPosition, _Length };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_TextSegment(py::wrapper::Windows::Data::Text::TextSegment* self) noexcept
    {
    }

    static PyObject* TextSegment_get_StartPosition(py::wrapper::Windows::Data::Text::TextSegment* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.StartPosition);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int TextSegment_set_StartPosition(py::wrapper::Windows::Data::Text::TextSegment* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.StartPosition = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* TextSegment_get_Length(py::wrapper::Windows::Data::Text::TextSegment* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Length);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int TextSegment_set_Length(py::wrapper::Windows::Data::Text::TextSegment* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.Length = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_TextSegment[] = {
        { "start_position", reinterpret_cast<getter>(TextSegment_get_StartPosition), reinterpret_cast<setter>(TextSegment_set_StartPosition), nullptr, nullptr },
        { "length", reinterpret_cast<getter>(TextSegment_get_Length), reinterpret_cast<setter>(TextSegment_set_Length), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_TextSegment[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_TextSegment) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_TextSegment) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_TextSegment) },
        { },
    };

    static PyType_Spec type_spec_TextSegment =
    {
        "_winsdk_Windows_Data_Text.TextSegment",
        sizeof(py::wrapper::Windows::Data::Text::TextSegment),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TextSegment
    };

    // ----- Windows.Data.Text Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Data::Text");

    static PyMethodDef module_methods[] = {
        {"_register_AlternateNormalizationFormat", register_AlternateNormalizationFormat, METH_O, "registers type"},
        {"_register_TextPredictionOptions", register_TextPredictionOptions, METH_O, "registers type"},
        {"_register_UnicodeGeneralCategory", register_UnicodeGeneralCategory, METH_O, "registers type"},
        {"_register_UnicodeNumericType", register_UnicodeNumericType, METH_O, "registers type"},
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_AlternateNormalizationFormat);
        Py_VISIT(state->type_TextPredictionOptions);
        Py_VISIT(state->type_UnicodeGeneralCategory);
        Py_VISIT(state->type_UnicodeNumericType);
        Py_VISIT(state->type_AlternateWordForm);
        Py_VISIT(state->type_SelectableWordSegment);
        Py_VISIT(state->type_SelectableWordsSegmenter);
        Py_VISIT(state->type_SemanticTextQuery);
        Py_VISIT(state->type_TextConversionGenerator);
        Py_VISIT(state->type_TextPhoneme);
        Py_VISIT(state->type_TextPredictionGenerator);
        Py_VISIT(state->type_TextReverseConversionGenerator);
        Py_VISIT(state->type_UnicodeCharacters);
        Py_VISIT(state->type_WordSegment);
        Py_VISIT(state->type_WordsSegmenter);
        Py_VISIT(state->type_TextSegment);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_AlternateNormalizationFormat);
        Py_CLEAR(state->type_TextPredictionOptions);
        Py_CLEAR(state->type_UnicodeGeneralCategory);
        Py_CLEAR(state->type_UnicodeNumericType);
        Py_CLEAR(state->type_AlternateWordForm);
        Py_CLEAR(state->type_SelectableWordSegment);
        Py_CLEAR(state->type_SelectableWordsSegmenter);
        Py_CLEAR(state->type_SemanticTextQuery);
        Py_CLEAR(state->type_TextConversionGenerator);
        Py_CLEAR(state->type_TextPhoneme);
        Py_CLEAR(state->type_TextPredictionGenerator);
        Py_CLEAR(state->type_TextReverseConversionGenerator);
        Py_CLEAR(state->type_UnicodeCharacters);
        Py_CLEAR(state->type_WordSegment);
        Py_CLEAR(state->type_WordsSegmenter);
        Py_CLEAR(state->type_TextSegment);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Data_Text",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Data::Text

PyMODINIT_FUNC PyInit__winsdk_Windows_Data_Text(void) noexcept
{
    using namespace py::cpp::Windows::Data::Text;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_AlternateWordForm = py::register_python_type(module.get(), type_name_AlternateWordForm, &type_spec_AlternateWordForm, bases.get(), nullptr);
    if (!state->type_AlternateWordForm)
    {
        return nullptr;
    }

    state->type_SelectableWordSegment = py::register_python_type(module.get(), type_name_SelectableWordSegment, &type_spec_SelectableWordSegment, bases.get(), nullptr);
    if (!state->type_SelectableWordSegment)
    {
        return nullptr;
    }

    state->type_SelectableWordsSegmenter = py::register_python_type(module.get(), type_name_SelectableWordsSegmenter, &type_spec_SelectableWordsSegmenter, bases.get(), nullptr);
    if (!state->type_SelectableWordsSegmenter)
    {
        return nullptr;
    }

    state->type_SemanticTextQuery = py::register_python_type(module.get(), type_name_SemanticTextQuery, &type_spec_SemanticTextQuery, bases.get(), nullptr);
    if (!state->type_SemanticTextQuery)
    {
        return nullptr;
    }

    state->type_TextConversionGenerator = py::register_python_type(module.get(), type_name_TextConversionGenerator, &type_spec_TextConversionGenerator, bases.get(), nullptr);
    if (!state->type_TextConversionGenerator)
    {
        return nullptr;
    }

    state->type_TextPhoneme = py::register_python_type(module.get(), type_name_TextPhoneme, &type_spec_TextPhoneme, bases.get(), nullptr);
    if (!state->type_TextPhoneme)
    {
        return nullptr;
    }

    state->type_TextPredictionGenerator = py::register_python_type(module.get(), type_name_TextPredictionGenerator, &type_spec_TextPredictionGenerator, bases.get(), nullptr);
    if (!state->type_TextPredictionGenerator)
    {
        return nullptr;
    }

    state->type_TextReverseConversionGenerator = py::register_python_type(module.get(), type_name_TextReverseConversionGenerator, &type_spec_TextReverseConversionGenerator, bases.get(), nullptr);
    if (!state->type_TextReverseConversionGenerator)
    {
        return nullptr;
    }

    state->type_UnicodeCharacters = py::register_python_type(module.get(), type_name_UnicodeCharacters, &type_spec_UnicodeCharacters, nullptr, nullptr);
    if (!state->type_UnicodeCharacters)
    {
        return nullptr;
    }

    state->type_WordSegment = py::register_python_type(module.get(), type_name_WordSegment, &type_spec_WordSegment, bases.get(), nullptr);
    if (!state->type_WordSegment)
    {
        return nullptr;
    }

    state->type_WordsSegmenter = py::register_python_type(module.get(), type_name_WordsSegmenter, &type_spec_WordsSegmenter, bases.get(), nullptr);
    if (!state->type_WordsSegmenter)
    {
        return nullptr;
    }

    state->type_TextSegment = py::register_python_type(module.get(), type_name_TextSegment, &type_spec_TextSegment, bases.get(), nullptr);
    if (!state->type_TextSegment)
    {
        return nullptr;
    }


    return module.detach();
}

PyObject* py::py_type<winrt::Windows::Data::Text::AlternateNormalizationFormat>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Data::Text;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Data::Text");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_AlternateNormalizationFormat;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Data::Text::AlternateNormalizationFormat is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::Data::Text::TextPredictionOptions>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Data::Text;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Data::Text");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_TextPredictionOptions;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Data::Text::TextPredictionOptions is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::Data::Text::UnicodeGeneralCategory>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Data::Text;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Data::Text");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_UnicodeGeneralCategory;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Data::Text::UnicodeGeneralCategory is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::Data::Text::UnicodeNumericType>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Data::Text;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Data::Text");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_UnicodeNumericType;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Data::Text::UnicodeNumericType is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::AlternateWordForm>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Data::Text;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Data::Text");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_AlternateWordForm;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Data::Text::AlternateWordForm is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::SelectableWordSegment>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Data::Text;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Data::Text");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_SelectableWordSegment;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Data::Text::SelectableWordSegment is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::SelectableWordsSegmenter>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Data::Text;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Data::Text");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_SelectableWordsSegmenter;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Data::Text::SelectableWordsSegmenter is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::SemanticTextQuery>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Data::Text;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Data::Text");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_SemanticTextQuery;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Data::Text::SemanticTextQuery is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::TextConversionGenerator>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Data::Text;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Data::Text");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_TextConversionGenerator;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Data::Text::TextConversionGenerator is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::TextPhoneme>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Data::Text;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Data::Text");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_TextPhoneme;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Data::Text::TextPhoneme is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::TextPredictionGenerator>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Data::Text;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Data::Text");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_TextPredictionGenerator;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Data::Text::TextPredictionGenerator is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::TextReverseConversionGenerator>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Data::Text;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Data::Text");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_TextReverseConversionGenerator;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Data::Text::TextReverseConversionGenerator is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::UnicodeCharacters>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Data::Text;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Data::Text");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_UnicodeCharacters;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Data::Text::UnicodeCharacters is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::WordSegment>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Data::Text;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Data::Text");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_WordSegment;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Data::Text::WordSegment is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::WordsSegmenter>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Data::Text;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Data::Text");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_WordsSegmenter;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Data::Text::WordsSegmenter is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::TextSegment>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Data::Text;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Data::Text");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_TextSegment;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Data::Text::TextSegment is not registered");
        return nullptr;
    }

    return python_type;
}
