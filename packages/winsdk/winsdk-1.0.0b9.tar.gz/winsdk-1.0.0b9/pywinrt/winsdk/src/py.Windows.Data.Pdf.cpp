// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.Data.Pdf.h"


namespace py::cpp::Windows::Data::Pdf
{
    struct module_state
    {
        PyObject* type_PdfPageRotation;
        PyTypeObject* type_PdfDocument;
        PyTypeObject* type_PdfPage;
        PyTypeObject* type_PdfPageDimensions;
        PyTypeObject* type_PdfPageRenderOptions;
    };

    static PyObject* register_PdfPageRotation(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_PdfPageRotation)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_PdfPageRotation = type;
        Py_INCREF(state->type_PdfPageRotation);


        Py_RETURN_NONE;
    }

    // ----- PdfDocument class --------------------
    static constexpr const char* const type_name_PdfDocument = "PdfDocument";

    static PyObject* _new_PdfDocument(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_PdfDocument);
        return nullptr;
    }

    static void _dealloc_PdfDocument(py::wrapper::Windows::Data::Pdf::PdfDocument* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PdfDocument_GetPage(py::wrapper::Windows::Data::Pdf::PdfDocument* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Pdf.PdfDocument", L"GetPage", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetPage(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PdfDocument_LoadFromFileAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Pdf.PdfDocument", L"LoadFromFileAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 0);

                return py::convert(winrt::Windows::Data::Pdf::PdfDocument::LoadFromFileAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Pdf.PdfDocument", L"LoadFromFileAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Data::Pdf::PdfDocument::LoadFromFileAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PdfDocument_LoadFromStreamAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Pdf.PdfDocument", L"LoadFromStreamAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(args, 0);

                return py::convert(winrt::Windows::Data::Pdf::PdfDocument::LoadFromStreamAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Pdf.PdfDocument", L"LoadFromStreamAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Data::Pdf::PdfDocument::LoadFromStreamAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PdfDocument_get_IsPasswordProtected(py::wrapper::Windows::Data::Pdf::PdfDocument* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfDocument", L"IsPasswordProtected"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsPasswordProtected());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PdfDocument_get_PageCount(py::wrapper::Windows::Data::Pdf::PdfDocument* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfDocument", L"PageCount"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PageCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PdfDocument(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Data::Pdf::PdfDocument>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PdfDocument(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Pdf::PdfDocument>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PdfDocument[] = {
        { "get_page", reinterpret_cast<PyCFunction>(PdfDocument_GetPage), METH_VARARGS, nullptr },
        { "load_from_file_async", reinterpret_cast<PyCFunction>(PdfDocument_LoadFromFileAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "load_from_stream_async", reinterpret_cast<PyCFunction>(PdfDocument_LoadFromStreamAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "_assign_array_", _assign_array_PdfDocument, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PdfDocument), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PdfDocument[] = {
        { "is_password_protected", reinterpret_cast<getter>(PdfDocument_get_IsPasswordProtected), nullptr, nullptr, nullptr },
        { "page_count", reinterpret_cast<getter>(PdfDocument_get_PageCount), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PdfDocument[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PdfDocument) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PdfDocument) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PdfDocument) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PdfDocument) },
        { },
    };

    static PyType_Spec type_spec_PdfDocument =
    {
        "_winsdk_Windows_Data_Pdf.PdfDocument",
        sizeof(py::wrapper::Windows::Data::Pdf::PdfDocument),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PdfDocument
    };

    // ----- PdfPage class --------------------
    static constexpr const char* const type_name_PdfPage = "PdfPage";

    static PyObject* _new_PdfPage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_PdfPage);
        return nullptr;
    }

    static void _dealloc_PdfPage(py::wrapper::Windows::Data::Pdf::PdfPage* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PdfPage_Close(py::wrapper::Windows::Data::Pdf::PdfPage* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Pdf.PdfPage", L"Close", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PdfPage_PreparePageAsync(py::wrapper::Windows::Data::Pdf::PdfPage* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Pdf.PdfPage", L"PreparePageAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.PreparePageAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PdfPage_RenderToStreamAsync(py::wrapper::Windows::Data::Pdf::PdfPage* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Pdf.PdfPage", L"RenderToStreamAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(args, 0);

                return py::convert(self->obj.RenderToStreamAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Data.Pdf.PdfPage", L"RenderToStreamAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Data::Pdf::PdfPageRenderOptions>(args, 1);

                return py::convert(self->obj.RenderToStreamAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PdfPage_get_Dimensions(py::wrapper::Windows::Data::Pdf::PdfPage* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfPage", L"Dimensions"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Dimensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PdfPage_get_Index(py::wrapper::Windows::Data::Pdf::PdfPage* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfPage", L"Index"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Index());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PdfPage_get_PreferredZoom(py::wrapper::Windows::Data::Pdf::PdfPage* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfPage", L"PreferredZoom"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PreferredZoom());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PdfPage_get_Rotation(py::wrapper::Windows::Data::Pdf::PdfPage* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfPage", L"Rotation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Rotation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PdfPage_get_Size(py::wrapper::Windows::Data::Pdf::PdfPage* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfPage", L"Size"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PdfPage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Data::Pdf::PdfPage>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PdfPage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Pdf::PdfPage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_PdfPage(py::wrapper::Windows::Data::Pdf::PdfPage* self) noexcept
    {
        Py_INCREF(self);
        return reinterpret_cast<PyObject*>(self);
    }

    static PyObject* _exit_PdfPage(py::wrapper::Windows::Data::Pdf::PdfPage* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PdfPage[] = {
        { "close", reinterpret_cast<PyCFunction>(PdfPage_Close), METH_VARARGS, nullptr },
        { "prepare_page_async", reinterpret_cast<PyCFunction>(PdfPage_PreparePageAsync), METH_VARARGS, nullptr },
        { "render_to_stream_async", reinterpret_cast<PyCFunction>(PdfPage_RenderToStreamAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_PdfPage, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PdfPage), METH_O | METH_STATIC, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_PdfPage), METH_NOARGS, nullptr },
        { "__exit__",  reinterpret_cast<PyCFunction>(_exit_PdfPage), METH_VARARGS, nullptr },
        { }
    };

    static PyGetSetDef _getset_PdfPage[] = {
        { "dimensions", reinterpret_cast<getter>(PdfPage_get_Dimensions), nullptr, nullptr, nullptr },
        { "index", reinterpret_cast<getter>(PdfPage_get_Index), nullptr, nullptr, nullptr },
        { "preferred_zoom", reinterpret_cast<getter>(PdfPage_get_PreferredZoom), nullptr, nullptr, nullptr },
        { "rotation", reinterpret_cast<getter>(PdfPage_get_Rotation), nullptr, nullptr, nullptr },
        { "size", reinterpret_cast<getter>(PdfPage_get_Size), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PdfPage[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PdfPage) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PdfPage) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PdfPage) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PdfPage) },
        { },
    };

    static PyType_Spec type_spec_PdfPage =
    {
        "_winsdk_Windows_Data_Pdf.PdfPage",
        sizeof(py::wrapper::Windows::Data::Pdf::PdfPage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PdfPage
    };

    // ----- PdfPageDimensions class --------------------
    static constexpr const char* const type_name_PdfPageDimensions = "PdfPageDimensions";

    static PyObject* _new_PdfPageDimensions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_PdfPageDimensions);
        return nullptr;
    }

    static void _dealloc_PdfPageDimensions(py::wrapper::Windows::Data::Pdf::PdfPageDimensions* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PdfPageDimensions_get_ArtBox(py::wrapper::Windows::Data::Pdf::PdfPageDimensions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfPageDimensions", L"ArtBox"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ArtBox());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PdfPageDimensions_get_BleedBox(py::wrapper::Windows::Data::Pdf::PdfPageDimensions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfPageDimensions", L"BleedBox"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BleedBox());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PdfPageDimensions_get_CropBox(py::wrapper::Windows::Data::Pdf::PdfPageDimensions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfPageDimensions", L"CropBox"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CropBox());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PdfPageDimensions_get_MediaBox(py::wrapper::Windows::Data::Pdf::PdfPageDimensions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfPageDimensions", L"MediaBox"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MediaBox());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PdfPageDimensions_get_TrimBox(py::wrapper::Windows::Data::Pdf::PdfPageDimensions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfPageDimensions", L"TrimBox"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TrimBox());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PdfPageDimensions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Data::Pdf::PdfPageDimensions>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PdfPageDimensions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Pdf::PdfPageDimensions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PdfPageDimensions[] = {
        { "_assign_array_", _assign_array_PdfPageDimensions, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PdfPageDimensions), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PdfPageDimensions[] = {
        { "art_box", reinterpret_cast<getter>(PdfPageDimensions_get_ArtBox), nullptr, nullptr, nullptr },
        { "bleed_box", reinterpret_cast<getter>(PdfPageDimensions_get_BleedBox), nullptr, nullptr, nullptr },
        { "crop_box", reinterpret_cast<getter>(PdfPageDimensions_get_CropBox), nullptr, nullptr, nullptr },
        { "media_box", reinterpret_cast<getter>(PdfPageDimensions_get_MediaBox), nullptr, nullptr, nullptr },
        { "trim_box", reinterpret_cast<getter>(PdfPageDimensions_get_TrimBox), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PdfPageDimensions[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PdfPageDimensions) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PdfPageDimensions) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PdfPageDimensions) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PdfPageDimensions) },
        { },
    };

    static PyType_Spec type_spec_PdfPageDimensions =
    {
        "_winsdk_Windows_Data_Pdf.PdfPageDimensions",
        sizeof(py::wrapper::Windows::Data::Pdf::PdfPageDimensions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PdfPageDimensions
    };

    // ----- PdfPageRenderOptions class --------------------
    static constexpr const char* const type_name_PdfPageRenderOptions = "PdfPageRenderOptions";

    static PyObject* _new_PdfPageRenderOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Data::Pdf::PdfPageRenderOptions instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PdfPageRenderOptions(py::wrapper::Windows::Data::Pdf::PdfPageRenderOptions* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PdfPageRenderOptions_get_SourceRect(py::wrapper::Windows::Data::Pdf::PdfPageRenderOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfPageRenderOptions", L"SourceRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SourceRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PdfPageRenderOptions_put_SourceRect(py::wrapper::Windows::Data::Pdf::PdfPageRenderOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfPageRenderOptions", L"SourceRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(arg);

            self->obj.SourceRect(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PdfPageRenderOptions_get_IsIgnoringHighContrast(py::wrapper::Windows::Data::Pdf::PdfPageRenderOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfPageRenderOptions", L"IsIgnoringHighContrast"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsIgnoringHighContrast());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PdfPageRenderOptions_put_IsIgnoringHighContrast(py::wrapper::Windows::Data::Pdf::PdfPageRenderOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfPageRenderOptions", L"IsIgnoringHighContrast"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsIgnoringHighContrast(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PdfPageRenderOptions_get_DestinationWidth(py::wrapper::Windows::Data::Pdf::PdfPageRenderOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfPageRenderOptions", L"DestinationWidth"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DestinationWidth());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PdfPageRenderOptions_put_DestinationWidth(py::wrapper::Windows::Data::Pdf::PdfPageRenderOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfPageRenderOptions", L"DestinationWidth"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.DestinationWidth(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PdfPageRenderOptions_get_DestinationHeight(py::wrapper::Windows::Data::Pdf::PdfPageRenderOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfPageRenderOptions", L"DestinationHeight"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DestinationHeight());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PdfPageRenderOptions_put_DestinationHeight(py::wrapper::Windows::Data::Pdf::PdfPageRenderOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfPageRenderOptions", L"DestinationHeight"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.DestinationHeight(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PdfPageRenderOptions_get_BitmapEncoderId(py::wrapper::Windows::Data::Pdf::PdfPageRenderOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfPageRenderOptions", L"BitmapEncoderId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BitmapEncoderId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PdfPageRenderOptions_put_BitmapEncoderId(py::wrapper::Windows::Data::Pdf::PdfPageRenderOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfPageRenderOptions", L"BitmapEncoderId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::guid>(arg);

            self->obj.BitmapEncoderId(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PdfPageRenderOptions_get_BackgroundColor(py::wrapper::Windows::Data::Pdf::PdfPageRenderOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfPageRenderOptions", L"BackgroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PdfPageRenderOptions_put_BackgroundColor(py::wrapper::Windows::Data::Pdf::PdfPageRenderOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Data.Pdf.PdfPageRenderOptions", L"BackgroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Color>(arg);

            self->obj.BackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_PdfPageRenderOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Data::Pdf::PdfPageRenderOptions>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PdfPageRenderOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Pdf::PdfPageRenderOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PdfPageRenderOptions[] = {
        { "_assign_array_", _assign_array_PdfPageRenderOptions, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PdfPageRenderOptions), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PdfPageRenderOptions[] = {
        { "source_rect", reinterpret_cast<getter>(PdfPageRenderOptions_get_SourceRect), reinterpret_cast<setter>(PdfPageRenderOptions_put_SourceRect), nullptr, nullptr },
        { "is_ignoring_high_contrast", reinterpret_cast<getter>(PdfPageRenderOptions_get_IsIgnoringHighContrast), reinterpret_cast<setter>(PdfPageRenderOptions_put_IsIgnoringHighContrast), nullptr, nullptr },
        { "destination_width", reinterpret_cast<getter>(PdfPageRenderOptions_get_DestinationWidth), reinterpret_cast<setter>(PdfPageRenderOptions_put_DestinationWidth), nullptr, nullptr },
        { "destination_height", reinterpret_cast<getter>(PdfPageRenderOptions_get_DestinationHeight), reinterpret_cast<setter>(PdfPageRenderOptions_put_DestinationHeight), nullptr, nullptr },
        { "bitmap_encoder_id", reinterpret_cast<getter>(PdfPageRenderOptions_get_BitmapEncoderId), reinterpret_cast<setter>(PdfPageRenderOptions_put_BitmapEncoderId), nullptr, nullptr },
        { "background_color", reinterpret_cast<getter>(PdfPageRenderOptions_get_BackgroundColor), reinterpret_cast<setter>(PdfPageRenderOptions_put_BackgroundColor), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PdfPageRenderOptions[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PdfPageRenderOptions) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PdfPageRenderOptions) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PdfPageRenderOptions) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PdfPageRenderOptions) },
        { },
    };

    static PyType_Spec type_spec_PdfPageRenderOptions =
    {
        "_winsdk_Windows_Data_Pdf.PdfPageRenderOptions",
        sizeof(py::wrapper::Windows::Data::Pdf::PdfPageRenderOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PdfPageRenderOptions
    };

    // ----- Windows.Data.Pdf Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Data::Pdf");

    static PyMethodDef module_methods[] = {
        {"_register_PdfPageRotation", register_PdfPageRotation, METH_O, "registers type"},
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_PdfPageRotation);
        Py_VISIT(state->type_PdfDocument);
        Py_VISIT(state->type_PdfPage);
        Py_VISIT(state->type_PdfPageDimensions);
        Py_VISIT(state->type_PdfPageRenderOptions);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_PdfPageRotation);
        Py_CLEAR(state->type_PdfDocument);
        Py_CLEAR(state->type_PdfPage);
        Py_CLEAR(state->type_PdfPageDimensions);
        Py_CLEAR(state->type_PdfPageRenderOptions);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Data_Pdf",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Data::Pdf

PyMODINIT_FUNC PyInit__winsdk_Windows_Data_Pdf(void) noexcept
{
    using namespace py::cpp::Windows::Data::Pdf;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_PdfDocument = py::register_python_type(module.get(), type_name_PdfDocument, &type_spec_PdfDocument, bases.get(), nullptr);
    if (!state->type_PdfDocument)
    {
        return nullptr;
    }

    state->type_PdfPage = py::register_python_type(module.get(), type_name_PdfPage, &type_spec_PdfPage, bases.get(), nullptr);
    if (!state->type_PdfPage)
    {
        return nullptr;
    }

    state->type_PdfPageDimensions = py::register_python_type(module.get(), type_name_PdfPageDimensions, &type_spec_PdfPageDimensions, bases.get(), nullptr);
    if (!state->type_PdfPageDimensions)
    {
        return nullptr;
    }

    state->type_PdfPageRenderOptions = py::register_python_type(module.get(), type_name_PdfPageRenderOptions, &type_spec_PdfPageRenderOptions, bases.get(), nullptr);
    if (!state->type_PdfPageRenderOptions)
    {
        return nullptr;
    }


    return module.detach();
}

PyObject* py::py_type<winrt::Windows::Data::Pdf::PdfPageRotation>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Data::Pdf;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Data::Pdf");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PdfPageRotation;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Data::Pdf::PdfPageRotation is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Data::Pdf::PdfDocument>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Data::Pdf;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Data::Pdf");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PdfDocument;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Data::Pdf::PdfDocument is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Data::Pdf::PdfPage>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Data::Pdf;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Data::Pdf");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PdfPage;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Data::Pdf::PdfPage is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Data::Pdf::PdfPageDimensions>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Data::Pdf;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Data::Pdf");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PdfPageDimensions;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Data::Pdf::PdfPageDimensions is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Data::Pdf::PdfPageRenderOptions>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Data::Pdf;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Data::Pdf");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PdfPageRenderOptions;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Data::Pdf::PdfPageRenderOptions is not registered");
        return nullptr;
    }

    return python_type;
}
