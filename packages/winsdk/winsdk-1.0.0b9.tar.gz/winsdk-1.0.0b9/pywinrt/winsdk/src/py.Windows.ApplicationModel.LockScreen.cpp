// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.9

#include "pybase.h"
#include "py.Windows.ApplicationModel.LockScreen.h"


namespace py::cpp::Windows::ApplicationModel::LockScreen
{
    struct module_state
    {
        PyTypeObject* type_LockApplicationHost;
        PyTypeObject* type_LockScreenBadge;
        PyTypeObject* type_LockScreenInfo;
        PyTypeObject* type_LockScreenUnlockingDeferral;
        PyTypeObject* type_LockScreenUnlockingEventArgs;
    };

    // ----- LockApplicationHost class --------------------
    static constexpr const char* const type_name_LockApplicationHost = "LockApplicationHost";

    static PyObject* _new_LockApplicationHost(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_LockApplicationHost);
        return nullptr;
    }

    static void _dealloc_LockApplicationHost(py::wrapper::Windows::ApplicationModel::LockScreen::LockApplicationHost* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* LockApplicationHost_GetForCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.LockScreen.LockApplicationHost", L"GetForCurrentView", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::LockScreen::LockApplicationHost::GetForCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LockApplicationHost_RequestUnlock(py::wrapper::Windows::ApplicationModel::LockScreen::LockApplicationHost* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.LockScreen.LockApplicationHost", L"RequestUnlock", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.RequestUnlock();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LockApplicationHost_add_Unlocking(py::wrapper::Windows::ApplicationModel::LockScreen::LockApplicationHost* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.LockScreen.LockApplicationHost", L"Unlocking"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::LockScreen::LockApplicationHost, winrt::Windows::ApplicationModel::LockScreen::LockScreenUnlockingEventArgs>>(arg);

            return py::convert(self->obj.Unlocking(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockApplicationHost_remove_Unlocking(py::wrapper::Windows::ApplicationModel::LockScreen::LockApplicationHost* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.LockScreen.LockApplicationHost", L"Unlocking"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Unlocking(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_LockApplicationHost(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::LockScreen::LockApplicationHost>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_LockApplicationHost(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::LockScreen::LockApplicationHost>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LockApplicationHost[] = {
        { "get_for_current_view", reinterpret_cast<PyCFunction>(LockApplicationHost_GetForCurrentView), METH_VARARGS | METH_STATIC, nullptr },
        { "request_unlock", reinterpret_cast<PyCFunction>(LockApplicationHost_RequestUnlock), METH_VARARGS, nullptr },
        { "add_unlocking", reinterpret_cast<PyCFunction>(LockApplicationHost_add_Unlocking), METH_O, nullptr },
        { "remove_unlocking", reinterpret_cast<PyCFunction>(LockApplicationHost_remove_Unlocking), METH_O, nullptr },
        { "_assign_array_", _assign_array_LockApplicationHost, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_LockApplicationHost), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_LockApplicationHost[] = {
        { }
    };

    static PyType_Slot _type_slots_LockApplicationHost[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_LockApplicationHost) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_LockApplicationHost) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_LockApplicationHost) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_LockApplicationHost) },
        { },
    };

    static PyType_Spec type_spec_LockApplicationHost =
    {
        "_winsdk_Windows_ApplicationModel_LockScreen.LockApplicationHost",
        sizeof(py::wrapper::Windows::ApplicationModel::LockScreen::LockApplicationHost),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LockApplicationHost
    };

    // ----- LockScreenBadge class --------------------
    static constexpr const char* const type_name_LockScreenBadge = "LockScreenBadge";

    static PyObject* _new_LockScreenBadge(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_LockScreenBadge);
        return nullptr;
    }

    static void _dealloc_LockScreenBadge(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenBadge* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* LockScreenBadge_LaunchApp(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenBadge* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.LockScreen.LockScreenBadge", L"LaunchApp", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.LaunchApp();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LockScreenBadge_get_AutomationName(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenBadge* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.LockScreen.LockScreenBadge", L"AutomationName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AutomationName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenBadge_get_Glyph(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenBadge* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.LockScreen.LockScreenBadge", L"Glyph"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Glyph());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenBadge_get_Logo(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenBadge* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.LockScreen.LockScreenBadge", L"Logo"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Logo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenBadge_get_Number(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenBadge* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.LockScreen.LockScreenBadge", L"Number"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Number());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_LockScreenBadge(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::LockScreen::LockScreenBadge>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_LockScreenBadge(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::LockScreen::LockScreenBadge>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LockScreenBadge[] = {
        { "launch_app", reinterpret_cast<PyCFunction>(LockScreenBadge_LaunchApp), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_LockScreenBadge, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_LockScreenBadge), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_LockScreenBadge[] = {
        { "automation_name", reinterpret_cast<getter>(LockScreenBadge_get_AutomationName), nullptr, nullptr, nullptr },
        { "glyph", reinterpret_cast<getter>(LockScreenBadge_get_Glyph), nullptr, nullptr, nullptr },
        { "logo", reinterpret_cast<getter>(LockScreenBadge_get_Logo), nullptr, nullptr, nullptr },
        { "number", reinterpret_cast<getter>(LockScreenBadge_get_Number), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_LockScreenBadge[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_LockScreenBadge) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_LockScreenBadge) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_LockScreenBadge) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_LockScreenBadge) },
        { },
    };

    static PyType_Spec type_spec_LockScreenBadge =
    {
        "_winsdk_Windows_ApplicationModel_LockScreen.LockScreenBadge",
        sizeof(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenBadge),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LockScreenBadge
    };

    // ----- LockScreenInfo class --------------------
    static constexpr const char* const type_name_LockScreenInfo = "LockScreenInfo";

    static PyObject* _new_LockScreenInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_LockScreenInfo);
        return nullptr;
    }

    static void _dealloc_LockScreenInfo(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* LockScreenInfo_get_AlarmIcon(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.LockScreen.LockScreenInfo", L"AlarmIcon"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AlarmIcon());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenInfo_get_Badges(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.LockScreen.LockScreenInfo", L"Badges"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Badges());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenInfo_get_DetailText(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.LockScreen.LockScreenInfo", L"DetailText"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DetailText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenInfo_get_LockScreenImage(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.LockScreen.LockScreenInfo", L"LockScreenImage"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.LockScreenImage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenInfo_add_AlarmIconChanged(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.LockScreen.LockScreenInfo", L"AlarmIconChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::LockScreen::LockScreenInfo, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.AlarmIconChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenInfo_remove_AlarmIconChanged(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.LockScreen.LockScreenInfo", L"AlarmIconChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.AlarmIconChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenInfo_add_BadgesChanged(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.LockScreen.LockScreenInfo", L"BadgesChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::LockScreen::LockScreenInfo, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.BadgesChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenInfo_remove_BadgesChanged(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.LockScreen.LockScreenInfo", L"BadgesChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.BadgesChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenInfo_add_DetailTextChanged(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.LockScreen.LockScreenInfo", L"DetailTextChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::LockScreen::LockScreenInfo, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.DetailTextChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenInfo_remove_DetailTextChanged(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.LockScreen.LockScreenInfo", L"DetailTextChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.DetailTextChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenInfo_add_LockScreenImageChanged(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.LockScreen.LockScreenInfo", L"LockScreenImageChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::LockScreen::LockScreenInfo, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.LockScreenImageChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenInfo_remove_LockScreenImageChanged(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.LockScreen.LockScreenInfo", L"LockScreenImageChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.LockScreenImageChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_LockScreenInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::LockScreen::LockScreenInfo>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_LockScreenInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::LockScreen::LockScreenInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LockScreenInfo[] = {
        { "add_alarm_icon_changed", reinterpret_cast<PyCFunction>(LockScreenInfo_add_AlarmIconChanged), METH_O, nullptr },
        { "remove_alarm_icon_changed", reinterpret_cast<PyCFunction>(LockScreenInfo_remove_AlarmIconChanged), METH_O, nullptr },
        { "add_badges_changed", reinterpret_cast<PyCFunction>(LockScreenInfo_add_BadgesChanged), METH_O, nullptr },
        { "remove_badges_changed", reinterpret_cast<PyCFunction>(LockScreenInfo_remove_BadgesChanged), METH_O, nullptr },
        { "add_detail_text_changed", reinterpret_cast<PyCFunction>(LockScreenInfo_add_DetailTextChanged), METH_O, nullptr },
        { "remove_detail_text_changed", reinterpret_cast<PyCFunction>(LockScreenInfo_remove_DetailTextChanged), METH_O, nullptr },
        { "add_lock_screen_image_changed", reinterpret_cast<PyCFunction>(LockScreenInfo_add_LockScreenImageChanged), METH_O, nullptr },
        { "remove_lock_screen_image_changed", reinterpret_cast<PyCFunction>(LockScreenInfo_remove_LockScreenImageChanged), METH_O, nullptr },
        { "_assign_array_", _assign_array_LockScreenInfo, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_LockScreenInfo), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_LockScreenInfo[] = {
        { "alarm_icon", reinterpret_cast<getter>(LockScreenInfo_get_AlarmIcon), nullptr, nullptr, nullptr },
        { "badges", reinterpret_cast<getter>(LockScreenInfo_get_Badges), nullptr, nullptr, nullptr },
        { "detail_text", reinterpret_cast<getter>(LockScreenInfo_get_DetailText), nullptr, nullptr, nullptr },
        { "lock_screen_image", reinterpret_cast<getter>(LockScreenInfo_get_LockScreenImage), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_LockScreenInfo[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_LockScreenInfo) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_LockScreenInfo) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_LockScreenInfo) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_LockScreenInfo) },
        { },
    };

    static PyType_Spec type_spec_LockScreenInfo =
    {
        "_winsdk_Windows_ApplicationModel_LockScreen.LockScreenInfo",
        sizeof(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LockScreenInfo
    };

    // ----- LockScreenUnlockingDeferral class --------------------
    static constexpr const char* const type_name_LockScreenUnlockingDeferral = "LockScreenUnlockingDeferral";

    static PyObject* _new_LockScreenUnlockingDeferral(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_LockScreenUnlockingDeferral);
        return nullptr;
    }

    static void _dealloc_LockScreenUnlockingDeferral(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenUnlockingDeferral* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* LockScreenUnlockingDeferral_Complete(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenUnlockingDeferral* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.LockScreen.LockScreenUnlockingDeferral", L"Complete", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Complete();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_LockScreenUnlockingDeferral(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::LockScreen::LockScreenUnlockingDeferral>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_LockScreenUnlockingDeferral(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::LockScreen::LockScreenUnlockingDeferral>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LockScreenUnlockingDeferral[] = {
        { "complete", reinterpret_cast<PyCFunction>(LockScreenUnlockingDeferral_Complete), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_LockScreenUnlockingDeferral, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_LockScreenUnlockingDeferral), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_LockScreenUnlockingDeferral[] = {
        { }
    };

    static PyType_Slot _type_slots_LockScreenUnlockingDeferral[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_LockScreenUnlockingDeferral) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_LockScreenUnlockingDeferral) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_LockScreenUnlockingDeferral) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_LockScreenUnlockingDeferral) },
        { },
    };

    static PyType_Spec type_spec_LockScreenUnlockingDeferral =
    {
        "_winsdk_Windows_ApplicationModel_LockScreen.LockScreenUnlockingDeferral",
        sizeof(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenUnlockingDeferral),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LockScreenUnlockingDeferral
    };

    // ----- LockScreenUnlockingEventArgs class --------------------
    static constexpr const char* const type_name_LockScreenUnlockingEventArgs = "LockScreenUnlockingEventArgs";

    static PyObject* _new_LockScreenUnlockingEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_LockScreenUnlockingEventArgs);
        return nullptr;
    }

    static void _dealloc_LockScreenUnlockingEventArgs(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenUnlockingEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* LockScreenUnlockingEventArgs_GetDeferral(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenUnlockingEventArgs* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.LockScreen.LockScreenUnlockingEventArgs", L"GetDeferral", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LockScreenUnlockingEventArgs_get_Deadline(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenUnlockingEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.LockScreen.LockScreenUnlockingEventArgs", L"Deadline"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Deadline());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_LockScreenUnlockingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::LockScreen::LockScreenUnlockingEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_LockScreenUnlockingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::LockScreen::LockScreenUnlockingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LockScreenUnlockingEventArgs[] = {
        { "get_deferral", reinterpret_cast<PyCFunction>(LockScreenUnlockingEventArgs_GetDeferral), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_LockScreenUnlockingEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_LockScreenUnlockingEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_LockScreenUnlockingEventArgs[] = {
        { "deadline", reinterpret_cast<getter>(LockScreenUnlockingEventArgs_get_Deadline), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_LockScreenUnlockingEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_LockScreenUnlockingEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_LockScreenUnlockingEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_LockScreenUnlockingEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_LockScreenUnlockingEventArgs) },
        { },
    };

    static PyType_Spec type_spec_LockScreenUnlockingEventArgs =
    {
        "_winsdk_Windows_ApplicationModel_LockScreen.LockScreenUnlockingEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenUnlockingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LockScreenUnlockingEventArgs
    };

    // ----- Windows.ApplicationModel.LockScreen Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::ApplicationModel::LockScreen");

    static PyMethodDef module_methods[] = {
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_LockApplicationHost);
        Py_VISIT(state->type_LockScreenBadge);
        Py_VISIT(state->type_LockScreenInfo);
        Py_VISIT(state->type_LockScreenUnlockingDeferral);
        Py_VISIT(state->type_LockScreenUnlockingEventArgs);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_LockApplicationHost);
        Py_CLEAR(state->type_LockScreenBadge);
        Py_CLEAR(state->type_LockScreenInfo);
        Py_CLEAR(state->type_LockScreenUnlockingDeferral);
        Py_CLEAR(state->type_LockScreenUnlockingEventArgs);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_ApplicationModel_LockScreen",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::ApplicationModel::LockScreen

PyMODINIT_FUNC PyInit__winsdk_Windows_ApplicationModel_LockScreen(void) noexcept
{
    using namespace py::cpp::Windows::ApplicationModel::LockScreen;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_LockApplicationHost = py::register_python_type(module.get(), type_name_LockApplicationHost, &type_spec_LockApplicationHost, bases.get(), nullptr);
    if (!state->type_LockApplicationHost)
    {
        return nullptr;
    }

    state->type_LockScreenBadge = py::register_python_type(module.get(), type_name_LockScreenBadge, &type_spec_LockScreenBadge, bases.get(), nullptr);
    if (!state->type_LockScreenBadge)
    {
        return nullptr;
    }

    state->type_LockScreenInfo = py::register_python_type(module.get(), type_name_LockScreenInfo, &type_spec_LockScreenInfo, bases.get(), nullptr);
    if (!state->type_LockScreenInfo)
    {
        return nullptr;
    }

    state->type_LockScreenUnlockingDeferral = py::register_python_type(module.get(), type_name_LockScreenUnlockingDeferral, &type_spec_LockScreenUnlockingDeferral, bases.get(), nullptr);
    if (!state->type_LockScreenUnlockingDeferral)
    {
        return nullptr;
    }

    state->type_LockScreenUnlockingEventArgs = py::register_python_type(module.get(), type_name_LockScreenUnlockingEventArgs, &type_spec_LockScreenUnlockingEventArgs, bases.get(), nullptr);
    if (!state->type_LockScreenUnlockingEventArgs)
    {
        return nullptr;
    }


    return module.detach();
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::LockScreen::LockApplicationHost>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::LockScreen;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::LockScreen");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_LockApplicationHost;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::LockScreen::LockApplicationHost is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::LockScreen::LockScreenBadge>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::LockScreen;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::LockScreen");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_LockScreenBadge;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::LockScreen::LockScreenBadge is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::LockScreen::LockScreenInfo>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::LockScreen;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::LockScreen");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_LockScreenInfo;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::LockScreen::LockScreenInfo is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::LockScreen::LockScreenUnlockingDeferral>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::LockScreen;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::LockScreen");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_LockScreenUnlockingDeferral;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::LockScreen::LockScreenUnlockingDeferral is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::LockScreen::LockScreenUnlockingEventArgs>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::LockScreen;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::LockScreen");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_LockScreenUnlockingEventArgs;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::LockScreen::LockScreenUnlockingEventArgs is not registered");
        return nullptr;
    }

    return python_type;
}
