"use strict";(self.webpackChunkjupyterlab_francy=self.webpackChunkjupyterlab_francy||[]).push([[540],{2540:(t,h,i)=>{i.r(h),i.d(h,{Path:()=>s.y$,path:()=>s.ET,pathRound:()=>s.xK});var s=i(1672)},1672:(t,h,i)=>{i.d(h,{ET:()=>r,xK:()=>p,y$:()=>$});const s=Math.PI,_=2*s,e=1e-6,n=_-e;function a(t){this._+=t[0];for(let h=1,i=t.length;h<i;++h)this._+=arguments[h]+t[h]}class ${constructor(t){this._x0=this._y0=this._x1=this._y1=null,this._="",this._append=null==t?a:function(t){let h=Math.floor(t);if(!(h>=0))throw new Error(`invalid digits: ${t}`);if(h>15)return a;const i=10**h;return function(t){this._+=t[0];for(let h=1,s=t.length;h<s;++h)this._+=Math.round(arguments[h]*i)/i+t[h]}}(t)}moveTo(t,h){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+h}`}closePath(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._append`Z`)}lineTo(t,h){this._append`L${this._x1=+t},${this._y1=+h}`}quadraticCurveTo(t,h,i,s){this._append`Q${+t},${+h},${this._x1=+i},${this._y1=+s}`}bezierCurveTo(t,h,i,s,_,e){this._append`C${+t},${+h},${+i},${+s},${this._x1=+_},${this._y1=+e}`}arcTo(t,h,i,_,n){if(t=+t,h=+h,i=+i,_=+_,(n=+n)<0)throw new Error(`negative radius: ${n}`);let a=this._x1,$=this._y1,r=i-t,p=_-h,o=a-t,l=$-h,u=o*o+l*l;if(null===this._x1)this._append`M${this._x1=t},${this._y1=h}`;else if(u>e)if(Math.abs(l*r-p*o)>e&&n){let y=i-a,d=_-$,c=r*r+p*p,x=y*y+d*d,f=Math.sqrt(c),M=Math.sqrt(u),w=n*Math.tan((s-Math.acos((c+u-x)/(2*f*M)))/2),b=w/M,v=w/f;Math.abs(b-1)>e&&this._append`L${t+b*o},${h+b*l}`,this._append`A${n},${n},0,0,${+(l*y>o*d)},${this._x1=t+v*r},${this._y1=h+v*p}`}else this._append`L${this._x1=t},${this._y1=h}`}arc(t,h,i,a,$,r){if(t=+t,h=+h,r=!!r,(i=+i)<0)throw new Error(`negative radius: ${i}`);let p=i*Math.cos(a),o=i*Math.sin(a),l=t+p,u=h+o,y=1^r,d=r?a-$:$-a;null===this._x1?this._append`M${l},${u}`:(Math.abs(this._x1-l)>e||Math.abs(this._y1-u)>e)&&this._append`L${l},${u}`,i&&(d<0&&(d=d%_+_),d>n?this._append`A${i},${i},0,1,${y},${t-p},${h-o}A${i},${i},0,1,${y},${this._x1=l},${this._y1=u}`:d>e&&this._append`A${i},${i},0,${+(d>=s)},${y},${this._x1=t+i*Math.cos($)},${this._y1=h+i*Math.sin($)}`)}rect(t,h,i,s){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+h}h${i=+i}v${+s}h${-i}Z`}toString(){return this._}}function r(){return new $}function p(t=3){return new $(+t)}r.prototype=$.prototype}}]);