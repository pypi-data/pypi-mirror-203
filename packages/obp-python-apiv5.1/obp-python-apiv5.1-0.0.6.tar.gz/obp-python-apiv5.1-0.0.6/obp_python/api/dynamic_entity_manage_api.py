# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.1.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from obp_python.api_client import ApiClient


class DynamicEntityManageApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_bank_level_dynamic_entity(self, body, bank_id, **kwargs):  # noqa: E501
        """Create Bank Level Dynamic Entity  # noqa: E501

        <p>Create a Bank Level DynamicEntity.</p><p>Authentication is Mandatory</p><p>Create a DynamicEntity. If creation is successful, the corresponding POST, GET, PUT and DELETE (Create, Read, Update, Delete or CRUD for short) endpoints will be generated automatically</p><p>The following field types are as supported:<br />[number, integer, boolean, string, DATE_WITH_DAY, reference]</p><p>The DATE_WITH_DAY format is: yyyy-MM-dd</p><p>Reference types are like foreign keys and composite foreign keys are supported. The value you need to supply as the (composite) foreign key is a UUID (or several UUIDs in the case of a composite key) that match value in another Entity..<br />The following list shows all the possible reference types in the system with corresponding examples values so you can see how to construct each reference type value.</p><pre><code>&quot;someField0&quot;: {    &quot;type&quot;: &quot;reference:Bank&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField1&quot;: {    &quot;type&quot;: &quot;reference:Consumer&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField2&quot;: {    &quot;type&quot;: &quot;reference:Customer&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField3&quot;: {    &quot;type&quot;: &quot;reference:MethodRouting&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField4&quot;: {    &quot;type&quot;: &quot;reference:DynamicEntity&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField5&quot;: {    &quot;type&quot;: &quot;reference:TransactionRequest&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField6&quot;: {    &quot;type&quot;: &quot;reference:ProductAttribute&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField7&quot;: {    &quot;type&quot;: &quot;reference:AccountAttribute&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField8&quot;: {    &quot;type&quot;: &quot;reference:TransactionAttribute&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField9&quot;: {    &quot;type&quot;: &quot;reference:CustomerAttribute&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField10&quot;: {    &quot;type&quot;: &quot;reference:AccountApplication&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField11&quot;: {    &quot;type&quot;: &quot;reference:CardAttribute&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField12&quot;: {    &quot;type&quot;: &quot;reference:Counterparty&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField13&quot;: {    &quot;type&quot;: &quot;reference:Branch:bankId&amp;branchId&quot;,    &quot;example&quot;: &quot;bankId=3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&amp;branchId=0a6ccafe-76f0-48e7-86ff-71c138d51cd1&quot;}&quot;someField14&quot;: {    &quot;type&quot;: &quot;reference:Atm:bankId&amp;atmId&quot;,    &quot;example&quot;: &quot;bankId=3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&amp;atmId=0a6ccafe-76f0-48e7-86ff-71c138d51cd1&quot;}&quot;someField15&quot;: {    &quot;type&quot;: &quot;reference:BankAccount:bankId&amp;accountId&quot;,    &quot;example&quot;: &quot;bankId=3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&amp;accountId=0a6ccafe-76f0-48e7-86ff-71c138d51cd1&quot;}&quot;someField16&quot;: {    &quot;type&quot;: &quot;reference:Product:bankId&amp;productCode&quot;,    &quot;example&quot;: &quot;bankId=3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&amp;productCode=0a6ccafe-76f0-48e7-86ff-71c138d51cd1&quot;}&quot;someField17&quot;: {    &quot;type&quot;: &quot;reference:PhysicalCard:bankId&amp;cardId&quot;,    &quot;example&quot;: &quot;bankId=3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&amp;cardId=0a6ccafe-76f0-48e7-86ff-71c138d51cd1&quot;}&quot;someField18&quot;: {    &quot;type&quot;: &quot;reference:Transaction:bankId&amp;accountId&amp;transactionId&quot;,    &quot;example&quot;: &quot;bankId=3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&amp;accountId=0a6ccafe-76f0-48e7-86ff-71c138d51cd1&amp;transactionId=ea98be3f-770f-4725-b11f-d4e24855685e&quot;}&quot;someField19&quot;: {    &quot;type&quot;: &quot;reference:Counterparty:bankId&amp;accountId&amp;counterpartyId&quot;,    &quot;example&quot;: &quot;bankId=3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&amp;accountId=0a6ccafe-76f0-48e7-86ff-71c138d51cd1&amp;counterpartyId=ea98be3f-770f-4725-b11f-d4e24855685e&quot;}</code></pre><p>Note: if you set <code>hasPersonalEntity</code> = false, then OBP will not generate the CRUD my FooBar endpoints.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_bank_level_dynamic_entity(body, bank_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DynamicEntityFooBar body: DynamicEntityFooBar object that needs to be added. (required)
        :param str bank_id: The bank id (required)
        :return: DynamicEntityFooBar
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_bank_level_dynamic_entity_with_http_info(body, bank_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_bank_level_dynamic_entity_with_http_info(body, bank_id, **kwargs)  # noqa: E501
            return data

    def create_bank_level_dynamic_entity_with_http_info(self, body, bank_id, **kwargs):  # noqa: E501
        """Create Bank Level Dynamic Entity  # noqa: E501

        <p>Create a Bank Level DynamicEntity.</p><p>Authentication is Mandatory</p><p>Create a DynamicEntity. If creation is successful, the corresponding POST, GET, PUT and DELETE (Create, Read, Update, Delete or CRUD for short) endpoints will be generated automatically</p><p>The following field types are as supported:<br />[number, integer, boolean, string, DATE_WITH_DAY, reference]</p><p>The DATE_WITH_DAY format is: yyyy-MM-dd</p><p>Reference types are like foreign keys and composite foreign keys are supported. The value you need to supply as the (composite) foreign key is a UUID (or several UUIDs in the case of a composite key) that match value in another Entity..<br />The following list shows all the possible reference types in the system with corresponding examples values so you can see how to construct each reference type value.</p><pre><code>&quot;someField0&quot;: {    &quot;type&quot;: &quot;reference:Bank&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField1&quot;: {    &quot;type&quot;: &quot;reference:Consumer&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField2&quot;: {    &quot;type&quot;: &quot;reference:Customer&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField3&quot;: {    &quot;type&quot;: &quot;reference:MethodRouting&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField4&quot;: {    &quot;type&quot;: &quot;reference:DynamicEntity&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField5&quot;: {    &quot;type&quot;: &quot;reference:TransactionRequest&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField6&quot;: {    &quot;type&quot;: &quot;reference:ProductAttribute&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField7&quot;: {    &quot;type&quot;: &quot;reference:AccountAttribute&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField8&quot;: {    &quot;type&quot;: &quot;reference:TransactionAttribute&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField9&quot;: {    &quot;type&quot;: &quot;reference:CustomerAttribute&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField10&quot;: {    &quot;type&quot;: &quot;reference:AccountApplication&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField11&quot;: {    &quot;type&quot;: &quot;reference:CardAttribute&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField12&quot;: {    &quot;type&quot;: &quot;reference:Counterparty&quot;,    &quot;example&quot;: &quot;3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&quot;}&quot;someField13&quot;: {    &quot;type&quot;: &quot;reference:Branch:bankId&amp;branchId&quot;,    &quot;example&quot;: &quot;bankId=3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&amp;branchId=0a6ccafe-76f0-48e7-86ff-71c138d51cd1&quot;}&quot;someField14&quot;: {    &quot;type&quot;: &quot;reference:Atm:bankId&amp;atmId&quot;,    &quot;example&quot;: &quot;bankId=3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&amp;atmId=0a6ccafe-76f0-48e7-86ff-71c138d51cd1&quot;}&quot;someField15&quot;: {    &quot;type&quot;: &quot;reference:BankAccount:bankId&amp;accountId&quot;,    &quot;example&quot;: &quot;bankId=3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&amp;accountId=0a6ccafe-76f0-48e7-86ff-71c138d51cd1&quot;}&quot;someField16&quot;: {    &quot;type&quot;: &quot;reference:Product:bankId&amp;productCode&quot;,    &quot;example&quot;: &quot;bankId=3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&amp;productCode=0a6ccafe-76f0-48e7-86ff-71c138d51cd1&quot;}&quot;someField17&quot;: {    &quot;type&quot;: &quot;reference:PhysicalCard:bankId&amp;cardId&quot;,    &quot;example&quot;: &quot;bankId=3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&amp;cardId=0a6ccafe-76f0-48e7-86ff-71c138d51cd1&quot;}&quot;someField18&quot;: {    &quot;type&quot;: &quot;reference:Transaction:bankId&amp;accountId&amp;transactionId&quot;,    &quot;example&quot;: &quot;bankId=3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&amp;accountId=0a6ccafe-76f0-48e7-86ff-71c138d51cd1&amp;transactionId=ea98be3f-770f-4725-b11f-d4e24855685e&quot;}&quot;someField19&quot;: {    &quot;type&quot;: &quot;reference:Counterparty:bankId&amp;accountId&amp;counterpartyId&quot;,    &quot;example&quot;: &quot;bankId=3e98ca9c-284d-4f83-8a8e-9dcd5c8069da&amp;accountId=0a6ccafe-76f0-48e7-86ff-71c138d51cd1&amp;counterpartyId=ea98be3f-770f-4725-b11f-d4e24855685e&quot;}</code></pre><p>Note: if you set <code>hasPersonalEntity</code> = false, then OBP will not generate the CRUD my FooBar endpoints.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_bank_level_dynamic_entity_with_http_info(body, bank_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DynamicEntityFooBar body: DynamicEntityFooBar object that needs to be added. (required)
        :param str bank_id: The bank id (required)
        :return: DynamicEntityFooBar
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'bank_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_bank_level_dynamic_entity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_bank_level_dynamic_entity`")  # noqa: E501
        # verify the required parameter 'bank_id' is set
        if self.api_client.client_side_validation and ('bank_id' not in params or
                                                       params['bank_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bank_id` when calling `create_bank_level_dynamic_entity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']  # noqa: E501

        return self.api_client.call_api(
            '/obp/v5.1.0/management/banks/{BANK_ID}/dynamic-entities', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DynamicEntityFooBar',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_system_dynamic_entity(self, body, **kwargs):  # noqa: E501
        """Create System Level Dynamic Entity  # noqa: E501

        <p>Create a system level Dynamic Entity.</p><p>Authentication is Mandatory</p><p>Create a DynamicEntity. If creation is successful, the corresponding POST, GET, PUT and DELETE (Create, Read, Update, Delete or CRUD for short) endpoints will be generated automatically</p><p>The following field types are as supported:<br />[number, integer, boolean, string, DATE_WITH_DAY, reference]</p><p>The DATE_WITH_DAY format is: yyyy-MM-dd</p><p>Reference types are like foreign keys and composite foreign keys are supported. The value you need to supply as the (composite) foreign key is a UUID (or several UUIDs in the case of a composite key) that match value in another Entity..<br />See the following list of currently available reference types and examples of how to construct key values correctly. Note: As more Dynamic Entities are created on this instance, this list will grow:</p><pre><code>&quot;someField0&quot;: {    &quot;type&quot;: &quot;reference:Bank&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField1&quot;: {    &quot;type&quot;: &quot;reference:Consumer&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField2&quot;: {    &quot;type&quot;: &quot;reference:Customer&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField3&quot;: {    &quot;type&quot;: &quot;reference:MethodRouting&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField4&quot;: {    &quot;type&quot;: &quot;reference:DynamicEntity&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField5&quot;: {    &quot;type&quot;: &quot;reference:TransactionRequest&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField6&quot;: {    &quot;type&quot;: &quot;reference:ProductAttribute&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField7&quot;: {    &quot;type&quot;: &quot;reference:AccountAttribute&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField8&quot;: {    &quot;type&quot;: &quot;reference:TransactionAttribute&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField9&quot;: {    &quot;type&quot;: &quot;reference:CustomerAttribute&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField10&quot;: {    &quot;type&quot;: &quot;reference:AccountApplication&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField11&quot;: {    &quot;type&quot;: &quot;reference:CardAttribute&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField12&quot;: {    &quot;type&quot;: &quot;reference:Counterparty&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField13&quot;: {    &quot;type&quot;: &quot;reference:Branch:bankId&amp;branchId&quot;,    &quot;example&quot;: &quot;bankId=5a6cd27a-b66a-474f-af21-9700efd2c660&amp;branchId=ab36245a-ea3f-4a25-a97a-719ad8309668&quot;}&quot;someField14&quot;: {    &quot;type&quot;: &quot;reference:Atm:bankId&amp;atmId&quot;,    &quot;example&quot;: &quot;bankId=5a6cd27a-b66a-474f-af21-9700efd2c660&amp;atmId=ab36245a-ea3f-4a25-a97a-719ad8309668&quot;}&quot;someField15&quot;: {    &quot;type&quot;: &quot;reference:BankAccount:bankId&amp;accountId&quot;,    &quot;example&quot;: &quot;bankId=5a6cd27a-b66a-474f-af21-9700efd2c660&amp;accountId=ab36245a-ea3f-4a25-a97a-719ad8309668&quot;}&quot;someField16&quot;: {    &quot;type&quot;: &quot;reference:Product:bankId&amp;productCode&quot;,    &quot;example&quot;: &quot;bankId=5a6cd27a-b66a-474f-af21-9700efd2c660&amp;productCode=ab36245a-ea3f-4a25-a97a-719ad8309668&quot;}&quot;someField17&quot;: {    &quot;type&quot;: &quot;reference:PhysicalCard:bankId&amp;cardId&quot;,    &quot;example&quot;: &quot;bankId=5a6cd27a-b66a-474f-af21-9700efd2c660&amp;cardId=ab36245a-ea3f-4a25-a97a-719ad8309668&quot;}&quot;someField18&quot;: {    &quot;type&quot;: &quot;reference:Transaction:bankId&amp;accountId&amp;transactionId&quot;,    &quot;example&quot;: &quot;bankId=5a6cd27a-b66a-474f-af21-9700efd2c660&amp;accountId=ab36245a-ea3f-4a25-a97a-719ad8309668&amp;transactionId=a39ff06c-0766-41b8-bba4-20b4bf7c3af2&quot;}&quot;someField19&quot;: {    &quot;type&quot;: &quot;reference:Counterparty:bankId&amp;accountId&amp;counterpartyId&quot;,    &quot;example&quot;: &quot;bankId=5a6cd27a-b66a-474f-af21-9700efd2c660&amp;accountId=ab36245a-ea3f-4a25-a97a-719ad8309668&amp;counterpartyId=a39ff06c-0766-41b8-bba4-20b4bf7c3af2&quot;}</code></pre><p>Note: if you set <code>hasPersonalEntity</code> = false, then OBP will not generate the CRUD my FooBar endpoints.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_system_dynamic_entity(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DynamicEntityFooBar body: DynamicEntityFooBar object that needs to be added. (required)
        :return: DynamicEntityFooBar
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_system_dynamic_entity_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_system_dynamic_entity_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_system_dynamic_entity_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create System Level Dynamic Entity  # noqa: E501

        <p>Create a system level Dynamic Entity.</p><p>Authentication is Mandatory</p><p>Create a DynamicEntity. If creation is successful, the corresponding POST, GET, PUT and DELETE (Create, Read, Update, Delete or CRUD for short) endpoints will be generated automatically</p><p>The following field types are as supported:<br />[number, integer, boolean, string, DATE_WITH_DAY, reference]</p><p>The DATE_WITH_DAY format is: yyyy-MM-dd</p><p>Reference types are like foreign keys and composite foreign keys are supported. The value you need to supply as the (composite) foreign key is a UUID (or several UUIDs in the case of a composite key) that match value in another Entity..<br />See the following list of currently available reference types and examples of how to construct key values correctly. Note: As more Dynamic Entities are created on this instance, this list will grow:</p><pre><code>&quot;someField0&quot;: {    &quot;type&quot;: &quot;reference:Bank&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField1&quot;: {    &quot;type&quot;: &quot;reference:Consumer&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField2&quot;: {    &quot;type&quot;: &quot;reference:Customer&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField3&quot;: {    &quot;type&quot;: &quot;reference:MethodRouting&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField4&quot;: {    &quot;type&quot;: &quot;reference:DynamicEntity&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField5&quot;: {    &quot;type&quot;: &quot;reference:TransactionRequest&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField6&quot;: {    &quot;type&quot;: &quot;reference:ProductAttribute&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField7&quot;: {    &quot;type&quot;: &quot;reference:AccountAttribute&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField8&quot;: {    &quot;type&quot;: &quot;reference:TransactionAttribute&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField9&quot;: {    &quot;type&quot;: &quot;reference:CustomerAttribute&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField10&quot;: {    &quot;type&quot;: &quot;reference:AccountApplication&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField11&quot;: {    &quot;type&quot;: &quot;reference:CardAttribute&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField12&quot;: {    &quot;type&quot;: &quot;reference:Counterparty&quot;,    &quot;example&quot;: &quot;5a6cd27a-b66a-474f-af21-9700efd2c660&quot;}&quot;someField13&quot;: {    &quot;type&quot;: &quot;reference:Branch:bankId&amp;branchId&quot;,    &quot;example&quot;: &quot;bankId=5a6cd27a-b66a-474f-af21-9700efd2c660&amp;branchId=ab36245a-ea3f-4a25-a97a-719ad8309668&quot;}&quot;someField14&quot;: {    &quot;type&quot;: &quot;reference:Atm:bankId&amp;atmId&quot;,    &quot;example&quot;: &quot;bankId=5a6cd27a-b66a-474f-af21-9700efd2c660&amp;atmId=ab36245a-ea3f-4a25-a97a-719ad8309668&quot;}&quot;someField15&quot;: {    &quot;type&quot;: &quot;reference:BankAccount:bankId&amp;accountId&quot;,    &quot;example&quot;: &quot;bankId=5a6cd27a-b66a-474f-af21-9700efd2c660&amp;accountId=ab36245a-ea3f-4a25-a97a-719ad8309668&quot;}&quot;someField16&quot;: {    &quot;type&quot;: &quot;reference:Product:bankId&amp;productCode&quot;,    &quot;example&quot;: &quot;bankId=5a6cd27a-b66a-474f-af21-9700efd2c660&amp;productCode=ab36245a-ea3f-4a25-a97a-719ad8309668&quot;}&quot;someField17&quot;: {    &quot;type&quot;: &quot;reference:PhysicalCard:bankId&amp;cardId&quot;,    &quot;example&quot;: &quot;bankId=5a6cd27a-b66a-474f-af21-9700efd2c660&amp;cardId=ab36245a-ea3f-4a25-a97a-719ad8309668&quot;}&quot;someField18&quot;: {    &quot;type&quot;: &quot;reference:Transaction:bankId&amp;accountId&amp;transactionId&quot;,    &quot;example&quot;: &quot;bankId=5a6cd27a-b66a-474f-af21-9700efd2c660&amp;accountId=ab36245a-ea3f-4a25-a97a-719ad8309668&amp;transactionId=a39ff06c-0766-41b8-bba4-20b4bf7c3af2&quot;}&quot;someField19&quot;: {    &quot;type&quot;: &quot;reference:Counterparty:bankId&amp;accountId&amp;counterpartyId&quot;,    &quot;example&quot;: &quot;bankId=5a6cd27a-b66a-474f-af21-9700efd2c660&amp;accountId=ab36245a-ea3f-4a25-a97a-719ad8309668&amp;counterpartyId=a39ff06c-0766-41b8-bba4-20b4bf7c3af2&quot;}</code></pre><p>Note: if you set <code>hasPersonalEntity</code> = false, then OBP will not generate the CRUD my FooBar endpoints.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_system_dynamic_entity_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DynamicEntityFooBar body: DynamicEntityFooBar object that needs to be added. (required)
        :return: DynamicEntityFooBar
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_system_dynamic_entity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_system_dynamic_entity`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']  # noqa: E501

        return self.api_client.call_api(
            '/obp/v5.1.0/management/system-dynamic-entities', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DynamicEntityFooBar',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_bank_level_dynamic_entity(self, dynamic_entity_id, bank_id, **kwargs):  # noqa: E501
        """Delete Bank Level Dynamic Entity  # noqa: E501

        <p>Delete a Bank Level DynamicEntity specified by DYNAMIC_ENTITY_ID.</p><p>Authentication is Mandatory</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_bank_level_dynamic_entity(dynamic_entity_id, bank_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dynamic_entity_id: the dynamic entity id  (required)
        :param str bank_id: The bank id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_bank_level_dynamic_entity_with_http_info(dynamic_entity_id, bank_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_bank_level_dynamic_entity_with_http_info(dynamic_entity_id, bank_id, **kwargs)  # noqa: E501
            return data

    def delete_bank_level_dynamic_entity_with_http_info(self, dynamic_entity_id, bank_id, **kwargs):  # noqa: E501
        """Delete Bank Level Dynamic Entity  # noqa: E501

        <p>Delete a Bank Level DynamicEntity specified by DYNAMIC_ENTITY_ID.</p><p>Authentication is Mandatory</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_bank_level_dynamic_entity_with_http_info(dynamic_entity_id, bank_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dynamic_entity_id: the dynamic entity id  (required)
        :param str bank_id: The bank id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dynamic_entity_id', 'bank_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_bank_level_dynamic_entity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dynamic_entity_id' is set
        if self.api_client.client_side_validation and ('dynamic_entity_id' not in params or
                                                       params['dynamic_entity_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dynamic_entity_id` when calling `delete_bank_level_dynamic_entity`")  # noqa: E501
        # verify the required parameter 'bank_id' is set
        if self.api_client.client_side_validation and ('bank_id' not in params or
                                                       params['bank_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bank_id` when calling `delete_bank_level_dynamic_entity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dynamic_entity_id' in params:
            path_params['DYNAMIC_ENTITY_ID'] = params['dynamic_entity_id']  # noqa: E501
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']  # noqa: E501

        return self.api_client.call_api(
            '/obp/v5.1.0/management/banks/{BANK_ID}/dynamic-entities/{DYNAMIC_ENTITY_ID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_my_dynamic_entity(self, dynamic_entity_id, **kwargs):  # noqa: E501
        """Delete My Dynamic Entity  # noqa: E501

        <p>Delete my DynamicEntity specified by DYNAMIC_ENTITY_ID.</p><p>Authentication is Mandatory</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_my_dynamic_entity(dynamic_entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dynamic_entity_id: the dynamic entity id  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_my_dynamic_entity_with_http_info(dynamic_entity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_my_dynamic_entity_with_http_info(dynamic_entity_id, **kwargs)  # noqa: E501
            return data

    def delete_my_dynamic_entity_with_http_info(self, dynamic_entity_id, **kwargs):  # noqa: E501
        """Delete My Dynamic Entity  # noqa: E501

        <p>Delete my DynamicEntity specified by DYNAMIC_ENTITY_ID.</p><p>Authentication is Mandatory</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_my_dynamic_entity_with_http_info(dynamic_entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dynamic_entity_id: the dynamic entity id  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dynamic_entity_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_my_dynamic_entity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dynamic_entity_id' is set
        if self.api_client.client_side_validation and ('dynamic_entity_id' not in params or
                                                       params['dynamic_entity_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dynamic_entity_id` when calling `delete_my_dynamic_entity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dynamic_entity_id' in params:
            path_params['DYNAMIC_ENTITY_ID'] = params['dynamic_entity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']  # noqa: E501

        return self.api_client.call_api(
            '/obp/v5.1.0/my/dynamic-entities/{DYNAMIC_ENTITY_ID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_system_dynamic_entity(self, dynamic_entity_id, **kwargs):  # noqa: E501
        """Delete System Level Dynamic Entity  # noqa: E501

        <p>Delete a DynamicEntity specified by DYNAMIC_ENTITY_ID.</p><p>Authentication is Mandatory</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_system_dynamic_entity(dynamic_entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dynamic_entity_id: the dynamic entity id  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_system_dynamic_entity_with_http_info(dynamic_entity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_system_dynamic_entity_with_http_info(dynamic_entity_id, **kwargs)  # noqa: E501
            return data

    def delete_system_dynamic_entity_with_http_info(self, dynamic_entity_id, **kwargs):  # noqa: E501
        """Delete System Level Dynamic Entity  # noqa: E501

        <p>Delete a DynamicEntity specified by DYNAMIC_ENTITY_ID.</p><p>Authentication is Mandatory</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_system_dynamic_entity_with_http_info(dynamic_entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dynamic_entity_id: the dynamic entity id  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dynamic_entity_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_system_dynamic_entity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dynamic_entity_id' is set
        if self.api_client.client_side_validation and ('dynamic_entity_id' not in params or
                                                       params['dynamic_entity_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dynamic_entity_id` when calling `delete_system_dynamic_entity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dynamic_entity_id' in params:
            path_params['DYNAMIC_ENTITY_ID'] = params['dynamic_entity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']  # noqa: E501

        return self.api_client.call_api(
            '/obp/v5.1.0/management/system-dynamic-entities/{DYNAMIC_ENTITY_ID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bank_level_dynamic_entities(self, bank_id, **kwargs):  # noqa: E501
        """Get Bank Level Dynamic Entities  # noqa: E501

        <p>Get all the bank level Dynamic Entities for one bank.</p><p>Authentication is Mandatory</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bank_level_dynamic_entities(bank_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bank_id: The bank id (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_bank_level_dynamic_entities_with_http_info(bank_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bank_level_dynamic_entities_with_http_info(bank_id, **kwargs)  # noqa: E501
            return data

    def get_bank_level_dynamic_entities_with_http_info(self, bank_id, **kwargs):  # noqa: E501
        """Get Bank Level Dynamic Entities  # noqa: E501

        <p>Get all the bank level Dynamic Entities for one bank.</p><p>Authentication is Mandatory</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bank_level_dynamic_entities_with_http_info(bank_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bank_id: The bank id (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bank_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bank_level_dynamic_entities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bank_id' is set
        if self.api_client.client_side_validation and ('bank_id' not in params or
                                                       params['bank_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bank_id` when calling `get_bank_level_dynamic_entities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']  # noqa: E501

        return self.api_client.call_api(
            '/obp/v5.1.0/management/banks/{BANK_ID}/dynamic-entities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_my_dynamic_entities(self, **kwargs):  # noqa: E501
        """Get My Dynamic Entities  # noqa: E501

        <p>Get all my Dynamic Entities.</p><p>Authentication is Mandatory</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_my_dynamic_entities(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_my_dynamic_entities_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_my_dynamic_entities_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_my_dynamic_entities_with_http_info(self, **kwargs):  # noqa: E501
        """Get My Dynamic Entities  # noqa: E501

        <p>Get all my Dynamic Entities.</p><p>Authentication is Mandatory</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_my_dynamic_entities_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_my_dynamic_entities" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']  # noqa: E501

        return self.api_client.call_api(
            '/obp/v5.1.0/my/dynamic-entities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_system_dynamic_entities(self, **kwargs):  # noqa: E501
        """Get System Dynamic Entities  # noqa: E501

        <p>Get all System Dynamic Entities</p><p>Authentication is Mandatory</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_system_dynamic_entities(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_system_dynamic_entities_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_system_dynamic_entities_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_system_dynamic_entities_with_http_info(self, **kwargs):  # noqa: E501
        """Get System Dynamic Entities  # noqa: E501

        <p>Get all System Dynamic Entities</p><p>Authentication is Mandatory</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_system_dynamic_entities_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_system_dynamic_entities" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']  # noqa: E501

        return self.api_client.call_api(
            '/obp/v5.1.0/management/system-dynamic-entities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_bank_level_dynamic_entity(self, body, dynamic_entity_id, bank_id, **kwargs):  # noqa: E501
        """Update Bank Level Dynamic Entity  # noqa: E501

        <p>Update a Bank Level DynamicEntity.</p><p>Authentication is Mandatory</p><p>Update one DynamicEntity, after update finished, the corresponding CRUD endpoints will be changed.</p><p>The following field types are as supported:<br />[number, integer, boolean, string, DATE_WITH_DAY, reference]</p><p>DATE_WITH_DAY format: yyyy-MM-dd</p><p>Reference types are like foreign keys and composite foreign keys are supported. The value you need to supply as the (composite) foreign key is a UUID (or several UUIDs in the case of a composite key) that match value in another Entity..<br />The following list shows all the possible reference types in the system with corresponding examples values so you can see how to construct each reference type value.</p><pre><code>&quot;someField0&quot;: {    &quot;type&quot;: &quot;reference:Bank&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField1&quot;: {    &quot;type&quot;: &quot;reference:Consumer&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField2&quot;: {    &quot;type&quot;: &quot;reference:Customer&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField3&quot;: {    &quot;type&quot;: &quot;reference:MethodRouting&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField4&quot;: {    &quot;type&quot;: &quot;reference:DynamicEntity&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField5&quot;: {    &quot;type&quot;: &quot;reference:TransactionRequest&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField6&quot;: {    &quot;type&quot;: &quot;reference:ProductAttribute&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField7&quot;: {    &quot;type&quot;: &quot;reference:AccountAttribute&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField8&quot;: {    &quot;type&quot;: &quot;reference:TransactionAttribute&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField9&quot;: {    &quot;type&quot;: &quot;reference:CustomerAttribute&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField10&quot;: {    &quot;type&quot;: &quot;reference:AccountApplication&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField11&quot;: {    &quot;type&quot;: &quot;reference:CardAttribute&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField12&quot;: {    &quot;type&quot;: &quot;reference:Counterparty&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField13&quot;: {    &quot;type&quot;: &quot;reference:Branch:bankId&amp;branchId&quot;,    &quot;example&quot;: &quot;bankId=8d252982-1ac4-42e8-af47-d3d6feb12516&amp;branchId=3fff0da0-9cec-4341-b720-52c218004ab3&quot;}&quot;someField14&quot;: {    &quot;type&quot;: &quot;reference:Atm:bankId&amp;atmId&quot;,    &quot;example&quot;: &quot;bankId=8d252982-1ac4-42e8-af47-d3d6feb12516&amp;atmId=3fff0da0-9cec-4341-b720-52c218004ab3&quot;}&quot;someField15&quot;: {    &quot;type&quot;: &quot;reference:BankAccount:bankId&amp;accountId&quot;,    &quot;example&quot;: &quot;bankId=8d252982-1ac4-42e8-af47-d3d6feb12516&amp;accountId=3fff0da0-9cec-4341-b720-52c218004ab3&quot;}&quot;someField16&quot;: {    &quot;type&quot;: &quot;reference:Product:bankId&amp;productCode&quot;,    &quot;example&quot;: &quot;bankId=8d252982-1ac4-42e8-af47-d3d6feb12516&amp;productCode=3fff0da0-9cec-4341-b720-52c218004ab3&quot;}&quot;someField17&quot;: {    &quot;type&quot;: &quot;reference:PhysicalCard:bankId&amp;cardId&quot;,    &quot;example&quot;: &quot;bankId=8d252982-1ac4-42e8-af47-d3d6feb12516&amp;cardId=3fff0da0-9cec-4341-b720-52c218004ab3&quot;}&quot;someField18&quot;: {    &quot;type&quot;: &quot;reference:Transaction:bankId&amp;accountId&amp;transactionId&quot;,    &quot;example&quot;: &quot;bankId=8d252982-1ac4-42e8-af47-d3d6feb12516&amp;accountId=3fff0da0-9cec-4341-b720-52c218004ab3&amp;transactionId=11523e15-0a5e-44a1-b0ba-42e5d6a8e2bf&quot;}&quot;someField19&quot;: {    &quot;type&quot;: &quot;reference:Counterparty:bankId&amp;accountId&amp;counterpartyId&quot;,    &quot;example&quot;: &quot;bankId=8d252982-1ac4-42e8-af47-d3d6feb12516&amp;accountId=3fff0da0-9cec-4341-b720-52c218004ab3&amp;counterpartyId=11523e15-0a5e-44a1-b0ba-42e5d6a8e2bf&quot;}</code></pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_bank_level_dynamic_entity(body, dynamic_entity_id, bank_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DynamicEntityFooBar body: DynamicEntityFooBar object that needs to be added. (required)
        :param str dynamic_entity_id: the dynamic entity id  (required)
        :param str bank_id: The bank id (required)
        :return: DynamicEntityFooBar
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_bank_level_dynamic_entity_with_http_info(body, dynamic_entity_id, bank_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_bank_level_dynamic_entity_with_http_info(body, dynamic_entity_id, bank_id, **kwargs)  # noqa: E501
            return data

    def update_bank_level_dynamic_entity_with_http_info(self, body, dynamic_entity_id, bank_id, **kwargs):  # noqa: E501
        """Update Bank Level Dynamic Entity  # noqa: E501

        <p>Update a Bank Level DynamicEntity.</p><p>Authentication is Mandatory</p><p>Update one DynamicEntity, after update finished, the corresponding CRUD endpoints will be changed.</p><p>The following field types are as supported:<br />[number, integer, boolean, string, DATE_WITH_DAY, reference]</p><p>DATE_WITH_DAY format: yyyy-MM-dd</p><p>Reference types are like foreign keys and composite foreign keys are supported. The value you need to supply as the (composite) foreign key is a UUID (or several UUIDs in the case of a composite key) that match value in another Entity..<br />The following list shows all the possible reference types in the system with corresponding examples values so you can see how to construct each reference type value.</p><pre><code>&quot;someField0&quot;: {    &quot;type&quot;: &quot;reference:Bank&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField1&quot;: {    &quot;type&quot;: &quot;reference:Consumer&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField2&quot;: {    &quot;type&quot;: &quot;reference:Customer&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField3&quot;: {    &quot;type&quot;: &quot;reference:MethodRouting&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField4&quot;: {    &quot;type&quot;: &quot;reference:DynamicEntity&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField5&quot;: {    &quot;type&quot;: &quot;reference:TransactionRequest&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField6&quot;: {    &quot;type&quot;: &quot;reference:ProductAttribute&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField7&quot;: {    &quot;type&quot;: &quot;reference:AccountAttribute&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField8&quot;: {    &quot;type&quot;: &quot;reference:TransactionAttribute&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField9&quot;: {    &quot;type&quot;: &quot;reference:CustomerAttribute&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField10&quot;: {    &quot;type&quot;: &quot;reference:AccountApplication&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField11&quot;: {    &quot;type&quot;: &quot;reference:CardAttribute&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField12&quot;: {    &quot;type&quot;: &quot;reference:Counterparty&quot;,    &quot;example&quot;: &quot;8d252982-1ac4-42e8-af47-d3d6feb12516&quot;}&quot;someField13&quot;: {    &quot;type&quot;: &quot;reference:Branch:bankId&amp;branchId&quot;,    &quot;example&quot;: &quot;bankId=8d252982-1ac4-42e8-af47-d3d6feb12516&amp;branchId=3fff0da0-9cec-4341-b720-52c218004ab3&quot;}&quot;someField14&quot;: {    &quot;type&quot;: &quot;reference:Atm:bankId&amp;atmId&quot;,    &quot;example&quot;: &quot;bankId=8d252982-1ac4-42e8-af47-d3d6feb12516&amp;atmId=3fff0da0-9cec-4341-b720-52c218004ab3&quot;}&quot;someField15&quot;: {    &quot;type&quot;: &quot;reference:BankAccount:bankId&amp;accountId&quot;,    &quot;example&quot;: &quot;bankId=8d252982-1ac4-42e8-af47-d3d6feb12516&amp;accountId=3fff0da0-9cec-4341-b720-52c218004ab3&quot;}&quot;someField16&quot;: {    &quot;type&quot;: &quot;reference:Product:bankId&amp;productCode&quot;,    &quot;example&quot;: &quot;bankId=8d252982-1ac4-42e8-af47-d3d6feb12516&amp;productCode=3fff0da0-9cec-4341-b720-52c218004ab3&quot;}&quot;someField17&quot;: {    &quot;type&quot;: &quot;reference:PhysicalCard:bankId&amp;cardId&quot;,    &quot;example&quot;: &quot;bankId=8d252982-1ac4-42e8-af47-d3d6feb12516&amp;cardId=3fff0da0-9cec-4341-b720-52c218004ab3&quot;}&quot;someField18&quot;: {    &quot;type&quot;: &quot;reference:Transaction:bankId&amp;accountId&amp;transactionId&quot;,    &quot;example&quot;: &quot;bankId=8d252982-1ac4-42e8-af47-d3d6feb12516&amp;accountId=3fff0da0-9cec-4341-b720-52c218004ab3&amp;transactionId=11523e15-0a5e-44a1-b0ba-42e5d6a8e2bf&quot;}&quot;someField19&quot;: {    &quot;type&quot;: &quot;reference:Counterparty:bankId&amp;accountId&amp;counterpartyId&quot;,    &quot;example&quot;: &quot;bankId=8d252982-1ac4-42e8-af47-d3d6feb12516&amp;accountId=3fff0da0-9cec-4341-b720-52c218004ab3&amp;counterpartyId=11523e15-0a5e-44a1-b0ba-42e5d6a8e2bf&quot;}</code></pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_bank_level_dynamic_entity_with_http_info(body, dynamic_entity_id, bank_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DynamicEntityFooBar body: DynamicEntityFooBar object that needs to be added. (required)
        :param str dynamic_entity_id: the dynamic entity id  (required)
        :param str bank_id: The bank id (required)
        :return: DynamicEntityFooBar
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dynamic_entity_id', 'bank_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_bank_level_dynamic_entity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_bank_level_dynamic_entity`")  # noqa: E501
        # verify the required parameter 'dynamic_entity_id' is set
        if self.api_client.client_side_validation and ('dynamic_entity_id' not in params or
                                                       params['dynamic_entity_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dynamic_entity_id` when calling `update_bank_level_dynamic_entity`")  # noqa: E501
        # verify the required parameter 'bank_id' is set
        if self.api_client.client_side_validation and ('bank_id' not in params or
                                                       params['bank_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bank_id` when calling `update_bank_level_dynamic_entity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dynamic_entity_id' in params:
            path_params['DYNAMIC_ENTITY_ID'] = params['dynamic_entity_id']  # noqa: E501
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']  # noqa: E501

        return self.api_client.call_api(
            '/obp/v5.1.0/management/banks/{BANK_ID}/dynamic-entities/{DYNAMIC_ENTITY_ID}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DynamicEntityFooBar',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_my_dynamic_entity(self, body, dynamic_entity_id, **kwargs):  # noqa: E501
        """Update My Dynamic Entity  # noqa: E501

        <p>Update my DynamicEntity.</p><p>Authentication is Mandatory</p><p>Update one of my DynamicEntity, after update finished, the corresponding CRUD endpoints will be changed.</p><p>Current support filed types as follow:<br />[number, integer, boolean, string, DATE_WITH_DAY, reference]</p><p>DATE_WITH_DAY format: yyyy-MM-dd</p><p>Reference types are like foreign keys and composite foreign keys are supported. The value you need to supply as the (composite) foreign key is a UUID (or several UUIDs in the case of a composite key) that match value in another Entity..<br />The following list shows all the possible reference types in the system with corresponding examples values so you can see how to construct each reference type value.</p><pre><code>&quot;someField0&quot;: {    &quot;type&quot;: &quot;reference:Bank&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField1&quot;: {    &quot;type&quot;: &quot;reference:Consumer&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField2&quot;: {    &quot;type&quot;: &quot;reference:Customer&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField3&quot;: {    &quot;type&quot;: &quot;reference:MethodRouting&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField4&quot;: {    &quot;type&quot;: &quot;reference:DynamicEntity&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField5&quot;: {    &quot;type&quot;: &quot;reference:TransactionRequest&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField6&quot;: {    &quot;type&quot;: &quot;reference:ProductAttribute&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField7&quot;: {    &quot;type&quot;: &quot;reference:AccountAttribute&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField8&quot;: {    &quot;type&quot;: &quot;reference:TransactionAttribute&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField9&quot;: {    &quot;type&quot;: &quot;reference:CustomerAttribute&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField10&quot;: {    &quot;type&quot;: &quot;reference:AccountApplication&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField11&quot;: {    &quot;type&quot;: &quot;reference:CardAttribute&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField12&quot;: {    &quot;type&quot;: &quot;reference:Counterparty&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField13&quot;: {    &quot;type&quot;: &quot;reference:Branch:bankId&amp;branchId&quot;,    &quot;example&quot;: &quot;bankId=9128dc63-f56f-4f2c-a26c-8a467f55c23d&amp;branchId=23cf9a57-1e43-4a6f-9d31-59f208d983f8&quot;}&quot;someField14&quot;: {    &quot;type&quot;: &quot;reference:Atm:bankId&amp;atmId&quot;,    &quot;example&quot;: &quot;bankId=9128dc63-f56f-4f2c-a26c-8a467f55c23d&amp;atmId=23cf9a57-1e43-4a6f-9d31-59f208d983f8&quot;}&quot;someField15&quot;: {    &quot;type&quot;: &quot;reference:BankAccount:bankId&amp;accountId&quot;,    &quot;example&quot;: &quot;bankId=9128dc63-f56f-4f2c-a26c-8a467f55c23d&amp;accountId=23cf9a57-1e43-4a6f-9d31-59f208d983f8&quot;}&quot;someField16&quot;: {    &quot;type&quot;: &quot;reference:Product:bankId&amp;productCode&quot;,    &quot;example&quot;: &quot;bankId=9128dc63-f56f-4f2c-a26c-8a467f55c23d&amp;productCode=23cf9a57-1e43-4a6f-9d31-59f208d983f8&quot;}&quot;someField17&quot;: {    &quot;type&quot;: &quot;reference:PhysicalCard:bankId&amp;cardId&quot;,    &quot;example&quot;: &quot;bankId=9128dc63-f56f-4f2c-a26c-8a467f55c23d&amp;cardId=23cf9a57-1e43-4a6f-9d31-59f208d983f8&quot;}&quot;someField18&quot;: {    &quot;type&quot;: &quot;reference:Transaction:bankId&amp;accountId&amp;transactionId&quot;,    &quot;example&quot;: &quot;bankId=9128dc63-f56f-4f2c-a26c-8a467f55c23d&amp;accountId=23cf9a57-1e43-4a6f-9d31-59f208d983f8&amp;transactionId=9ceddbfb-18f0-44d8-aede-371fa8152141&quot;}&quot;someField19&quot;: {    &quot;type&quot;: &quot;reference:Counterparty:bankId&amp;accountId&amp;counterpartyId&quot;,    &quot;example&quot;: &quot;bankId=9128dc63-f56f-4f2c-a26c-8a467f55c23d&amp;accountId=23cf9a57-1e43-4a6f-9d31-59f208d983f8&amp;counterpartyId=9ceddbfb-18f0-44d8-aede-371fa8152141&quot;}</code></pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_my_dynamic_entity(body, dynamic_entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DynamicEntityFooBar body: DynamicEntityFooBar object that needs to be added. (required)
        :param str dynamic_entity_id: the dynamic entity id  (required)
        :return: DynamicEntityFooBar
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_my_dynamic_entity_with_http_info(body, dynamic_entity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_my_dynamic_entity_with_http_info(body, dynamic_entity_id, **kwargs)  # noqa: E501
            return data

    def update_my_dynamic_entity_with_http_info(self, body, dynamic_entity_id, **kwargs):  # noqa: E501
        """Update My Dynamic Entity  # noqa: E501

        <p>Update my DynamicEntity.</p><p>Authentication is Mandatory</p><p>Update one of my DynamicEntity, after update finished, the corresponding CRUD endpoints will be changed.</p><p>Current support filed types as follow:<br />[number, integer, boolean, string, DATE_WITH_DAY, reference]</p><p>DATE_WITH_DAY format: yyyy-MM-dd</p><p>Reference types are like foreign keys and composite foreign keys are supported. The value you need to supply as the (composite) foreign key is a UUID (or several UUIDs in the case of a composite key) that match value in another Entity..<br />The following list shows all the possible reference types in the system with corresponding examples values so you can see how to construct each reference type value.</p><pre><code>&quot;someField0&quot;: {    &quot;type&quot;: &quot;reference:Bank&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField1&quot;: {    &quot;type&quot;: &quot;reference:Consumer&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField2&quot;: {    &quot;type&quot;: &quot;reference:Customer&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField3&quot;: {    &quot;type&quot;: &quot;reference:MethodRouting&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField4&quot;: {    &quot;type&quot;: &quot;reference:DynamicEntity&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField5&quot;: {    &quot;type&quot;: &quot;reference:TransactionRequest&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField6&quot;: {    &quot;type&quot;: &quot;reference:ProductAttribute&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField7&quot;: {    &quot;type&quot;: &quot;reference:AccountAttribute&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField8&quot;: {    &quot;type&quot;: &quot;reference:TransactionAttribute&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField9&quot;: {    &quot;type&quot;: &quot;reference:CustomerAttribute&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField10&quot;: {    &quot;type&quot;: &quot;reference:AccountApplication&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField11&quot;: {    &quot;type&quot;: &quot;reference:CardAttribute&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField12&quot;: {    &quot;type&quot;: &quot;reference:Counterparty&quot;,    &quot;example&quot;: &quot;9128dc63-f56f-4f2c-a26c-8a467f55c23d&quot;}&quot;someField13&quot;: {    &quot;type&quot;: &quot;reference:Branch:bankId&amp;branchId&quot;,    &quot;example&quot;: &quot;bankId=9128dc63-f56f-4f2c-a26c-8a467f55c23d&amp;branchId=23cf9a57-1e43-4a6f-9d31-59f208d983f8&quot;}&quot;someField14&quot;: {    &quot;type&quot;: &quot;reference:Atm:bankId&amp;atmId&quot;,    &quot;example&quot;: &quot;bankId=9128dc63-f56f-4f2c-a26c-8a467f55c23d&amp;atmId=23cf9a57-1e43-4a6f-9d31-59f208d983f8&quot;}&quot;someField15&quot;: {    &quot;type&quot;: &quot;reference:BankAccount:bankId&amp;accountId&quot;,    &quot;example&quot;: &quot;bankId=9128dc63-f56f-4f2c-a26c-8a467f55c23d&amp;accountId=23cf9a57-1e43-4a6f-9d31-59f208d983f8&quot;}&quot;someField16&quot;: {    &quot;type&quot;: &quot;reference:Product:bankId&amp;productCode&quot;,    &quot;example&quot;: &quot;bankId=9128dc63-f56f-4f2c-a26c-8a467f55c23d&amp;productCode=23cf9a57-1e43-4a6f-9d31-59f208d983f8&quot;}&quot;someField17&quot;: {    &quot;type&quot;: &quot;reference:PhysicalCard:bankId&amp;cardId&quot;,    &quot;example&quot;: &quot;bankId=9128dc63-f56f-4f2c-a26c-8a467f55c23d&amp;cardId=23cf9a57-1e43-4a6f-9d31-59f208d983f8&quot;}&quot;someField18&quot;: {    &quot;type&quot;: &quot;reference:Transaction:bankId&amp;accountId&amp;transactionId&quot;,    &quot;example&quot;: &quot;bankId=9128dc63-f56f-4f2c-a26c-8a467f55c23d&amp;accountId=23cf9a57-1e43-4a6f-9d31-59f208d983f8&amp;transactionId=9ceddbfb-18f0-44d8-aede-371fa8152141&quot;}&quot;someField19&quot;: {    &quot;type&quot;: &quot;reference:Counterparty:bankId&amp;accountId&amp;counterpartyId&quot;,    &quot;example&quot;: &quot;bankId=9128dc63-f56f-4f2c-a26c-8a467f55c23d&amp;accountId=23cf9a57-1e43-4a6f-9d31-59f208d983f8&amp;counterpartyId=9ceddbfb-18f0-44d8-aede-371fa8152141&quot;}</code></pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_my_dynamic_entity_with_http_info(body, dynamic_entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DynamicEntityFooBar body: DynamicEntityFooBar object that needs to be added. (required)
        :param str dynamic_entity_id: the dynamic entity id  (required)
        :return: DynamicEntityFooBar
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dynamic_entity_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_my_dynamic_entity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_my_dynamic_entity`")  # noqa: E501
        # verify the required parameter 'dynamic_entity_id' is set
        if self.api_client.client_side_validation and ('dynamic_entity_id' not in params or
                                                       params['dynamic_entity_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dynamic_entity_id` when calling `update_my_dynamic_entity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dynamic_entity_id' in params:
            path_params['DYNAMIC_ENTITY_ID'] = params['dynamic_entity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']  # noqa: E501

        return self.api_client.call_api(
            '/obp/v5.1.0/my/dynamic-entities/{DYNAMIC_ENTITY_ID}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DynamicEntityFooBar',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_system_dynamic_entity(self, body, dynamic_entity_id, **kwargs):  # noqa: E501
        """Update System Level Dynamic Entity  # noqa: E501

        <p>Update a System Level Dynamic Entity.</p><p>Authentication is Mandatory</p><p>Update one DynamicEntity, after update finished, the corresponding CRUD endpoints will be changed.</p><p>The following field types are as supported:<br />[number, integer, boolean, string, DATE_WITH_DAY, reference]</p><p>DATE_WITH_DAY format: yyyy-MM-dd</p><p>Reference types are like foreign keys and composite foreign keys are supported. The value you need to supply as the (composite) foreign key is a UUID (or several UUIDs in the case of a composite key) that match value in another Entity..<br />The following list shows all the possible reference types in the system with corresponding examples values so you can see how to construct each reference type value.</p><pre><code>&quot;someField0&quot;: {    &quot;type&quot;: &quot;reference:Bank&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField1&quot;: {    &quot;type&quot;: &quot;reference:Consumer&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField2&quot;: {    &quot;type&quot;: &quot;reference:Customer&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField3&quot;: {    &quot;type&quot;: &quot;reference:MethodRouting&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField4&quot;: {    &quot;type&quot;: &quot;reference:DynamicEntity&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField5&quot;: {    &quot;type&quot;: &quot;reference:TransactionRequest&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField6&quot;: {    &quot;type&quot;: &quot;reference:ProductAttribute&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField7&quot;: {    &quot;type&quot;: &quot;reference:AccountAttribute&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField8&quot;: {    &quot;type&quot;: &quot;reference:TransactionAttribute&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField9&quot;: {    &quot;type&quot;: &quot;reference:CustomerAttribute&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField10&quot;: {    &quot;type&quot;: &quot;reference:AccountApplication&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField11&quot;: {    &quot;type&quot;: &quot;reference:CardAttribute&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField12&quot;: {    &quot;type&quot;: &quot;reference:Counterparty&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField13&quot;: {    &quot;type&quot;: &quot;reference:Branch:bankId&amp;branchId&quot;,    &quot;example&quot;: &quot;bankId=df592902-169f-446e-be0d-a8131489d501&amp;branchId=3c7cd6e9-d8a5-4616-b578-1dbdaf56a838&quot;}&quot;someField14&quot;: {    &quot;type&quot;: &quot;reference:Atm:bankId&amp;atmId&quot;,    &quot;example&quot;: &quot;bankId=df592902-169f-446e-be0d-a8131489d501&amp;atmId=3c7cd6e9-d8a5-4616-b578-1dbdaf56a838&quot;}&quot;someField15&quot;: {    &quot;type&quot;: &quot;reference:BankAccount:bankId&amp;accountId&quot;,    &quot;example&quot;: &quot;bankId=df592902-169f-446e-be0d-a8131489d501&amp;accountId=3c7cd6e9-d8a5-4616-b578-1dbdaf56a838&quot;}&quot;someField16&quot;: {    &quot;type&quot;: &quot;reference:Product:bankId&amp;productCode&quot;,    &quot;example&quot;: &quot;bankId=df592902-169f-446e-be0d-a8131489d501&amp;productCode=3c7cd6e9-d8a5-4616-b578-1dbdaf56a838&quot;}&quot;someField17&quot;: {    &quot;type&quot;: &quot;reference:PhysicalCard:bankId&amp;cardId&quot;,    &quot;example&quot;: &quot;bankId=df592902-169f-446e-be0d-a8131489d501&amp;cardId=3c7cd6e9-d8a5-4616-b578-1dbdaf56a838&quot;}&quot;someField18&quot;: {    &quot;type&quot;: &quot;reference:Transaction:bankId&amp;accountId&amp;transactionId&quot;,    &quot;example&quot;: &quot;bankId=df592902-169f-446e-be0d-a8131489d501&amp;accountId=3c7cd6e9-d8a5-4616-b578-1dbdaf56a838&amp;transactionId=b482e98b-4fd2-439a-a844-c828343945fd&quot;}&quot;someField19&quot;: {    &quot;type&quot;: &quot;reference:Counterparty:bankId&amp;accountId&amp;counterpartyId&quot;,    &quot;example&quot;: &quot;bankId=df592902-169f-446e-be0d-a8131489d501&amp;accountId=3c7cd6e9-d8a5-4616-b578-1dbdaf56a838&amp;counterpartyId=b482e98b-4fd2-439a-a844-c828343945fd&quot;}</code></pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_system_dynamic_entity(body, dynamic_entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DynamicEntityFooBar body: DynamicEntityFooBar object that needs to be added. (required)
        :param str dynamic_entity_id: the dynamic entity id  (required)
        :return: DynamicEntityFooBar
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_system_dynamic_entity_with_http_info(body, dynamic_entity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_system_dynamic_entity_with_http_info(body, dynamic_entity_id, **kwargs)  # noqa: E501
            return data

    def update_system_dynamic_entity_with_http_info(self, body, dynamic_entity_id, **kwargs):  # noqa: E501
        """Update System Level Dynamic Entity  # noqa: E501

        <p>Update a System Level Dynamic Entity.</p><p>Authentication is Mandatory</p><p>Update one DynamicEntity, after update finished, the corresponding CRUD endpoints will be changed.</p><p>The following field types are as supported:<br />[number, integer, boolean, string, DATE_WITH_DAY, reference]</p><p>DATE_WITH_DAY format: yyyy-MM-dd</p><p>Reference types are like foreign keys and composite foreign keys are supported. The value you need to supply as the (composite) foreign key is a UUID (or several UUIDs in the case of a composite key) that match value in another Entity..<br />The following list shows all the possible reference types in the system with corresponding examples values so you can see how to construct each reference type value.</p><pre><code>&quot;someField0&quot;: {    &quot;type&quot;: &quot;reference:Bank&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField1&quot;: {    &quot;type&quot;: &quot;reference:Consumer&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField2&quot;: {    &quot;type&quot;: &quot;reference:Customer&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField3&quot;: {    &quot;type&quot;: &quot;reference:MethodRouting&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField4&quot;: {    &quot;type&quot;: &quot;reference:DynamicEntity&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField5&quot;: {    &quot;type&quot;: &quot;reference:TransactionRequest&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField6&quot;: {    &quot;type&quot;: &quot;reference:ProductAttribute&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField7&quot;: {    &quot;type&quot;: &quot;reference:AccountAttribute&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField8&quot;: {    &quot;type&quot;: &quot;reference:TransactionAttribute&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField9&quot;: {    &quot;type&quot;: &quot;reference:CustomerAttribute&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField10&quot;: {    &quot;type&quot;: &quot;reference:AccountApplication&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField11&quot;: {    &quot;type&quot;: &quot;reference:CardAttribute&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField12&quot;: {    &quot;type&quot;: &quot;reference:Counterparty&quot;,    &quot;example&quot;: &quot;df592902-169f-446e-be0d-a8131489d501&quot;}&quot;someField13&quot;: {    &quot;type&quot;: &quot;reference:Branch:bankId&amp;branchId&quot;,    &quot;example&quot;: &quot;bankId=df592902-169f-446e-be0d-a8131489d501&amp;branchId=3c7cd6e9-d8a5-4616-b578-1dbdaf56a838&quot;}&quot;someField14&quot;: {    &quot;type&quot;: &quot;reference:Atm:bankId&amp;atmId&quot;,    &quot;example&quot;: &quot;bankId=df592902-169f-446e-be0d-a8131489d501&amp;atmId=3c7cd6e9-d8a5-4616-b578-1dbdaf56a838&quot;}&quot;someField15&quot;: {    &quot;type&quot;: &quot;reference:BankAccount:bankId&amp;accountId&quot;,    &quot;example&quot;: &quot;bankId=df592902-169f-446e-be0d-a8131489d501&amp;accountId=3c7cd6e9-d8a5-4616-b578-1dbdaf56a838&quot;}&quot;someField16&quot;: {    &quot;type&quot;: &quot;reference:Product:bankId&amp;productCode&quot;,    &quot;example&quot;: &quot;bankId=df592902-169f-446e-be0d-a8131489d501&amp;productCode=3c7cd6e9-d8a5-4616-b578-1dbdaf56a838&quot;}&quot;someField17&quot;: {    &quot;type&quot;: &quot;reference:PhysicalCard:bankId&amp;cardId&quot;,    &quot;example&quot;: &quot;bankId=df592902-169f-446e-be0d-a8131489d501&amp;cardId=3c7cd6e9-d8a5-4616-b578-1dbdaf56a838&quot;}&quot;someField18&quot;: {    &quot;type&quot;: &quot;reference:Transaction:bankId&amp;accountId&amp;transactionId&quot;,    &quot;example&quot;: &quot;bankId=df592902-169f-446e-be0d-a8131489d501&amp;accountId=3c7cd6e9-d8a5-4616-b578-1dbdaf56a838&amp;transactionId=b482e98b-4fd2-439a-a844-c828343945fd&quot;}&quot;someField19&quot;: {    &quot;type&quot;: &quot;reference:Counterparty:bankId&amp;accountId&amp;counterpartyId&quot;,    &quot;example&quot;: &quot;bankId=df592902-169f-446e-be0d-a8131489d501&amp;accountId=3c7cd6e9-d8a5-4616-b578-1dbdaf56a838&amp;counterpartyId=b482e98b-4fd2-439a-a844-c828343945fd&quot;}</code></pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_system_dynamic_entity_with_http_info(body, dynamic_entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DynamicEntityFooBar body: DynamicEntityFooBar object that needs to be added. (required)
        :param str dynamic_entity_id: the dynamic entity id  (required)
        :return: DynamicEntityFooBar
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dynamic_entity_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_system_dynamic_entity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_system_dynamic_entity`")  # noqa: E501
        # verify the required parameter 'dynamic_entity_id' is set
        if self.api_client.client_side_validation and ('dynamic_entity_id' not in params or
                                                       params['dynamic_entity_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dynamic_entity_id` when calling `update_system_dynamic_entity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dynamic_entity_id' in params:
            path_params['DYNAMIC_ENTITY_ID'] = params['dynamic_entity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']  # noqa: E501

        return self.api_client.call_api(
            '/obp/v5.1.0/management/system-dynamic-entities/{DYNAMIC_ENTITY_ID}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DynamicEntityFooBar',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
