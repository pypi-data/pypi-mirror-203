# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: flow/execution/execution.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .. import entities as _entities__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class PingRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class PingResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetAccountAtBlockIdRequest(betterproto.Message):
    block_id: bytes = betterproto.bytes_field(1)
    address: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class GetAccountAtBlockIdResponse(betterproto.Message):
    account: "_entities__.Account" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ExecuteScriptAtBlockIdRequest(betterproto.Message):
    block_id: bytes = betterproto.bytes_field(1)
    script: bytes = betterproto.bytes_field(2)
    arguments: List[bytes] = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class ExecuteScriptAtBlockIdResponse(betterproto.Message):
    value: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class GetEventsForBlockIDsResponse(betterproto.Message):
    results: List["GetEventsForBlockIDsResponseResult"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetEventsForBlockIDsResponseResult(betterproto.Message):
    block_id: bytes = betterproto.bytes_field(1)
    block_height: int = betterproto.uint64_field(2)
    events: List["_entities__.Event"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetEventsForBlockIDsRequest(betterproto.Message):
    type: str = betterproto.string_field(1)
    block_ids: List[bytes] = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class GetTransactionResultRequest(betterproto.Message):
    block_id: bytes = betterproto.bytes_field(1)
    transaction_id: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class GetTransactionResultResponse(betterproto.Message):
    status_code: int = betterproto.uint32_field(1)
    error_message: str = betterproto.string_field(2)
    events: List["_entities__.Event"] = betterproto.message_field(3)


class ExecutionApiStub(betterproto.ServiceStub):
    async def ping(
        self,
        ping_request: "PingRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PingResponse":
        return await self._unary_unary(
            "/flow.execution.ExecutionAPI/Ping",
            ping_request,
            PingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_account_at_block_id(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetAccountAtBlockIdResponse":
        return await self._unary_unary(
            "/flow.execution.ExecutionAPI/GetAccountAtBlockID",
            get_account_at_block_id_request,
            GetAccountAtBlockIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def execute_script_at_block_id(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ExecuteScriptAtBlockIdResponse":
        return await self._unary_unary(
            "/flow.execution.ExecutionAPI/ExecuteScriptAtBlockID",
            execute_script_at_block_id_request,
            ExecuteScriptAtBlockIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_events_for_block_i_ds(
        self,
        get_events_for_block_i_ds_request: "GetEventsForBlockIDsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetEventsForBlockIDsResponse":
        return await self._unary_unary(
            "/flow.execution.ExecutionAPI/GetEventsForBlockIDs",
            get_events_for_block_i_ds_request,
            GetEventsForBlockIDsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_transaction_result(
        self,
        get_transaction_result_request: "GetTransactionResultRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetTransactionResultResponse":
        return await self._unary_unary(
            "/flow.execution.ExecutionAPI/GetTransactionResult",
            get_transaction_result_request,
            GetTransactionResultResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ExecutionApiBase(ServiceBase):
    async def ping(self, ping_request: "PingRequest") -> "PingResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_account_at_block_id(self) -> "GetAccountAtBlockIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def execute_script_at_block_id(self) -> "ExecuteScriptAtBlockIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_events_for_block_i_ds(
        self, get_events_for_block_i_ds_request: "GetEventsForBlockIDsRequest"
    ) -> "GetEventsForBlockIDsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_transaction_result(
        self, get_transaction_result_request: "GetTransactionResultRequest"
    ) -> "GetTransactionResultResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_ping(
        self, stream: "grpclib.server.Stream[PingRequest, PingResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.ping(request)
        await stream.send_message(response)

    async def __rpc_get_account_at_block_id(
        self,
        stream: "grpclib.server.Stream[GetAccountAtBlockIdRequest, GetAccountAtBlockIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_account_at_block_id(request)
        await stream.send_message(response)

    async def __rpc_execute_script_at_block_id(
        self,
        stream: "grpclib.server.Stream[ExecuteScriptAtBlockIdRequest, ExecuteScriptAtBlockIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.execute_script_at_block_id(request)
        await stream.send_message(response)

    async def __rpc_get_events_for_block_i_ds(
        self,
        stream: "grpclib.server.Stream[GetEventsForBlockIDsRequest, GetEventsForBlockIDsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_events_for_block_i_ds(request)
        await stream.send_message(response)

    async def __rpc_get_transaction_result(
        self,
        stream: "grpclib.server.Stream[GetTransactionResultRequest, GetTransactionResultResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_transaction_result(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/flow.execution.ExecutionAPI/Ping": grpclib.const.Handler(
                self.__rpc_ping,
                grpclib.const.Cardinality.UNARY_UNARY,
                PingRequest,
                PingResponse,
            ),
            "/flow.execution.ExecutionAPI/GetAccountAtBlockID": grpclib.const.Handler(
                self.__rpc_get_account_at_block_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAccountAtBlockIdRequest,
                GetAccountAtBlockIdResponse,
            ),
            "/flow.execution.ExecutionAPI/ExecuteScriptAtBlockID": grpclib.const.Handler(
                self.__rpc_execute_script_at_block_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExecuteScriptAtBlockIdRequest,
                ExecuteScriptAtBlockIdResponse,
            ),
            "/flow.execution.ExecutionAPI/GetEventsForBlockIDs": grpclib.const.Handler(
                self.__rpc_get_events_for_block_i_ds,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetEventsForBlockIDsRequest,
                GetEventsForBlockIDsResponse,
            ),
            "/flow.execution.ExecutionAPI/GetTransactionResult": grpclib.const.Handler(
                self.__rpc_get_transaction_result,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTransactionResultRequest,
                GetTransactionResultResponse,
            ),
        }
