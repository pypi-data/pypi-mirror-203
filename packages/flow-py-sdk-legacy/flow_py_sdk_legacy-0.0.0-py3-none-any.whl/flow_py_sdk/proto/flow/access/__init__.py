# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: flow/access/access.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .. import entities as _entities__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class PingRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class PingResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetLatestBlockHeaderRequest(betterproto.Message):
    is_sealed: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class GetBlockHeaderByIdRequest(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class GetBlockHeaderByHeightRequest(betterproto.Message):
    height: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class BlockHeaderResponse(betterproto.Message):
    block: "_entities__.BlockHeader" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetLatestBlockRequest(betterproto.Message):
    is_sealed: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class GetBlockByIdRequest(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class GetBlockByHeightRequest(betterproto.Message):
    height: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class BlockResponse(betterproto.Message):
    block: "_entities__.Block" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetCollectionByIdRequest(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class CollectionResponse(betterproto.Message):
    collection: "_entities__.Collection" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SendTransactionRequest(betterproto.Message):
    transaction: "_entities__.Transaction" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SendTransactionResponse(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class GetTransactionRequest(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class TransactionResponse(betterproto.Message):
    transaction: "_entities__.Transaction" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TransactionResultResponse(betterproto.Message):
    status: "_entities__.TransactionStatus" = betterproto.enum_field(1)
    status_code: int = betterproto.uint32_field(2)
    error_message: str = betterproto.string_field(3)
    events: List["_entities__.Event"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class GetAccountRequest(betterproto.Message):
    address: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class GetAccountResponse(betterproto.Message):
    account: "_entities__.Account" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetAccountAtLatestBlockRequest(betterproto.Message):
    address: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class AccountResponse(betterproto.Message):
    account: "_entities__.Account" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetAccountAtBlockHeightRequest(betterproto.Message):
    address: bytes = betterproto.bytes_field(1)
    block_height: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class ExecuteScriptAtLatestBlockRequest(betterproto.Message):
    script: bytes = betterproto.bytes_field(1)
    arguments: List[bytes] = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class ExecuteScriptAtBlockIdRequest(betterproto.Message):
    block_id: bytes = betterproto.bytes_field(1)
    script: bytes = betterproto.bytes_field(2)
    arguments: List[bytes] = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class ExecuteScriptAtBlockHeightRequest(betterproto.Message):
    block_height: int = betterproto.uint64_field(1)
    script: bytes = betterproto.bytes_field(2)
    arguments: List[bytes] = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class ExecuteScriptResponse(betterproto.Message):
    value: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class GetEventsForHeightRangeRequest(betterproto.Message):
    type: str = betterproto.string_field(1)
    start_height: int = betterproto.uint64_field(2)
    end_height: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class GetEventsForBlockIDsRequest(betterproto.Message):
    type: str = betterproto.string_field(1)
    block_ids: List[bytes] = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class EventsResponse(betterproto.Message):
    results: List["EventsResponseResult"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class EventsResponseResult(betterproto.Message):
    block_id: bytes = betterproto.bytes_field(1)
    block_height: int = betterproto.uint64_field(2)
    events: List["_entities__.Event"] = betterproto.message_field(3)
    block_timestamp: datetime = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class GetNetworkParametersRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetNetworkParametersResponse(betterproto.Message):
    chain_id: str = betterproto.string_field(1)


class AccessApiStub(betterproto.ServiceStub):
    async def ping(
        self,
        ping_request: "PingRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PingResponse":
        return await self._unary_unary(
            "/flow.access.AccessAPI/Ping",
            ping_request,
            PingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_block_header(
        self,
        get_latest_block_header_request: "GetLatestBlockHeaderRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "BlockHeaderResponse":
        return await self._unary_unary(
            "/flow.access.AccessAPI/GetLatestBlockHeader",
            get_latest_block_header_request,
            BlockHeaderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_block_header_by_id(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "BlockHeaderResponse":
        return await self._unary_unary(
            "/flow.access.AccessAPI/GetBlockHeaderByID",
            get_block_header_by_id_request,
            BlockHeaderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_block_header_by_height(
        self,
        get_block_header_by_height_request: "GetBlockHeaderByHeightRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "BlockHeaderResponse":
        return await self._unary_unary(
            "/flow.access.AccessAPI/GetBlockHeaderByHeight",
            get_block_header_by_height_request,
            BlockHeaderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_block(
        self,
        get_latest_block_request: "GetLatestBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "BlockResponse":
        return await self._unary_unary(
            "/flow.access.AccessAPI/GetLatestBlock",
            get_latest_block_request,
            BlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_block_by_id(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "BlockResponse":
        return await self._unary_unary(
            "/flow.access.AccessAPI/GetBlockByID",
            get_block_by_id_request,
            BlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_block_by_height(
        self,
        get_block_by_height_request: "GetBlockByHeightRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "BlockResponse":
        return await self._unary_unary(
            "/flow.access.AccessAPI/GetBlockByHeight",
            get_block_by_height_request,
            BlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_collection_by_id(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CollectionResponse":
        return await self._unary_unary(
            "/flow.access.AccessAPI/GetCollectionByID",
            get_collection_by_id_request,
            CollectionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def send_transaction(
        self,
        send_transaction_request: "SendTransactionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SendTransactionResponse":
        return await self._unary_unary(
            "/flow.access.AccessAPI/SendTransaction",
            send_transaction_request,
            SendTransactionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_transaction(
        self,
        get_transaction_request: "GetTransactionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "TransactionResponse":
        return await self._unary_unary(
            "/flow.access.AccessAPI/GetTransaction",
            get_transaction_request,
            TransactionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_transaction_result(
        self,
        get_transaction_request: "GetTransactionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "TransactionResultResponse":
        return await self._unary_unary(
            "/flow.access.AccessAPI/GetTransactionResult",
            get_transaction_request,
            TransactionResultResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_account(
        self,
        get_account_request: "GetAccountRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetAccountResponse":
        return await self._unary_unary(
            "/flow.access.AccessAPI/GetAccount",
            get_account_request,
            GetAccountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_account_at_latest_block(
        self,
        get_account_at_latest_block_request: "GetAccountAtLatestBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AccountResponse":
        return await self._unary_unary(
            "/flow.access.AccessAPI/GetAccountAtLatestBlock",
            get_account_at_latest_block_request,
            AccountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_account_at_block_height(
        self,
        get_account_at_block_height_request: "GetAccountAtBlockHeightRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AccountResponse":
        return await self._unary_unary(
            "/flow.access.AccessAPI/GetAccountAtBlockHeight",
            get_account_at_block_height_request,
            AccountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def execute_script_at_latest_block(
        self,
        execute_script_at_latest_block_request: "ExecuteScriptAtLatestBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ExecuteScriptResponse":
        return await self._unary_unary(
            "/flow.access.AccessAPI/ExecuteScriptAtLatestBlock",
            execute_script_at_latest_block_request,
            ExecuteScriptResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def execute_script_at_block_id(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ExecuteScriptResponse":
        return await self._unary_unary(
            "/flow.access.AccessAPI/ExecuteScriptAtBlockID",
            execute_script_at_block_id_request,
            ExecuteScriptResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def execute_script_at_block_height(
        self,
        execute_script_at_block_height_request: "ExecuteScriptAtBlockHeightRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ExecuteScriptResponse":
        return await self._unary_unary(
            "/flow.access.AccessAPI/ExecuteScriptAtBlockHeight",
            execute_script_at_block_height_request,
            ExecuteScriptResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_events_for_height_range(
        self,
        get_events_for_height_range_request: "GetEventsForHeightRangeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "EventsResponse":
        return await self._unary_unary(
            "/flow.access.AccessAPI/GetEventsForHeightRange",
            get_events_for_height_range_request,
            EventsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_events_for_block_i_ds(
        self,
        get_events_for_block_i_ds_request: "GetEventsForBlockIDsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "EventsResponse":
        return await self._unary_unary(
            "/flow.access.AccessAPI/GetEventsForBlockIDs",
            get_events_for_block_i_ds_request,
            EventsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_network_parameters(
        self,
        get_network_parameters_request: "GetNetworkParametersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetNetworkParametersResponse":
        return await self._unary_unary(
            "/flow.access.AccessAPI/GetNetworkParameters",
            get_network_parameters_request,
            GetNetworkParametersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class AccessApiBase(ServiceBase):
    async def ping(self, ping_request: "PingRequest") -> "PingResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_latest_block_header(
        self, get_latest_block_header_request: "GetLatestBlockHeaderRequest"
    ) -> "BlockHeaderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_block_header_by_id(self) -> "BlockHeaderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_block_header_by_height(
        self, get_block_header_by_height_request: "GetBlockHeaderByHeightRequest"
    ) -> "BlockHeaderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_latest_block(
        self, get_latest_block_request: "GetLatestBlockRequest"
    ) -> "BlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_block_by_id(self) -> "BlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_block_by_height(
        self, get_block_by_height_request: "GetBlockByHeightRequest"
    ) -> "BlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_collection_by_id(self) -> "CollectionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_transaction(
        self, send_transaction_request: "SendTransactionRequest"
    ) -> "SendTransactionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_transaction(
        self, get_transaction_request: "GetTransactionRequest"
    ) -> "TransactionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_transaction_result(
        self, get_transaction_request: "GetTransactionRequest"
    ) -> "TransactionResultResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_account(
        self, get_account_request: "GetAccountRequest"
    ) -> "GetAccountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_account_at_latest_block(
        self, get_account_at_latest_block_request: "GetAccountAtLatestBlockRequest"
    ) -> "AccountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_account_at_block_height(
        self, get_account_at_block_height_request: "GetAccountAtBlockHeightRequest"
    ) -> "AccountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def execute_script_at_latest_block(
        self,
        execute_script_at_latest_block_request: "ExecuteScriptAtLatestBlockRequest",
    ) -> "ExecuteScriptResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def execute_script_at_block_id(self) -> "ExecuteScriptResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def execute_script_at_block_height(
        self,
        execute_script_at_block_height_request: "ExecuteScriptAtBlockHeightRequest",
    ) -> "ExecuteScriptResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_events_for_height_range(
        self, get_events_for_height_range_request: "GetEventsForHeightRangeRequest"
    ) -> "EventsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_events_for_block_i_ds(
        self, get_events_for_block_i_ds_request: "GetEventsForBlockIDsRequest"
    ) -> "EventsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_network_parameters(
        self, get_network_parameters_request: "GetNetworkParametersRequest"
    ) -> "GetNetworkParametersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_ping(
        self, stream: "grpclib.server.Stream[PingRequest, PingResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.ping(request)
        await stream.send_message(response)

    async def __rpc_get_latest_block_header(
        self,
        stream: "grpclib.server.Stream[GetLatestBlockHeaderRequest, BlockHeaderResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_latest_block_header(request)
        await stream.send_message(response)

    async def __rpc_get_block_header_by_id(
        self,
        stream: "grpclib.server.Stream[GetBlockHeaderByIdRequest, BlockHeaderResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_block_header_by_id(request)
        await stream.send_message(response)

    async def __rpc_get_block_header_by_height(
        self,
        stream: "grpclib.server.Stream[GetBlockHeaderByHeightRequest, BlockHeaderResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_block_header_by_height(request)
        await stream.send_message(response)

    async def __rpc_get_latest_block(
        self, stream: "grpclib.server.Stream[GetLatestBlockRequest, BlockResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_latest_block(request)
        await stream.send_message(response)

    async def __rpc_get_block_by_id(
        self, stream: "grpclib.server.Stream[GetBlockByIdRequest, BlockResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_block_by_id(request)
        await stream.send_message(response)

    async def __rpc_get_block_by_height(
        self, stream: "grpclib.server.Stream[GetBlockByHeightRequest, BlockResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_block_by_height(request)
        await stream.send_message(response)

    async def __rpc_get_collection_by_id(
        self,
        stream: "grpclib.server.Stream[GetCollectionByIdRequest, CollectionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_collection_by_id(request)
        await stream.send_message(response)

    async def __rpc_send_transaction(
        self,
        stream: "grpclib.server.Stream[SendTransactionRequest, SendTransactionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.send_transaction(request)
        await stream.send_message(response)

    async def __rpc_get_transaction(
        self,
        stream: "grpclib.server.Stream[GetTransactionRequest, TransactionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_transaction(request)
        await stream.send_message(response)

    async def __rpc_get_transaction_result(
        self,
        stream: "grpclib.server.Stream[GetTransactionRequest, TransactionResultResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_transaction_result(request)
        await stream.send_message(response)

    async def __rpc_get_account(
        self, stream: "grpclib.server.Stream[GetAccountRequest, GetAccountResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_account(request)
        await stream.send_message(response)

    async def __rpc_get_account_at_latest_block(
        self,
        stream: "grpclib.server.Stream[GetAccountAtLatestBlockRequest, AccountResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_account_at_latest_block(request)
        await stream.send_message(response)

    async def __rpc_get_account_at_block_height(
        self,
        stream: "grpclib.server.Stream[GetAccountAtBlockHeightRequest, AccountResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_account_at_block_height(request)
        await stream.send_message(response)

    async def __rpc_execute_script_at_latest_block(
        self,
        stream: "grpclib.server.Stream[ExecuteScriptAtLatestBlockRequest, ExecuteScriptResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.execute_script_at_latest_block(request)
        await stream.send_message(response)

    async def __rpc_execute_script_at_block_id(
        self,
        stream: "grpclib.server.Stream[ExecuteScriptAtBlockIdRequest, ExecuteScriptResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.execute_script_at_block_id(request)
        await stream.send_message(response)

    async def __rpc_execute_script_at_block_height(
        self,
        stream: "grpclib.server.Stream[ExecuteScriptAtBlockHeightRequest, ExecuteScriptResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.execute_script_at_block_height(request)
        await stream.send_message(response)

    async def __rpc_get_events_for_height_range(
        self,
        stream: "grpclib.server.Stream[GetEventsForHeightRangeRequest, EventsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_events_for_height_range(request)
        await stream.send_message(response)

    async def __rpc_get_events_for_block_i_ds(
        self,
        stream: "grpclib.server.Stream[GetEventsForBlockIDsRequest, EventsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_events_for_block_i_ds(request)
        await stream.send_message(response)

    async def __rpc_get_network_parameters(
        self,
        stream: "grpclib.server.Stream[GetNetworkParametersRequest, GetNetworkParametersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_network_parameters(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/flow.access.AccessAPI/Ping": grpclib.const.Handler(
                self.__rpc_ping,
                grpclib.const.Cardinality.UNARY_UNARY,
                PingRequest,
                PingResponse,
            ),
            "/flow.access.AccessAPI/GetLatestBlockHeader": grpclib.const.Handler(
                self.__rpc_get_latest_block_header,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetLatestBlockHeaderRequest,
                BlockHeaderResponse,
            ),
            "/flow.access.AccessAPI/GetBlockHeaderByID": grpclib.const.Handler(
                self.__rpc_get_block_header_by_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetBlockHeaderByIdRequest,
                BlockHeaderResponse,
            ),
            "/flow.access.AccessAPI/GetBlockHeaderByHeight": grpclib.const.Handler(
                self.__rpc_get_block_header_by_height,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetBlockHeaderByHeightRequest,
                BlockHeaderResponse,
            ),
            "/flow.access.AccessAPI/GetLatestBlock": grpclib.const.Handler(
                self.__rpc_get_latest_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetLatestBlockRequest,
                BlockResponse,
            ),
            "/flow.access.AccessAPI/GetBlockByID": grpclib.const.Handler(
                self.__rpc_get_block_by_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetBlockByIdRequest,
                BlockResponse,
            ),
            "/flow.access.AccessAPI/GetBlockByHeight": grpclib.const.Handler(
                self.__rpc_get_block_by_height,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetBlockByHeightRequest,
                BlockResponse,
            ),
            "/flow.access.AccessAPI/GetCollectionByID": grpclib.const.Handler(
                self.__rpc_get_collection_by_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetCollectionByIdRequest,
                CollectionResponse,
            ),
            "/flow.access.AccessAPI/SendTransaction": grpclib.const.Handler(
                self.__rpc_send_transaction,
                grpclib.const.Cardinality.UNARY_UNARY,
                SendTransactionRequest,
                SendTransactionResponse,
            ),
            "/flow.access.AccessAPI/GetTransaction": grpclib.const.Handler(
                self.__rpc_get_transaction,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTransactionRequest,
                TransactionResponse,
            ),
            "/flow.access.AccessAPI/GetTransactionResult": grpclib.const.Handler(
                self.__rpc_get_transaction_result,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTransactionRequest,
                TransactionResultResponse,
            ),
            "/flow.access.AccessAPI/GetAccount": grpclib.const.Handler(
                self.__rpc_get_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAccountRequest,
                GetAccountResponse,
            ),
            "/flow.access.AccessAPI/GetAccountAtLatestBlock": grpclib.const.Handler(
                self.__rpc_get_account_at_latest_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAccountAtLatestBlockRequest,
                AccountResponse,
            ),
            "/flow.access.AccessAPI/GetAccountAtBlockHeight": grpclib.const.Handler(
                self.__rpc_get_account_at_block_height,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAccountAtBlockHeightRequest,
                AccountResponse,
            ),
            "/flow.access.AccessAPI/ExecuteScriptAtLatestBlock": grpclib.const.Handler(
                self.__rpc_execute_script_at_latest_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExecuteScriptAtLatestBlockRequest,
                ExecuteScriptResponse,
            ),
            "/flow.access.AccessAPI/ExecuteScriptAtBlockID": grpclib.const.Handler(
                self.__rpc_execute_script_at_block_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExecuteScriptAtBlockIdRequest,
                ExecuteScriptResponse,
            ),
            "/flow.access.AccessAPI/ExecuteScriptAtBlockHeight": grpclib.const.Handler(
                self.__rpc_execute_script_at_block_height,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExecuteScriptAtBlockHeightRequest,
                ExecuteScriptResponse,
            ),
            "/flow.access.AccessAPI/GetEventsForHeightRange": grpclib.const.Handler(
                self.__rpc_get_events_for_height_range,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetEventsForHeightRangeRequest,
                EventsResponse,
            ),
            "/flow.access.AccessAPI/GetEventsForBlockIDs": grpclib.const.Handler(
                self.__rpc_get_events_for_block_i_ds,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetEventsForBlockIDsRequest,
                EventsResponse,
            ),
            "/flow.access.AccessAPI/GetNetworkParameters": grpclib.const.Handler(
                self.__rpc_get_network_parameters,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetNetworkParametersRequest,
                GetNetworkParametersResponse,
            ),
        }
