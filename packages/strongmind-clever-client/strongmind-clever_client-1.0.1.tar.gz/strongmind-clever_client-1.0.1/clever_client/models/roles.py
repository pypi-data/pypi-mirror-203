# coding: utf-8

"""
    Clever Data API

    Serves the Clever Data API  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from clever_client.configuration import Configuration


class Roles(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contact': 'Contact',
        'district_admin': 'DistrictAdmin',
        'staff': 'Staff',
        'student': 'Student',
        'teacher': 'Teacher'
    }

    attribute_map = {
        'contact': 'contact',
        'district_admin': 'district_admin',
        'staff': 'staff',
        'student': 'student',
        'teacher': 'teacher'
    }

    def __init__(self, contact=None, district_admin=None, staff=None, student=None, teacher=None, _configuration=None):  # noqa: E501
        """Roles - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._contact = None
        self._district_admin = None
        self._staff = None
        self._student = None
        self._teacher = None
        self.discriminator = None

        if contact is not None:
            self.contact = contact
        if district_admin is not None:
            self.district_admin = district_admin
        if staff is not None:
            self.staff = staff
        if student is not None:
            self.student = student
        if teacher is not None:
            self.teacher = teacher

    @property
    def contact(self):
        """Gets the contact of this Roles.  # noqa: E501


        :return: The contact of this Roles.  # noqa: E501
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Roles.


        :param contact: The contact of this Roles.  # noqa: E501
        :type: Contact
        """

        self._contact = contact

    @property
    def district_admin(self):
        """Gets the district_admin of this Roles.  # noqa: E501


        :return: The district_admin of this Roles.  # noqa: E501
        :rtype: DistrictAdmin
        """
        return self._district_admin

    @district_admin.setter
    def district_admin(self, district_admin):
        """Sets the district_admin of this Roles.


        :param district_admin: The district_admin of this Roles.  # noqa: E501
        :type: DistrictAdmin
        """

        self._district_admin = district_admin

    @property
    def staff(self):
        """Gets the staff of this Roles.  # noqa: E501


        :return: The staff of this Roles.  # noqa: E501
        :rtype: Staff
        """
        return self._staff

    @staff.setter
    def staff(self, staff):
        """Sets the staff of this Roles.


        :param staff: The staff of this Roles.  # noqa: E501
        :type: Staff
        """

        self._staff = staff

    @property
    def student(self):
        """Gets the student of this Roles.  # noqa: E501


        :return: The student of this Roles.  # noqa: E501
        :rtype: Student
        """
        return self._student

    @student.setter
    def student(self, student):
        """Sets the student of this Roles.


        :param student: The student of this Roles.  # noqa: E501
        :type: Student
        """

        self._student = student

    @property
    def teacher(self):
        """Gets the teacher of this Roles.  # noqa: E501


        :return: The teacher of this Roles.  # noqa: E501
        :rtype: Teacher
        """
        return self._teacher

    @teacher.setter
    def teacher(self, teacher):
        """Sets the teacher of this Roles.


        :param teacher: The teacher of this Roles.  # noqa: E501
        :type: Teacher
        """

        self._teacher = teacher

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Roles, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Roles):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Roles):
            return True

        return self.to_dict() != other.to_dict()
