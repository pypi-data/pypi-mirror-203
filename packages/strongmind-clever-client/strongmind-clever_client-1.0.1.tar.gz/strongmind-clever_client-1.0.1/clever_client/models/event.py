# coding: utf-8

"""
    Clever Data API

    Serves the Clever Data API  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from clever_client.configuration import Configuration


class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'created': 'str'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'created': 'created'
    }

    discriminator_value_class_map = {
        'districts.updated': 'DistrictsUpdated',
        'terms.created': 'TermsCreated',
        'districts.deleted': 'DistrictsDeleted',
        'terms.deleted': 'TermsDeleted',
        'terms.updated': 'TermsUpdated',
        'districts.created': 'DistrictsCreated',
        'resources.deleted': 'ResourcesDeleted',
        'users.updated': 'UsersUpdated',
        'sections.created': 'SectionsCreated',
        'users.created': 'UsersCreated',
        'courses.created': 'CoursesCreated',
        'schools.created': 'SchoolsCreated',
        'courses.deleted': 'CoursesDeleted',
        'courses.updated': 'CoursesUpdated',
        'sections.deleted': 'SectionsDeleted',
        'sections.updated': 'SectionsUpdated',
        'schools.deleted': 'SchoolsDeleted',
        'schools.updated': 'SchoolsUpdated',
        'users.deleted': 'UsersDeleted',
        'resources.updated': 'ResourcesUpdated',
        'resources.created': 'ResourcesCreated'
    }

    def __init__(self, type=None, id=None, created=None, _configuration=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._id = None
        self._created = None
        self.discriminator = 'type'

        self.type = type
        if id is not None:
            self.id = id
        if created is not None:
            self.created = created

    @property
    def type(self):
        """Gets the type of this Event.  # noqa: E501


        :return: The type of this Event.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Event.


        :param type: The type of this Event.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def id(self):
        """Gets the id of this Event.  # noqa: E501


        :return: The id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created(self):
        """Gets the created of this Event.  # noqa: E501


        :return: The created of this Event.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Event.


        :param created: The created of this Event.  # noqa: E501
        :type: str
        """

        self._created = created

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Event):
            return True

        return self.to_dict() != other.to_dict()
