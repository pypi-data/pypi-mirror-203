# coding: utf-8

"""
    Clever Data API

    Serves the Clever Data API  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from clever_client.configuration import Configuration


class Staff(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'legacy_id': 'str',
        'credentials': 'Credentials',
        'department': 'str',
        'roles': 'list[str]',
        'schools': 'list[str]',
        'staff_id': 'str',
        'title': 'str',
        'ext': 'object'
    }

    attribute_map = {
        'legacy_id': 'legacy_id',
        'credentials': 'credentials',
        'department': 'department',
        'roles': 'roles',
        'schools': 'schools',
        'staff_id': 'staff_id',
        'title': 'title',
        'ext': 'ext'
    }

    def __init__(self, legacy_id=None, credentials=None, department=None, roles=None, schools=None, staff_id=None, title=None, ext=None, _configuration=None):  # noqa: E501
        """Staff - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._legacy_id = None
        self._credentials = None
        self._department = None
        self._roles = None
        self._schools = None
        self._staff_id = None
        self._title = None
        self._ext = None
        self.discriminator = None

        if legacy_id is not None:
            self.legacy_id = legacy_id
        if credentials is not None:
            self.credentials = credentials
        if department is not None:
            self.department = department
        if roles is not None:
            self.roles = roles
        if schools is not None:
            self.schools = schools
        if staff_id is not None:
            self.staff_id = staff_id
        if title is not None:
            self.title = title
        if ext is not None:
            self.ext = ext

    @property
    def legacy_id(self):
        """Gets the legacy_id of this Staff.  # noqa: E501


        :return: The legacy_id of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._legacy_id

    @legacy_id.setter
    def legacy_id(self, legacy_id):
        """Sets the legacy_id of this Staff.


        :param legacy_id: The legacy_id of this Staff.  # noqa: E501
        :type: str
        """

        self._legacy_id = legacy_id

    @property
    def credentials(self):
        """Gets the credentials of this Staff.  # noqa: E501


        :return: The credentials of this Staff.  # noqa: E501
        :rtype: Credentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this Staff.


        :param credentials: The credentials of this Staff.  # noqa: E501
        :type: Credentials
        """

        self._credentials = credentials

    @property
    def department(self):
        """Gets the department of this Staff.  # noqa: E501


        :return: The department of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this Staff.


        :param department: The department of this Staff.  # noqa: E501
        :type: str
        """

        self._department = department

    @property
    def roles(self):
        """Gets the roles of this Staff.  # noqa: E501


        :return: The roles of this Staff.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this Staff.


        :param roles: The roles of this Staff.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def schools(self):
        """Gets the schools of this Staff.  # noqa: E501


        :return: The schools of this Staff.  # noqa: E501
        :rtype: list[str]
        """
        return self._schools

    @schools.setter
    def schools(self, schools):
        """Sets the schools of this Staff.


        :param schools: The schools of this Staff.  # noqa: E501
        :type: list[str]
        """

        self._schools = schools

    @property
    def staff_id(self):
        """Gets the staff_id of this Staff.  # noqa: E501


        :return: The staff_id of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._staff_id

    @staff_id.setter
    def staff_id(self, staff_id):
        """Sets the staff_id of this Staff.


        :param staff_id: The staff_id of this Staff.  # noqa: E501
        :type: str
        """

        self._staff_id = staff_id

    @property
    def title(self):
        """Gets the title of this Staff.  # noqa: E501


        :return: The title of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Staff.


        :param title: The title of this Staff.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def ext(self):
        """Gets the ext of this Staff.  # noqa: E501


        :return: The ext of this Staff.  # noqa: E501
        :rtype: object
        """
        return self._ext

    @ext.setter
    def ext(self, ext):
        """Sets the ext of this Staff.


        :param ext: The ext of this Staff.  # noqa: E501
        :type: object
        """

        self._ext = ext

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Staff, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Staff):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Staff):
            return True

        return self.to_dict() != other.to_dict()
