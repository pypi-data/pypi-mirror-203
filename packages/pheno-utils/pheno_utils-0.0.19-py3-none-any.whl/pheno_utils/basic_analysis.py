# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/07_basic_analysis.ipynb.

# %% auto 0
__all__ = ['custom_describe']

# %% ../nbs/07_basic_analysis.ipynb 3
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from typing import List, Any, Dict, Union, Optional


# %% ../nbs/07_basic_analysis.ipynb 5
from .config import *

# %% ../nbs/07_basic_analysis.ipynb 6
def custom_describe(df: pd.DataFrame) -> pd.DataFrame:
    """
    Generates a custom summary statistics dataframe for mixed data types.
    
    Args:
        df: The input pandas DataFrame
        
    Returns:
        A pandas DataFrame containing the summary statistics
    """
    def describe_column(series: pd.Series) -> Dict[str, Union[int, float]]:
        """
        Generates summary statistics for a given column/series.
        
        Args:
            series: The input pandas Series (column)
            
        Returns:
            A dictionary containing the summary statistics
        """
        if pd.api.types.is_numeric_dtype(series):
            stats = {
                'count': series.count(),
                'unique': series.nunique(),
                'most_frequent': series.mode().iat[0] if series.mode().size > 0 else np.nan,
                'min': series.min(),
                'max': series.max(),
                'mean': series.mean(),
                'median': series.median(),
                'std': series.std(),
            }
        elif pd.api.types.is_datetime64_dtype(series):
            stats = {
                'count': series.count(),
                'unique': series.nunique(),
                'most_frequent': np.nan,
                'min': series.min(),
                'max': series.max(),
                'mean': np.nan,
                'median': np.nan,
                'std': np.nan,
            }
        else:
            stats = {
                'count': series.count(),
                'unique': series.nunique(),
                'most_frequent': series.mode().iat[0] if series.mode().size > 0 else np.nan,
                'min': np.nan,
                'max': np.nan,
                'mean': np.nan,
                'median': np.nan,
                'std': np.nan,
            }
        return stats

    summary = pd.DataFrame({col: describe_column(df[col]) for col in df.columns}).transpose()
    summary = summary[['count', 'unique', 'most_frequent', 'min', 'max', 'mean', 'median', 'std']]
    return summary.T
