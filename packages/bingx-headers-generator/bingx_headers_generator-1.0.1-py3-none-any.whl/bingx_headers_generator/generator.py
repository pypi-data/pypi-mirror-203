import time
import uuid
from hashlib import sha256
from typing import Any

import cloudscraper


class BingXHeadersGenerator:
    __DEFAULT_BEGINNING_VALUE = "95d65c73dc5c4370ae9018fb7f2eab69"  # this value can be found in the one of their obfuscated JS files on their website
    __DEFAULT_PAGE_SIZE = "100"

    def __init__(
        self,
        app_version: str,
        user_id: str,
        api_identity: str,
        app_id: str = "30004",
        main_app_id: str = "10009",
        platform_id: str = "30",
    ):
        self.__app_version = app_version
        self.__user_id = user_id
        self.__api_identity = api_identity
        self.__app_id = app_id
        self.__main_app_id = main_app_id
        self.__platform_id = platform_id
        self.session = cloudscraper.create_scraper()

    def generate_encryption_content(self) -> str:
        """
        It generates the encryption content for the request which is used to generate the sign.\n
        The encryption content is created by concatenating specific values in a specific order.
        """
        self.__timestamp = str(int(time.time() * 1000))
        self.__trace_id = str(uuid.uuid4())
        self.__device_id = str(uuid.uuid4())
        if self.__api_identity != "0":
            payload = (
                '{"apiIdentity":"api_identity","pageId":"0","pageSize":"__DEFAULT_PAGE_SIZE","uid":"user_id"}'
                .replace("api_identity", self.__api_identity)
                .replace("user_id", self.__user_id)
                .replace("__DEFAULT_PAGE_SIZE", self.__DEFAULT_PAGE_SIZE)
            )
        else:
            payload = (
                '{"pageId":"0","pageSize":"__DEFAULT_PAGE_SIZE","trader":"user_id"}'
                .replace("user_id", self.__user_id)
                .replace("__DEFAULT_PAGE_SIZE", self.__DEFAULT_PAGE_SIZE)
            )
        encryption_content = "".join(
            [
                self.__DEFAULT_BEGINNING_VALUE,
                self.__timestamp,
                self.__trace_id,
                self.__device_id,
                self.__platform_id,
                self.__app_version,
                payload,
            ]
        )
        return encryption_content

    def generate_sign(self) -> str:
        """
        It generates a signature for the request.\n
        The signature is generated by hashing the encryption content with SHA256 and then converting the hash to uppercase.
        """
        encryption_content = self.generate_encryption_content()
        sign = str(sha256(encryption_content.encode("utf-8")).hexdigest()).upper()
        return sign

    def generate_headers(self, custom_headers: dict[str, Any] = {}) -> dict[str, Any]:
        """
        It generates a dictionary of headers for the request.\n
        The headers are used to authenticate the request.
        """
        sign = self.generate_sign()
        headers = {
            "app_version": self.__app_version,
            "appid": self.__app_id,
            "channel": "official",
            "device_id": self.__device_id,
            "lang": "en",
            "mainappid": self.__main_app_id,
            "platformid": self.__platform_id,
            "sign": sign,
            "timestamp": self.__timestamp,
            "timezone": "1",
            "traceid": self.__trace_id,
        }
        return headers | custom_headers

    def make_request(self, type: str, base_url: str, custom_headers: dict[str, Any] = {}) -> cloudscraper.requests.Response:
        """
        This function makes a request to the API using the given type (GET, POST, etc.) and base URL

        :param type: str - The type of request you want to make i.e. GET or POST
        :param base_url: The base url for the request i.e. https://api-app.we-api.com/api/copytrade/v1/real/trader/positions
        """
        headers = self.generate_headers(custom_headers)
        if self.__api_identity != "0":
            complete_url = f"{base_url}?uid={self.__user_id}&apiIdentity={self.__api_identity}&pageId=0&pageSize={self.__DEFAULT_PAGE_SIZE}"
        else:
            complete_url = f"{base_url}?trader={self.__user_id}&pageId=0&pageSize={self.__DEFAULT_PAGE_SIZE}"
        res = self.session.request(type.upper(), complete_url, headers=headers)
        return res
