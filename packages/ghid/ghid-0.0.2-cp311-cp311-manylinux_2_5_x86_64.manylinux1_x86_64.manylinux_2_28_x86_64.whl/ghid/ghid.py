"""
Package ghid provides decoding and encoding utilities for GitHub GraphQL Node IDs.

Ideally, ID in any kind of system must be unique. However, as the system scales, you may need to change primary keys
in your DB, and thus change the unique identifier used in your API as well. The same happened with GitHub GraphQL API.

To achieve a notion of Node IDs (a unique identifier, regardless of the object/node type), you likely don't want to
use generic IDs like UUID - it's more efficient to encode a type of the node and some kind of primary key in the ID.
This is exactly how GitHub Node IDs work: they encode some type-related information, so that the backend can quickly
figure out which table/collection to use for a lookup, and an identifier specific for that node type.

First version of GitHub Node IDs (aka IDv1) were text-based (base64-encoded text) which turned out to be inefficient.
GitHub migrated to IDv2 format, which is binary-based (base64 over msgpack encoding). However, the migration was not
handled well in our opinion.

This library solves a problem: if you already have a huge dataset of cached info based on GitHub's GraphQL data,
and you want to migrate it to the new ID format in offline mode (without hitting the actual API) - we've got you covered..
This project provides a CLI and a Go library to handle these cases. As a bonus, it allows introspection of ID contents.
When your client receives an ID, you can instantly tell which type it contains, what is the commit SHA,
which repo it belongs to, etc. It can be useful as an optimization for some use cases.

WARNING: This library is written with some assumptions inferred from reverse-engineering a bunch of GitHub Node IDs,
which we've seen in the wild. It is NOT affiliated with GitHub. Generated output MAY be incorrect and break your system.
Always design a fallback code path that actually hits GitHub API and verify output for your specific use case.

"""
# python wrapper for package github.com/athenianco/ghid within overall package ghid
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy pkg -author Athenian -desc Python bindings to ghid, decoding and encoding utilities for GitHub GraphQL Node IDs -email denys@athenian.co -output python -url https://github.com/athenianco/ghid -vm python3 -version 0.0.2 github.com/athenianco/ghid

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _ghid
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from ghid import ghid
# and then refer to everything using ghid. prefix
# packages imported by this package listed below:




# ---- Types ---

# Python type for slice [2]uintptr
class Array_2_uintptr(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		s = 'ghid.Array_2_uintptr len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'ghid.Array_2_uintptr([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _ghid.Array_2_uintptr_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _ghid.Array_2_uintptr_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_ghid.Array_2_uintptr_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _ghid.Array_2_uintptr_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration

# Python type for slice []interface{}
class Slice_interface_(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.Slice_interface__CTor()
			_ghid.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_interface_.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		s = 'ghid.Slice_interface_ len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'ghid.Slice_interface_([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _ghid.Slice_interface__len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _ghid.Slice_interface__len(self.handle)
				return Slice_interface_(handle=_ghid.Slice_interface__subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _ghid.Slice_interface__elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_ghid.Slice_interface__set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_interface_.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _ghid.Slice_interface__elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_ghid.Slice_interface__append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []reflect.Value
class Slice_reflect_Value(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.Slice_reflect_Value_CTor()
			_ghid.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_reflect_Value.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		s = 'ghid.Slice_reflect_Value len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'ghid.Slice_reflect_Value([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _ghid.Slice_reflect_Value_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _ghid.Slice_reflect_Value_len(self.handle)
				return Slice_reflect_Value(handle=_ghid.Slice_reflect_Value_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.reflect_Value(handle=_ghid.Slice_reflect_Value_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_ghid.Slice_reflect_Value_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_reflect_Value.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _ghid.Slice_reflect_Value_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_ghid.Slice_reflect_Value_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for map map[interface{}]interface{}
class Map_interface__interface_(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.Map_interface__interface__CTor()
			_ghid.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Mapping):
					raise TypeError('Map_interface__interface_.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_ghid.Map_interface__interface__set(self.handle, k, v)
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		s = 'ghid.Map_interface__interface_ len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'ghid.Map_interface__interface_({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _ghid.Map_interface__interface__len(self.handle)
	def __getitem__(self, key):
		return _ghid.Map_interface__interface__elem(self.handle, key)
	def __setitem__(self, key, value):
		_ghid.Map_interface__interface__set(self.handle, key, value)
	def __delitem__(self, key):
		return _ghid.Map_interface__interface__delete(self.handle, key)
	def keys(self):
		return Slice_interface_(handle=_ghid.Map_interface__interface__keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _ghid.Map_interface__interface__contains(self.handle, key)

# Python type for map map[string]int
class Map_string_int(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.Map_string_int_CTor()
			_ghid.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Mapping):
					raise TypeError('Map_string_int.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_ghid.Map_string_int_set(self.handle, k, v)
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		s = 'ghid.Map_string_int len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'ghid.Map_string_int({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _ghid.Map_string_int_len(self.handle)
	def __getitem__(self, key):
		return _ghid.Map_string_int_elem(self.handle, key)
	def __setitem__(self, key, value):
		_ghid.Map_string_int_set(self.handle, key, value)
	def __delitem__(self, key):
		return _ghid.Map_string_int_delete(self.handle, key)
	def keys(self):
		return go.Slice_string(handle=_ghid.Map_string_int_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _ghid.Map_string_int_contains(self.handle, key)

# Python type for map map[string]interface{}
class Map_string_interface_(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.Map_string_interface__CTor()
			_ghid.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Mapping):
					raise TypeError('Map_string_interface_.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_ghid.Map_string_interface__set(self.handle, k, v)
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		s = 'ghid.Map_string_interface_ len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'ghid.Map_string_interface_({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _ghid.Map_string_interface__len(self.handle)
	def __getitem__(self, key):
		return _ghid.Map_string_interface__elem(self.handle, key)
	def __setitem__(self, key, value):
		_ghid.Map_string_interface__set(self.handle, key, value)
	def __delitem__(self, key):
		return _ghid.Map_string_interface__delete(self.handle, key)
	def keys(self):
		return go.Slice_string(handle=_ghid.Map_string_interface__keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _ghid.Map_string_interface__contains(self.handle, key)

# Python type for map map[string]string
class Map_string_string(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.Map_string_string_CTor()
			_ghid.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Mapping):
					raise TypeError('Map_string_string.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_ghid.Map_string_string_set(self.handle, k, v)
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		s = 'ghid.Map_string_string len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'ghid.Map_string_string({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _ghid.Map_string_string_len(self.handle)
	def __getitem__(self, key):
		return _ghid.Map_string_string_elem(self.handle, key)
	def __setitem__(self, key, value):
		_ghid.Map_string_string_set(self.handle, key, value)
	def __delitem__(self, key):
		return _ghid.Map_string_string_delete(self.handle, key)
	def keys(self):
		return go.Slice_string(handle=_ghid.Map_string_string_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _ghid.Map_string_string_contains(self.handle, key)


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---
TypeAddedToProjectEvent = "AddedToProjectEvent"
TypeApp = "App"
TypeAssignedEvent = "AssignedEvent"
TypeAutoMergeDisabledEvent = "AutoMergeDisabledEvent"
TypeAutoMergeEnabledEvent = "AutoMergeEnabledEvent"
TypeAutoRebaseEnabledEvent = "AutoRebaseEnabledEvent"
TypeAutoSquashEnabledEvent = "AutoSquashEnabledEvent"
TypeAutomaticBaseChangeFailedEvent = "AutomaticBaseChangeFailedEvent"
TypeAutomaticBaseChangeSucceededEvent = "AutomaticBaseChangeSucceededEvent"
TypeBaseRefChangedEvent = "BaseRefChangedEvent"
TypeBaseRefDeletedEvent = "BaseRefDeletedEvent"
TypeBaseRefForcePushedEvent = "BaseRefForcePushedEvent"
TypeBlob = "Blob"
TypeBot = "Bot"
TypeBranchProtectionRule = "BranchProtectionRule"
TypeBypassForcePushAllowance = "BypassForcePushAllowance"
TypeBypassPullRequestAllowance = "BypassPullRequestAllowance"
TypeCWE = "CWE"
TypeCheckRun = "CheckRun"
TypeCheckSuite = "CheckSuite"
TypeClosedEvent = "ClosedEvent"
TypeCodeOfConduct = "CodeOfConduct"
TypeCommentDeletedEvent = "CommentDeletedEvent"
TypeCommit = "Commit"
TypeCommitComment = "CommitComment"
TypeCommitCommentThread = "CommitCommentThread"
TypeComparison = "Comparison"
TypeConnectedEvent = "ConnectedEvent"
TypeConvertToDraftEvent = "ConvertToDraftEvent"
TypeConvertedNoteToIssueEvent = "ConvertedNoteToIssueEvent"
TypeConvertedToDiscussionEvent = "ConvertedToDiscussionEvent"
TypeCrossReferencedEvent = "CrossReferencedEvent"
TypeDemilestonedEvent = "DemilestonedEvent"
TypeDeployKey = "DeployKey"
TypeDeployedEvent = "DeployedEvent"
TypeDeployment = "Deployment"
TypeDeploymentEnvironmentChangedEvent = "DeploymentEnvironmentChangedEvent"
TypeDeploymentReview = "DeploymentReview"
TypeDeploymentStatus = "DeploymentStatus"
TypeDisconnectedEvent = "DisconnectedEvent"
TypeDiscussion = "Discussion"
TypeDiscussionCategory = "DiscussionCategory"
TypeDiscussionComment = "DiscussionComment"
TypeDiscussionPoll = "DiscussionPoll"
TypeDiscussionPollOption = "DiscussionPollOption"
TypeDraftIssue = "DraftIssue"
TypeEnterprise = "Enterprise"
TypeEnterpriseAdministratorInvitation = "EnterpriseAdministratorInvitation"
TypeEnterpriseIdentityProvider = "EnterpriseIdentityProvider"
TypeEnterpriseRepositoryInfo = "EnterpriseRepositoryInfo"
TypeEnterpriseServerInstallation = "EnterpriseServerInstallation"
TypeEnterpriseServerUserAccount = "EnterpriseServerUserAccount"
TypeEnterpriseServerUserAccountEmail = "EnterpriseServerUserAccountEmail"
TypeEnterpriseServerUserAccountsUpload = "EnterpriseServerUserAccountsUpload"
TypeEnterpriseUserAccount = "EnterpriseUserAccount"
TypeEnvironment = "Environment"
TypeExternalIdentity = "ExternalIdentity"
TypeGist = "Gist"
TypeGistComment = "GistComment"
TypeHeadRefDeletedEvent = "HeadRefDeletedEvent"
TypeHeadRefForcePushedEvent = "HeadRefForcePushedEvent"
TypeHeadRefRestoredEvent = "HeadRefRestoredEvent"
TypeIpAllowListEntry = "IpAllowListEntry"
TypeIssue = "Issue"
TypeIssueComment = "IssueComment"
TypeLabel = "Label"
TypeLabeledEvent = "LabeledEvent"
TypeLanguage = "Language"
TypeLicense = "License"
TypeLinkedBranch = "LinkedBranch"
TypeLockedEvent = "LockedEvent"
TypeMannequin = "Mannequin"
TypeMarkedAsDuplicateEvent = "MarkedAsDuplicateEvent"
TypeMarketplaceCategory = "MarketplaceCategory"
TypeMarketplaceListing = "MarketplaceListing"
TypeMembersCanDeleteReposClearAuditEntry = "MembersCanDeleteReposClearAuditEntry"
TypeMembersCanDeleteReposDisableAuditEntry = "MembersCanDeleteReposDisableAuditEntry"
TypeMembersCanDeleteReposEnableAuditEntry = "MembersCanDeleteReposEnableAuditEntry"
TypeMentionedEvent = "MentionedEvent"
TypeMergedEvent = "MergedEvent"
TypeMigrationSource = "MigrationSource"
TypeMilestone = "Milestone"
TypeMilestonedEvent = "MilestonedEvent"
TypeMovedColumnsInProjectEvent = "MovedColumnsInProjectEvent"
TypeOIDCProvider = "OIDCProvider"
TypeOauthApplicationCreateAuditEntry = "OauthApplicationCreateAuditEntry"
TypeOrgAddBillingManagerAuditEntry = "OrgAddBillingManagerAuditEntry"
TypeOrgAddMemberAuditEntry = "OrgAddMemberAuditEntry"
TypeOrgBlockUserAuditEntry = "OrgBlockUserAuditEntry"
TypeOrgConfigDisableCollaboratorsOnlyAuditEntry = "OrgConfigDisableCollaboratorsOnlyAuditEntry"
TypeOrgConfigEnableCollaboratorsOnlyAuditEntry = "OrgConfigEnableCollaboratorsOnlyAuditEntry"
TypeOrgCreateAuditEntry = "OrgCreateAuditEntry"
TypeOrgDisableOauthAppRestrictionsAuditEntry = "OrgDisableOauthAppRestrictionsAuditEntry"
TypeOrgDisableSamlAuditEntry = "OrgDisableSamlAuditEntry"
TypeOrgDisableTwoFactorRequirementAuditEntry = "OrgDisableTwoFactorRequirementAuditEntry"
TypeOrgEnableOauthAppRestrictionsAuditEntry = "OrgEnableOauthAppRestrictionsAuditEntry"
TypeOrgEnableSamlAuditEntry = "OrgEnableSamlAuditEntry"
TypeOrgEnableTwoFactorRequirementAuditEntry = "OrgEnableTwoFactorRequirementAuditEntry"
TypeOrgInviteMemberAuditEntry = "OrgInviteMemberAuditEntry"
TypeOrgInviteToBusinessAuditEntry = "OrgInviteToBusinessAuditEntry"
TypeOrgOauthAppAccessApprovedAuditEntry = "OrgOauthAppAccessApprovedAuditEntry"
TypeOrgOauthAppAccessDeniedAuditEntry = "OrgOauthAppAccessDeniedAuditEntry"
TypeOrgOauthAppAccessRequestedAuditEntry = "OrgOauthAppAccessRequestedAuditEntry"
TypeOrgRemoveBillingManagerAuditEntry = "OrgRemoveBillingManagerAuditEntry"
TypeOrgRemoveMemberAuditEntry = "OrgRemoveMemberAuditEntry"
TypeOrgRemoveOutsideCollaboratorAuditEntry = "OrgRemoveOutsideCollaboratorAuditEntry"
TypeOrgRestoreMemberAuditEntry = "OrgRestoreMemberAuditEntry"
TypeOrgUnblockUserAuditEntry = "OrgUnblockUserAuditEntry"
TypeOrgUpdateDefaultRepositoryPermissionAuditEntry = "OrgUpdateDefaultRepositoryPermissionAuditEntry"
TypeOrgUpdateMemberAuditEntry = "OrgUpdateMemberAuditEntry"
TypeOrgUpdateMemberRepositoryCreationPermissionAuditEntry = "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"
TypeOrgUpdateMemberRepositoryInvitationPermissionAuditEntry = "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"
TypeOrganization = "Organization"
TypeOrganizationIdentityProvider = "OrganizationIdentityProvider"
TypeOrganizationInvitation = "OrganizationInvitation"
TypeOrganizationMigration = "OrganizationMigration"
TypePackage = "Package"
TypePackageFile = "PackageFile"
TypePackageTag = "PackageTag"
TypePackageVersion = "PackageVersion"
TypePinnedDiscussion = "PinnedDiscussion"
TypePinnedEvent = "PinnedEvent"
TypePinnedIssue = "PinnedIssue"
TypePrivateRepositoryForkingDisableAuditEntry = "PrivateRepositoryForkingDisableAuditEntry"
TypePrivateRepositoryForkingEnableAuditEntry = "PrivateRepositoryForkingEnableAuditEntry"
TypeProject = "Project"
TypeProjectCard = "ProjectCard"
TypeProjectColumn = "ProjectColumn"
TypeProjectV2 = "ProjectV2"
TypeProjectV2Field = "ProjectV2Field"
TypeProjectV2Item = "ProjectV2Item"
TypeProjectV2ItemFieldDateValue = "ProjectV2ItemFieldDateValue"
TypeProjectV2ItemFieldIterationValue = "ProjectV2ItemFieldIterationValue"
TypeProjectV2ItemFieldNumberValue = "ProjectV2ItemFieldNumberValue"
TypeProjectV2ItemFieldSingleSelectValue = "ProjectV2ItemFieldSingleSelectValue"
TypeProjectV2ItemFieldTextValue = "ProjectV2ItemFieldTextValue"
TypeProjectV2IterationField = "ProjectV2IterationField"
TypeProjectV2SingleSelectField = "ProjectV2SingleSelectField"
TypeProjectV2View = "ProjectV2View"
TypeProjectV2Workflow = "ProjectV2Workflow"
TypePublicKey = "PublicKey"
TypePullRequest = "PullRequest"
TypePullRequestCommit = "PullRequestCommit"
TypePullRequestCommitCommentThread = "PullRequestCommitCommentThread"
TypePullRequestReview = "PullRequestReview"
TypePullRequestReviewComment = "PullRequestReviewComment"
TypePullRequestReviewThread = "PullRequestReviewThread"
TypePullRequestThread = "PullRequestThread"
TypePush = "Push"
TypePushAllowance = "PushAllowance"
TypeReaction = "Reaction"
TypeReadyForReviewEvent = "ReadyForReviewEvent"
TypeRef = "Ref"
TypeReferencedEvent = "ReferencedEvent"
TypeRelease = "Release"
TypeReleaseAsset = "ReleaseAsset"
TypeRemovedFromProjectEvent = "RemovedFromProjectEvent"
TypeRenamedTitleEvent = "RenamedTitleEvent"
TypeReopenedEvent = "ReopenedEvent"
TypeRepoAccessAuditEntry = "RepoAccessAuditEntry"
TypeRepoAddMemberAuditEntry = "RepoAddMemberAuditEntry"
TypeRepoAddTopicAuditEntry = "RepoAddTopicAuditEntry"
TypeRepoArchivedAuditEntry = "RepoArchivedAuditEntry"
TypeRepoChangeMergeSettingAuditEntry = "RepoChangeMergeSettingAuditEntry"
TypeRepoConfigDisableAnonymousGitAccessAuditEntry = "RepoConfigDisableAnonymousGitAccessAuditEntry"
TypeRepoConfigDisableCollaboratorsOnlyAuditEntry = "RepoConfigDisableCollaboratorsOnlyAuditEntry"
TypeRepoConfigDisableContributorsOnlyAuditEntry = "RepoConfigDisableContributorsOnlyAuditEntry"
TypeRepoConfigDisableSockpuppetDisallowedAuditEntry = "RepoConfigDisableSockpuppetDisallowedAuditEntry"
TypeRepoConfigEnableAnonymousGitAccessAuditEntry = "RepoConfigEnableAnonymousGitAccessAuditEntry"
TypeRepoConfigEnableCollaboratorsOnlyAuditEntry = "RepoConfigEnableCollaboratorsOnlyAuditEntry"
TypeRepoConfigEnableContributorsOnlyAuditEntry = "RepoConfigEnableContributorsOnlyAuditEntry"
TypeRepoConfigEnableSockpuppetDisallowedAuditEntry = "RepoConfigEnableSockpuppetDisallowedAuditEntry"
TypeRepoConfigLockAnonymousGitAccessAuditEntry = "RepoConfigLockAnonymousGitAccessAuditEntry"
TypeRepoConfigUnlockAnonymousGitAccessAuditEntry = "RepoConfigUnlockAnonymousGitAccessAuditEntry"
TypeRepoCreateAuditEntry = "RepoCreateAuditEntry"
TypeRepoDestroyAuditEntry = "RepoDestroyAuditEntry"
TypeRepoRemoveMemberAuditEntry = "RepoRemoveMemberAuditEntry"
TypeRepoRemoveTopicAuditEntry = "RepoRemoveTopicAuditEntry"
TypeRepository = "Repository"
TypeRepositoryInvitation = "RepositoryInvitation"
TypeRepositoryMigration = "RepositoryMigration"
TypeRepositoryTopic = "RepositoryTopic"
TypeRepositoryVisibilityChangeDisableAuditEntry = "RepositoryVisibilityChangeDisableAuditEntry"
TypeRepositoryVisibilityChangeEnableAuditEntry = "RepositoryVisibilityChangeEnableAuditEntry"
TypeRepositoryVulnerabilityAlert = "RepositoryVulnerabilityAlert"
TypeReviewDismissalAllowance = "ReviewDismissalAllowance"
TypeReviewDismissedEvent = "ReviewDismissedEvent"
TypeReviewRequest = "ReviewRequest"
TypeReviewRequestRemovedEvent = "ReviewRequestRemovedEvent"
TypeReviewRequestedEvent = "ReviewRequestedEvent"
TypeSavedReply = "SavedReply"
TypeSecurityAdvisory = "SecurityAdvisory"
TypeSponsorsActivity = "SponsorsActivity"
TypeSponsorsListing = "SponsorsListing"
TypeSponsorsListingFeaturedItem = "SponsorsListingFeaturedItem"
TypeSponsorsTier = "SponsorsTier"
TypeSponsorship = "Sponsorship"
TypeSponsorshipNewsletter = "SponsorshipNewsletter"
TypeStatus = "Status"
TypeStatusCheckRollup = "StatusCheckRollup"
TypeStatusContext = "StatusContext"
TypeSubscribedEvent = "SubscribedEvent"
TypeTag = "Tag"
TypeTeam = "Team"
TypeTeamAddMemberAuditEntry = "TeamAddMemberAuditEntry"
TypeTeamAddRepositoryAuditEntry = "TeamAddRepositoryAuditEntry"
TypeTeamChangeParentTeamAuditEntry = "TeamChangeParentTeamAuditEntry"
TypeTeamDiscussion = "TeamDiscussion"
TypeTeamDiscussionComment = "TeamDiscussionComment"
TypeTeamRemoveMemberAuditEntry = "TeamRemoveMemberAuditEntry"
TypeTeamRemoveRepositoryAuditEntry = "TeamRemoveRepositoryAuditEntry"
TypeTopic = "Topic"
TypeTransferredEvent = "TransferredEvent"
TypeTree = "Tree"
TypeUnassignedEvent = "UnassignedEvent"
TypeUnlabeledEvent = "UnlabeledEvent"
TypeUnlockedEvent = "UnlockedEvent"
TypeUnmarkedAsDuplicateEvent = "UnmarkedAsDuplicateEvent"
TypeUnpinnedEvent = "UnpinnedEvent"
TypeUnsubscribedEvent = "UnsubscribedEvent"
TypeUser = "User"
TypeUserBlockedEvent = "UserBlockedEvent"
TypeUserContentEdit = "UserContentEdit"
TypeUserStatus = "UserStatus"
TypeVerifiableDomain = "VerifiableDomain"
TypeWorkflow = "Workflow"
TypeWorkflowRun = "WorkflowRun"


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---

# Python type for interface ghid.KeyV2
class KeyV2(go.GoClass):
	"""KeyV2 is an interface for IDv2-compatible unique node keys.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = 0
	def KeyV2(self):
		"""KeyV2() []int"""
		return go.msgpack_RawMessage(handle=_ghid.ghid_KeyV2_KeyV2(self.handle))
	def Type(self):
		"""Type() str"""
		return _ghid.ghid_KeyV2_Type(self.handle)

# Python type for interface ghid.Key
class Key(go.GoClass):
	"""Key is an interface for underlying ID key.\nImplementations are comparable and can be used as a map key.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = 0
	def Type(self):
		"""Type() str"""
		return _ghid.ghid_Key_Type(self.handle)

# Python type for interface ghid.KeyV1
class KeyV1(go.GoClass):
	"""KeyV1 is an interface for IDv1-compatible unique node keys.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = 0
	def KeyV1(self):
		"""KeyV1() str"""
		return _ghid.ghid_KeyV1_KeyV1(self.handle)
	def Type(self):
		"""Type() str"""
		return _ghid.ghid_KeyV1_Type(self.handle)

# Python type for interface ghid.KeyV1NoOrg
class KeyV1NoOrg(go.GoClass):
	"""KeyV1NoOrg is an optional interface for KeyV1 that allows upgrades to KeyV2, given OrgID.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = 0
	def KeyV1(self):
		"""KeyV1() str"""
		return _ghid.ghid_KeyV1NoOrg_KeyV1(self.handle)
	def Type(self):
		"""Type() str"""
		return _ghid.ghid_KeyV1NoOrg_Type(self.handle)
	def WithOrgV2(self, org):
		"""WithOrgV2(long org) object"""
		return KeyV2(handle=_ghid.ghid_KeyV1NoOrg_WithOrgV2(self.handle, org))

# Python type for interface ghid.KeyV1NoRepo
class KeyV1NoRepo(go.GoClass):
	"""KeyV1NoRepo is an optional interface for KeyV1 that allows upgrades to KeyV2, given RepoID.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = 0
	def KeyV1(self):
		"""KeyV1() str"""
		return _ghid.ghid_KeyV1NoRepo_KeyV1(self.handle)
	def Type(self):
		"""Type() str"""
		return _ghid.ghid_KeyV1NoRepo_Type(self.handle)
	def WithRepoV2(self, repo):
		"""WithRepoV2(long repo) object"""
		return KeyV2(handle=_ghid.ghid_KeyV1NoRepo_WithRepoV2(self.handle, repo))


# ---- Structs ---

# Python type for struct ghid.UpgradeOpts
class UpgradeOpts(go.GoClass):
	"""UpgradeOpts provide\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_UpgradeOpts_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.OrgID = args[0]
			if "OrgID" in kwargs:
				self.OrgID = kwargs["OrgID"]
			if  1 < len(args):
				self.RepoID = args[1]
			if "RepoID" in kwargs:
				self.RepoID = kwargs["RepoID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.UpgradeOpts{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.UpgradeOpts ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def OrgID(self):
		"""OrgID will be used for ID upgrade, if it wasn't previously encoded in IDv1, but is required for IDv2.
		"""
		return _ghid.ghid_UpgradeOpts_OrgID_Get(self.handle)
	@OrgID.setter
	def OrgID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_UpgradeOpts_OrgID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_UpgradeOpts_OrgID_Set(self.handle, value)
	@property
	def RepoID(self):
		"""RepoID will be used for ID upgrade, if it wasn't previously encoded in IDv1, but is required for IDv2.
		"""
		return _ghid.ghid_UpgradeOpts_RepoID_Get(self.handle)
	@RepoID.setter
	def RepoID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_UpgradeOpts_RepoID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_UpgradeOpts_RepoID_Set(self.handle, value)

# Python type for struct ghid.UserKey
class UserKey(go.GoClass):
	"""UserKey is a unique key for User nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#user.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_UserKey_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.ID = args[0]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.UserKey{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.UserKey ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ID(self):
		return _ghid.ghid_UserKey_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_UserKey_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_UserKey_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_UserKey_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_UserKey_KeyV1(self.handle)
	def KeyV2(self):
		"""KeyV2() []int
		
		KeyV2 implements KeyV2.
		"""
		return go.msgpack_RawMessage(handle=_ghid.ghid_UserKey_KeyV2(self.handle))

# Python type for struct ghid.PRCommitKeyV2
class PRCommitKeyV2(go.GoClass):
	"""PRCommitKeyV2 is a unique IDv2 key for PullRequestCommit nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#pullrequestcommit.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_PRCommitKeyV2_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.RepoID = args[0]
			if "RepoID" in kwargs:
				self.RepoID = kwargs["RepoID"]
			if  1 < len(args):
				self.PR = args[1]
			if "PR" in kwargs:
				self.PR = kwargs["PR"]
			if  2 < len(args):
				self.SHA = args[2]
			if "SHA" in kwargs:
				self.SHA = kwargs["SHA"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.PRCommitKeyV2{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.PRCommitKeyV2 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def RepoID(self):
		return _ghid.ghid_PRCommitKeyV2_RepoID_Get(self.handle)
	@RepoID.setter
	def RepoID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_PRCommitKeyV2_RepoID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_PRCommitKeyV2_RepoID_Set(self.handle, value)
	@property
	def PR(self):
		return _ghid.ghid_PRCommitKeyV2_PR_Get(self.handle)
	@PR.setter
	def PR(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_PRCommitKeyV2_PR_Set(self.handle, value.handle)
		else:
			_ghid.ghid_PRCommitKeyV2_PR_Set(self.handle, value)
	@property
	def SHA(self):
		return _ghid.ghid_PRCommitKeyV2_SHA_Get(self.handle)
	@SHA.setter
	def SHA(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_PRCommitKeyV2_SHA_Set(self.handle, value.handle)
		else:
			_ghid.ghid_PRCommitKeyV2_SHA_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_PRCommitKeyV2_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_PRCommitKeyV2_KeyV1(self.handle)
	def KeyV2(self):
		"""KeyV2() []int
		
		KeyV2 implements KeyV2.
		"""
		return go.msgpack_RawMessage(handle=_ghid.ghid_PRCommitKeyV2_KeyV2(self.handle))

# Python type for struct ghid.PRReviewKeyV1
class PRReviewKeyV1(go.GoClass):
	"""PRReviewKeyV1 is a unique IDv1 key for PullRequestReview nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#pullrequestreview.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_PRReviewKeyV1_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.ID = args[0]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.PRReviewKeyV1{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.PRReviewKeyV1 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ID(self):
		return _ghid.ghid_PRReviewKeyV1_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_PRReviewKeyV1_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_PRReviewKeyV1_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_PRReviewKeyV1_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_PRReviewKeyV1_KeyV1(self.handle)
	def WithRepoV2(self, repo):
		"""WithRepoV2(long repo) object
		
		WithRepoV2 implements KeyV1NoRepo.
		"""
		return KeyV2(handle=_ghid.ghid_PRReviewKeyV1_WithRepoV2(self.handle, repo))

# Python type for struct ghid.ProjectKeyV2
class ProjectKeyV2(go.GoClass):
	"""ProjectKeyV2 is a unique IDv2 key for Project nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#project.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_ProjectKeyV2_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.RepoID = args[0]
			if "RepoID" in kwargs:
				self.RepoID = kwargs["RepoID"]
			if  1 < len(args):
				self.ID = args[1]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.ProjectKeyV2{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.ProjectKeyV2 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def RepoID(self):
		return _ghid.ghid_ProjectKeyV2_RepoID_Get(self.handle)
	@RepoID.setter
	def RepoID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_ProjectKeyV2_RepoID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_ProjectKeyV2_RepoID_Set(self.handle, value)
	@property
	def ID(self):
		return _ghid.ghid_ProjectKeyV2_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_ProjectKeyV2_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_ProjectKeyV2_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_ProjectKeyV2_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_ProjectKeyV2_KeyV1(self.handle)
	def KeyV2(self):
		"""KeyV2() []int
		
		KeyV2 implements KeyV2.
		"""
		return go.msgpack_RawMessage(handle=_ghid.ghid_ProjectKeyV2_KeyV2(self.handle))

# Python type for struct ghid.PRCommitKeyV1
class PRCommitKeyV1(go.GoClass):
	"""PRCommitKeyV1 is a unique IDv1 key for PullRequestCommit nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#pullrequestcommit.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_PRCommitKeyV1_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.PR = args[0]
			if "PR" in kwargs:
				self.PR = kwargs["PR"]
			if  1 < len(args):
				self.SHA = args[1]
			if "SHA" in kwargs:
				self.SHA = kwargs["SHA"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.PRCommitKeyV1{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.PRCommitKeyV1 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def PR(self):
		return _ghid.ghid_PRCommitKeyV1_PR_Get(self.handle)
	@PR.setter
	def PR(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_PRCommitKeyV1_PR_Set(self.handle, value.handle)
		else:
			_ghid.ghid_PRCommitKeyV1_PR_Set(self.handle, value)
	@property
	def SHA(self):
		return _ghid.ghid_PRCommitKeyV1_SHA_Get(self.handle)
	@SHA.setter
	def SHA(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_PRCommitKeyV1_SHA_Set(self.handle, value.handle)
		else:
			_ghid.ghid_PRCommitKeyV1_SHA_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_PRCommitKeyV1_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_PRCommitKeyV1_KeyV1(self.handle)
	def WithRepoV2(self, repo):
		"""WithRepoV2(long repo) object
		
		WithRepoV2 implements KeyV1NoRepo.
		"""
		return KeyV2(handle=_ghid.ghid_PRCommitKeyV1_WithRepoV2(self.handle, repo))

# Python type for struct ghid.PRKeyV2
class PRKeyV2(go.GoClass):
	"""PRKeyV2 is a unique IDv2 key for PullRequest nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#pullrequest.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_PRKeyV2_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.RepoID = args[0]
			if "RepoID" in kwargs:
				self.RepoID = kwargs["RepoID"]
			if  1 < len(args):
				self.ID = args[1]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.PRKeyV2{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.PRKeyV2 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def RepoID(self):
		return _ghid.ghid_PRKeyV2_RepoID_Get(self.handle)
	@RepoID.setter
	def RepoID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_PRKeyV2_RepoID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_PRKeyV2_RepoID_Set(self.handle, value)
	@property
	def ID(self):
		return _ghid.ghid_PRKeyV2_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_PRKeyV2_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_PRKeyV2_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_PRKeyV2_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_PRKeyV2_KeyV1(self.handle)
	def KeyV2(self):
		"""KeyV2() []int
		
		KeyV2 implements KeyV2.
		"""
		return go.msgpack_RawMessage(handle=_ghid.ghid_PRKeyV2_KeyV2(self.handle))

# Python type for struct ghid.PRReviewCommentKeyV1
class PRReviewCommentKeyV1(go.GoClass):
	"""PRReviewCommentKeyV1 is a unique IDv1 key for PullRequestReviewComment nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#pullrequestreviewcomment.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_PRReviewCommentKeyV1_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.ID = args[0]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.PRReviewCommentKeyV1{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.PRReviewCommentKeyV1 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ID(self):
		return _ghid.ghid_PRReviewCommentKeyV1_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_PRReviewCommentKeyV1_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_PRReviewCommentKeyV1_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_PRReviewCommentKeyV1_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_PRReviewCommentKeyV1_KeyV1(self.handle)
	def WithRepoV2(self, repo):
		"""WithRepoV2(long repo) object
		
		WithRepoV2 implements KeyV1NoRepo.
		"""
		return KeyV2(handle=_ghid.ghid_PRReviewCommentKeyV1_WithRepoV2(self.handle, repo))

# Python type for struct ghid.PRKeyV1
class PRKeyV1(go.GoClass):
	"""PRKeyV1 is a unique IDv1 key for PullRequest nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#pullrequest.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_PRKeyV1_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.ID = args[0]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.PRKeyV1{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.PRKeyV1 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ID(self):
		return _ghid.ghid_PRKeyV1_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_PRKeyV1_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_PRKeyV1_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_PRKeyV1_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_PRKeyV1_KeyV1(self.handle)
	def WithRepoV2(self, repo):
		"""WithRepoV2(long repo) object
		
		WithRepoV2 implements KeyV1NoRepo.
		"""
		return KeyV2(handle=_ghid.ghid_PRKeyV1_WithRepoV2(self.handle, repo))

# Python type for struct ghid.PRReviewThreadKeyV1
class PRReviewThreadKeyV1(go.GoClass):
	"""PRReviewThreadKeyV1 is a unique IDv1 key for PullRequestReviewThread nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#pullrequestreviewthread.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_PRReviewThreadKeyV1_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.ID = args[0]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
			if  1 < len(args):
				self.Vers = args[1]
			if "Vers" in kwargs:
				self.Vers = kwargs["Vers"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.PRReviewThreadKeyV1{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.PRReviewThreadKeyV1 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ID(self):
		return _ghid.ghid_PRReviewThreadKeyV1_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_PRReviewThreadKeyV1_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_PRReviewThreadKeyV1_ID_Set(self.handle, value)
	@property
	def Vers(self):
		return _ghid.ghid_PRReviewThreadKeyV1_Vers_Get(self.handle)
	@Vers.setter
	def Vers(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_PRReviewThreadKeyV1_Vers_Set(self.handle, value.handle)
		else:
			_ghid.ghid_PRReviewThreadKeyV1_Vers_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_PRReviewThreadKeyV1_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_PRReviewThreadKeyV1_KeyV1(self.handle)
	def WithRepoV2(self, repo):
		"""WithRepoV2(long repo) object
		
		WithRepoV2 implements KeyV1NoRepo.
		"""
		return KeyV2(handle=_ghid.ghid_PRReviewThreadKeyV1_WithRepoV2(self.handle, repo))

# Python type for struct ghid.ReleaseKeyV2
class ReleaseKeyV2(go.GoClass):
	"""ReleaseKeyV2 is a unique IDv2 key for Release nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#release.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_ReleaseKeyV2_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.RepoID = args[0]
			if "RepoID" in kwargs:
				self.RepoID = kwargs["RepoID"]
			if  1 < len(args):
				self.ID = args[1]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.ReleaseKeyV2{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.ReleaseKeyV2 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def RepoID(self):
		return _ghid.ghid_ReleaseKeyV2_RepoID_Get(self.handle)
	@RepoID.setter
	def RepoID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_ReleaseKeyV2_RepoID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_ReleaseKeyV2_RepoID_Set(self.handle, value)
	@property
	def ID(self):
		return _ghid.ghid_ReleaseKeyV2_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_ReleaseKeyV2_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_ReleaseKeyV2_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_ReleaseKeyV2_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_ReleaseKeyV2_KeyV1(self.handle)
	def KeyV2(self):
		"""KeyV2() []int
		
		KeyV2 implements KeyV2.
		"""
		return go.msgpack_RawMessage(handle=_ghid.ghid_ReleaseKeyV2_KeyV2(self.handle))

# Python type for struct ghid.IssueKeyV2
class IssueKeyV2(go.GoClass):
	"""IssueKeyV2 is a unique IDv2 key for Issue nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#issue.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_IssueKeyV2_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.RepoID = args[0]
			if "RepoID" in kwargs:
				self.RepoID = kwargs["RepoID"]
			if  1 < len(args):
				self.ID = args[1]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.IssueKeyV2{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.IssueKeyV2 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def RepoID(self):
		return _ghid.ghid_IssueKeyV2_RepoID_Get(self.handle)
	@RepoID.setter
	def RepoID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_IssueKeyV2_RepoID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_IssueKeyV2_RepoID_Set(self.handle, value)
	@property
	def ID(self):
		return _ghid.ghid_IssueKeyV2_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_IssueKeyV2_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_IssueKeyV2_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_IssueKeyV2_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_IssueKeyV2_KeyV1(self.handle)
	def KeyV2(self):
		"""KeyV2() []int
		
		KeyV2 implements KeyV2.
		"""
		return go.msgpack_RawMessage(handle=_ghid.ghid_IssueKeyV2_KeyV2(self.handle))

# Python type for struct ghid.LicenseKeyV2
class LicenseKeyV2(go.GoClass):
	"""LicenseKeyV2 is a unique IDv2 key for License nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#license.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_LicenseKeyV2_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.SpdxID = args[0]
			if "SpdxID" in kwargs:
				self.SpdxID = kwargs["SpdxID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.LicenseKeyV2{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.LicenseKeyV2 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def SpdxID(self):
		return _ghid.ghid_LicenseKeyV2_SpdxID_Get(self.handle)
	@SpdxID.setter
	def SpdxID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_LicenseKeyV2_SpdxID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_LicenseKeyV2_SpdxID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_LicenseKeyV2_Type(self.handle)
	def KeyV2(self):
		"""KeyV2() []int
		
		KeyV2 implements KeyV2.
		"""
		return go.msgpack_RawMessage(handle=_ghid.ghid_LicenseKeyV2_KeyV2(self.handle))

# Python type for struct ghid.MannequinKey
class MannequinKey(go.GoClass):
	"""MannequinKey is a unique key Mannequin Bot nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#mannequin.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_MannequinKey_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.ID = args[0]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.MannequinKey{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.MannequinKey ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ID(self):
		return _ghid.ghid_MannequinKey_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_MannequinKey_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_MannequinKey_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_MannequinKey_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_MannequinKey_KeyV1(self.handle)
	def KeyV2(self):
		"""KeyV2() []int
		
		KeyV2 implements KeyV2.
		"""
		return go.msgpack_RawMessage(handle=_ghid.ghid_MannequinKey_KeyV2(self.handle))

# Python type for struct ghid.PRReviewKeyV2
class PRReviewKeyV2(go.GoClass):
	"""PRReviewKeyV2 is a unique IDv2 key for PullRequestReview nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#pullrequestreview.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_PRReviewKeyV2_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.RepoID = args[0]
			if "RepoID" in kwargs:
				self.RepoID = kwargs["RepoID"]
			if  1 < len(args):
				self.ID = args[1]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.PRReviewKeyV2{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.PRReviewKeyV2 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def RepoID(self):
		return _ghid.ghid_PRReviewKeyV2_RepoID_Get(self.handle)
	@RepoID.setter
	def RepoID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_PRReviewKeyV2_RepoID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_PRReviewKeyV2_RepoID_Set(self.handle, value)
	@property
	def ID(self):
		return _ghid.ghid_PRReviewKeyV2_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_PRReviewKeyV2_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_PRReviewKeyV2_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_PRReviewKeyV2_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_PRReviewKeyV2_KeyV1(self.handle)
	def KeyV2(self):
		"""KeyV2() []int
		
		KeyV2 implements KeyV2.
		"""
		return go.msgpack_RawMessage(handle=_ghid.ghid_PRReviewKeyV2_KeyV2(self.handle))

# Python type for struct ghid.PRReviewThreadKeyV2
class PRReviewThreadKeyV2(go.GoClass):
	"""PRReviewThreadKeyV2 is a unique IDv2 key for PullRequestReviewThread nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#pullrequestreviewthread.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_PRReviewThreadKeyV2_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.RepoID = args[0]
			if "RepoID" in kwargs:
				self.RepoID = kwargs["RepoID"]
			if  1 < len(args):
				self.ID = args[1]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.PRReviewThreadKeyV2{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.PRReviewThreadKeyV2 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def RepoID(self):
		return _ghid.ghid_PRReviewThreadKeyV2_RepoID_Get(self.handle)
	@RepoID.setter
	def RepoID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_PRReviewThreadKeyV2_RepoID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_PRReviewThreadKeyV2_RepoID_Set(self.handle, value)
	@property
	def ID(self):
		return _ghid.ghid_PRReviewThreadKeyV2_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_PRReviewThreadKeyV2_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_PRReviewThreadKeyV2_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_PRReviewThreadKeyV2_Type(self.handle)
	def KeyV2(self):
		"""KeyV2() []int
		
		KeyV2 implements KeyV2.
		"""
		return go.msgpack_RawMessage(handle=_ghid.ghid_PRReviewThreadKeyV2_KeyV2(self.handle))

# Python type for struct ghid.CommitKey
class CommitKey(go.GoClass):
	"""CommitKey is a unique key for Commit nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#commit.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_CommitKey_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.RepoID = args[0]
			if "RepoID" in kwargs:
				self.RepoID = kwargs["RepoID"]
			if  1 < len(args):
				self.SHA = args[1]
			if "SHA" in kwargs:
				self.SHA = kwargs["SHA"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.CommitKey{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.CommitKey ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def RepoID(self):
		return _ghid.ghid_CommitKey_RepoID_Get(self.handle)
	@RepoID.setter
	def RepoID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_CommitKey_RepoID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_CommitKey_RepoID_Set(self.handle, value)
	@property
	def SHA(self):
		return _ghid.ghid_CommitKey_SHA_Get(self.handle)
	@SHA.setter
	def SHA(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_CommitKey_SHA_Set(self.handle, value.handle)
		else:
			_ghid.ghid_CommitKey_SHA_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_CommitKey_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_CommitKey_KeyV1(self.handle)
	def KeyV2(self):
		"""KeyV2() []int
		
		KeyV2 implements KeyV2.
		"""
		return go.msgpack_RawMessage(handle=_ghid.ghid_CommitKey_KeyV2(self.handle))

# Python type for struct ghid.OrgKey
class OrgKey(go.GoClass):
	"""OrgKey is a unique key for Organization nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#organization.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_OrgKey_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.ID = args[0]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.OrgKey{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.OrgKey ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ID(self):
		return _ghid.ghid_OrgKey_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_OrgKey_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_OrgKey_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_OrgKey_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_OrgKey_KeyV1(self.handle)
	def KeyV2(self):
		"""KeyV2() []int
		
		KeyV2 implements KeyV2.
		"""
		return go.msgpack_RawMessage(handle=_ghid.ghid_OrgKey_KeyV2(self.handle))

# Python type for struct ghid.PRReviewCommentKeyV2
class PRReviewCommentKeyV2(go.GoClass):
	"""PRReviewCommentKeyV2 is a unique IDv2 key for PullRequestReviewComment nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#pullrequestreviewcomment.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_PRReviewCommentKeyV2_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.RepoID = args[0]
			if "RepoID" in kwargs:
				self.RepoID = kwargs["RepoID"]
			if  1 < len(args):
				self.ID = args[1]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.PRReviewCommentKeyV2{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.PRReviewCommentKeyV2 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def RepoID(self):
		return _ghid.ghid_PRReviewCommentKeyV2_RepoID_Get(self.handle)
	@RepoID.setter
	def RepoID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_PRReviewCommentKeyV2_RepoID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_PRReviewCommentKeyV2_RepoID_Set(self.handle, value)
	@property
	def ID(self):
		return _ghid.ghid_PRReviewCommentKeyV2_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_PRReviewCommentKeyV2_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_PRReviewCommentKeyV2_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_PRReviewCommentKeyV2_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_PRReviewCommentKeyV2_KeyV1(self.handle)
	def KeyV2(self):
		"""KeyV2() []int
		
		KeyV2 implements KeyV2.
		"""
		return go.msgpack_RawMessage(handle=_ghid.ghid_PRReviewCommentKeyV2_KeyV2(self.handle))

# Python type for struct ghid.RepoKey
class RepoKey(go.GoClass):
	"""RepoKey is a unique key for Repository nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#repository.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_RepoKey_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.ID = args[0]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.RepoKey{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.RepoKey ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ID(self):
		return _ghid.ghid_RepoKey_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_RepoKey_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_RepoKey_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_RepoKey_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_RepoKey_KeyV1(self.handle)
	def KeyV2(self):
		"""KeyV2() []int
		
		KeyV2 implements KeyV2.
		"""
		return go.msgpack_RawMessage(handle=_ghid.ghid_RepoKey_KeyV2(self.handle))

# Python type for struct ghid.IssueCommentKeyV1
class IssueCommentKeyV1(go.GoClass):
	"""IssueCommentKeyV1 is a unique IDv1 key for IssueComment nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#issuecomment.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_IssueCommentKeyV1_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.ID = args[0]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.IssueCommentKeyV1{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.IssueCommentKeyV1 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ID(self):
		return _ghid.ghid_IssueCommentKeyV1_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_IssueCommentKeyV1_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_IssueCommentKeyV1_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_IssueCommentKeyV1_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_IssueCommentKeyV1_KeyV1(self.handle)
	def WithRepoV2(self, repo):
		"""WithRepoV2(long repo) object
		
		WithRepoV2 implements KeyV1NoRepo.
		"""
		return KeyV2(handle=_ghid.ghid_IssueCommentKeyV1_WithRepoV2(self.handle, repo))

# Python type for struct ghid.LabelKeyV1
class LabelKeyV1(go.GoClass):
	"""LabelKeyV1 is a unique IDv1 key for Label nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#label.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_LabelKeyV1_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.ID = args[0]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.LabelKeyV1{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.LabelKeyV1 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ID(self):
		return _ghid.ghid_LabelKeyV1_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_LabelKeyV1_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_LabelKeyV1_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_LabelKeyV1_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_LabelKeyV1_KeyV1(self.handle)
	def WithRepoV2(self, repo):
		"""WithRepoV2(long repo) object
		
		WithRepoV2 implements KeyV1NoRepo.
		"""
		return KeyV2(handle=_ghid.ghid_LabelKeyV1_WithRepoV2(self.handle, repo))

# Python type for struct ghid.LabelKeyV2
class LabelKeyV2(go.GoClass):
	"""LabelKeyV2 is a unique IDv2 key for Label nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#label.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_LabelKeyV2_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.RepoID = args[0]
			if "RepoID" in kwargs:
				self.RepoID = kwargs["RepoID"]
			if  1 < len(args):
				self.ID = args[1]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.LabelKeyV2{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.LabelKeyV2 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def RepoID(self):
		return _ghid.ghid_LabelKeyV2_RepoID_Get(self.handle)
	@RepoID.setter
	def RepoID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_LabelKeyV2_RepoID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_LabelKeyV2_RepoID_Set(self.handle, value)
	@property
	def ID(self):
		return _ghid.ghid_LabelKeyV2_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_LabelKeyV2_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_LabelKeyV2_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_LabelKeyV2_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_LabelKeyV2_KeyV1(self.handle)
	def KeyV2(self):
		"""KeyV2() []int
		
		KeyV2 implements KeyV2.
		"""
		return go.msgpack_RawMessage(handle=_ghid.ghid_LabelKeyV2_KeyV2(self.handle))

# Python type for struct ghid.RefKey
class RefKey(go.GoClass):
	"""RefKey is a unique key for Ref nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#ref.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_RefKey_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.RepoID = args[0]
			if "RepoID" in kwargs:
				self.RepoID = kwargs["RepoID"]
			if  1 < len(args):
				self.RefName = args[1]
			if "RefName" in kwargs:
				self.RefName = kwargs["RefName"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.RefKey{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.RefKey ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def RepoID(self):
		return _ghid.ghid_RefKey_RepoID_Get(self.handle)
	@RepoID.setter
	def RepoID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_RefKey_RepoID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_RefKey_RepoID_Set(self.handle, value)
	@property
	def RefName(self):
		return _ghid.ghid_RefKey_RefName_Get(self.handle)
	@RefName.setter
	def RefName(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_RefKey_RefName_Set(self.handle, value.handle)
		else:
			_ghid.ghid_RefKey_RefName_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_RefKey_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_RefKey_KeyV1(self.handle)
	def KeyV2(self):
		"""KeyV2() []int
		
		KeyV2 implements KeyV2.
		"""
		return go.msgpack_RawMessage(handle=_ghid.ghid_RefKey_KeyV2(self.handle))

# Python type for struct ghid.TagKey
class TagKey(go.GoClass):
	"""TagKey is a unique key for Tag nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#tag.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_TagKey_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.RepoID = args[0]
			if "RepoID" in kwargs:
				self.RepoID = kwargs["RepoID"]
			if  1 < len(args):
				self.SHA = args[1]
			if "SHA" in kwargs:
				self.SHA = kwargs["SHA"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.TagKey{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.TagKey ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def RepoID(self):
		return _ghid.ghid_TagKey_RepoID_Get(self.handle)
	@RepoID.setter
	def RepoID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_TagKey_RepoID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_TagKey_RepoID_Set(self.handle, value)
	@property
	def SHA(self):
		return _ghid.ghid_TagKey_SHA_Get(self.handle)
	@SHA.setter
	def SHA(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_TagKey_SHA_Set(self.handle, value.handle)
		else:
			_ghid.ghid_TagKey_SHA_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_TagKey_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_TagKey_KeyV1(self.handle)
	def KeyV2(self):
		"""KeyV2() []int
		
		KeyV2 implements KeyV2.
		"""
		return go.msgpack_RawMessage(handle=_ghid.ghid_TagKey_KeyV2(self.handle))

# Python type for struct ghid.TeamKeyV2
class TeamKeyV2(go.GoClass):
	"""TeamKeyV2 is a unique IDv2 key for Team nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#team.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_TeamKeyV2_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.OrgID = args[0]
			if "OrgID" in kwargs:
				self.OrgID = kwargs["OrgID"]
			if  1 < len(args):
				self.ID = args[1]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.TeamKeyV2{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.TeamKeyV2 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def OrgID(self):
		return _ghid.ghid_TeamKeyV2_OrgID_Get(self.handle)
	@OrgID.setter
	def OrgID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_TeamKeyV2_OrgID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_TeamKeyV2_OrgID_Set(self.handle, value)
	@property
	def ID(self):
		return _ghid.ghid_TeamKeyV2_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_TeamKeyV2_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_TeamKeyV2_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_TeamKeyV2_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_TeamKeyV2_KeyV1(self.handle)
	def KeyV2(self):
		"""KeyV2() []int
		
		KeyV2 implements KeyV2.
		"""
		return go.msgpack_RawMessage(handle=_ghid.ghid_TeamKeyV2_KeyV2(self.handle))

# Python type for struct ghid.BotKey
class BotKey(go.GoClass):
	"""BotKey is a unique key for Bot nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#bot.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_BotKey_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.ID = args[0]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.BotKey{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.BotKey ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ID(self):
		return _ghid.ghid_BotKey_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_BotKey_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_BotKey_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_BotKey_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_BotKey_KeyV1(self.handle)
	def KeyV2(self):
		"""KeyV2() []int
		
		KeyV2 implements KeyV2.
		"""
		return go.msgpack_RawMessage(handle=_ghid.ghid_BotKey_KeyV2(self.handle))

# Python type for struct ghid.IssueKeyV1
class IssueKeyV1(go.GoClass):
	"""IssueKeyV1 is a unique IDv1 key for Issue nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#issue.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_IssueKeyV1_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.ID = args[0]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.IssueKeyV1{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.IssueKeyV1 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ID(self):
		return _ghid.ghid_IssueKeyV1_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_IssueKeyV1_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_IssueKeyV1_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_IssueKeyV1_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_IssueKeyV1_KeyV1(self.handle)
	def WithRepoV2(self, repo):
		"""WithRepoV2(long repo) object
		
		WithRepoV2 implements KeyV1NoRepo.
		"""
		return KeyV2(handle=_ghid.ghid_IssueKeyV1_WithRepoV2(self.handle, repo))

# Python type for struct ghid.LicenseKeyV1
class LicenseKeyV1(go.GoClass):
	"""LicenseKeyV1 is a unique IDv1 key for License nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#license.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_LicenseKeyV1_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.ID = args[0]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.LicenseKeyV1{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.LicenseKeyV1 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ID(self):
		return _ghid.ghid_LicenseKeyV1_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_LicenseKeyV1_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_LicenseKeyV1_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_LicenseKeyV1_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_LicenseKeyV1_KeyV1(self.handle)

# Python type for struct ghid.ReleaseKeyV1
class ReleaseKeyV1(go.GoClass):
	"""ReleaseKeyV1 is a unique IDv1 key for Release nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#release.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_ReleaseKeyV1_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.ID = args[0]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.ReleaseKeyV1{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.ReleaseKeyV1 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ID(self):
		return _ghid.ghid_ReleaseKeyV1_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_ReleaseKeyV1_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_ReleaseKeyV1_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_ReleaseKeyV1_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_ReleaseKeyV1_KeyV1(self.handle)
	def WithRepoV2(self, repo):
		"""WithRepoV2(long repo) object
		
		WithRepoV2 implements KeyV1NoRepo.
		"""
		return KeyV2(handle=_ghid.ghid_ReleaseKeyV1_WithRepoV2(self.handle, repo))

# Python type for struct ghid.TeamKeyV1
class TeamKeyV1(go.GoClass):
	"""TeamKeyV1 is a unique IDv1 key for Team nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#team.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_TeamKeyV1_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.ID = args[0]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.TeamKeyV1{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.TeamKeyV1 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ID(self):
		return _ghid.ghid_TeamKeyV1_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_TeamKeyV1_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_TeamKeyV1_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_TeamKeyV1_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_TeamKeyV1_KeyV1(self.handle)
	def WithOrgV2(self, org):
		"""WithOrgV2(long org) object
		
		WithOrgV2 implements KeyV1NoOrg.
		"""
		return KeyV2(handle=_ghid.ghid_TeamKeyV1_WithOrgV2(self.handle, org))

# Python type for struct ghid.IssueCommentKeyV2
class IssueCommentKeyV2(go.GoClass):
	"""IssueCommentKeyV2 is a unique IDv2 key for IssueComment nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#issuecomment.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_IssueCommentKeyV2_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.RepoID = args[0]
			if "RepoID" in kwargs:
				self.RepoID = kwargs["RepoID"]
			if  1 < len(args):
				self.ID = args[1]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.IssueCommentKeyV2{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.IssueCommentKeyV2 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def RepoID(self):
		return _ghid.ghid_IssueCommentKeyV2_RepoID_Get(self.handle)
	@RepoID.setter
	def RepoID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_IssueCommentKeyV2_RepoID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_IssueCommentKeyV2_RepoID_Set(self.handle, value)
	@property
	def ID(self):
		return _ghid.ghid_IssueCommentKeyV2_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_IssueCommentKeyV2_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_IssueCommentKeyV2_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_IssueCommentKeyV2_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_IssueCommentKeyV2_KeyV1(self.handle)
	def KeyV2(self):
		"""KeyV2() []int
		
		KeyV2 implements KeyV2.
		"""
		return go.msgpack_RawMessage(handle=_ghid.ghid_IssueCommentKeyV2_KeyV2(self.handle))

# Python type for struct ghid.LangKey
class LangKey(go.GoClass):
	"""LangKey is a unique key for Language nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#language.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_LangKey_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.ID = args[0]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.LangKey{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.LangKey ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ID(self):
		return _ghid.ghid_LangKey_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_LangKey_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_LangKey_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_LangKey_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_LangKey_KeyV1(self.handle)
	def KeyV2(self):
		"""KeyV2() []int
		
		KeyV2 implements KeyV2.
		"""
		return go.msgpack_RawMessage(handle=_ghid.ghid_LangKey_KeyV2(self.handle))

# Python type for struct ghid.ProjectKeyV1
class ProjectKeyV1(go.GoClass):
	"""ProjectKeyV1 is a unique IDv1 key for Project nodes.\n\nSee https://docs.github.com/en/graphql/reference/objects#project.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_ghid.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_ghid.IncRef(self.handle)
		else:
			self.handle = _ghid.ghid_ProjectKeyV1_CTor()
			_ghid.IncRef(self.handle)
			if  0 < len(args):
				self.ID = args[0]
			if "ID" in kwargs:
				self.ID = kwargs["ID"]
	def __del__(self):
		_ghid.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.ProjectKeyV1{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ghid.ProjectKeyV1 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ID(self):
		return _ghid.ghid_ProjectKeyV1_ID_Get(self.handle)
	@ID.setter
	def ID(self, value):
		if isinstance(value, go.GoClass):
			_ghid.ghid_ProjectKeyV1_ID_Set(self.handle, value.handle)
		else:
			_ghid.ghid_ProjectKeyV1_ID_Set(self.handle, value)
	def Type(self):
		"""Type() str
		
		Type implements Key.
		"""
		return _ghid.ghid_ProjectKeyV1_Type(self.handle)
	def KeyV1(self):
		"""KeyV1() str
		
		KeyV1 implements KeyV1.
		"""
		return _ghid.ghid_ProjectKeyV1_KeyV1(self.handle)
	def WithRepoV2(self, repo):
		"""WithRepoV2(long repo) object
		
		WithRepoV2 implements KeyV1NoRepo.
		"""
		return KeyV2(handle=_ghid.ghid_ProjectKeyV1_WithRepoV2(self.handle, repo))


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---
def UpgradeKey(key, opts):
	"""UpgradeKey(object key, object opts) object, str"""
	return Key(handle=_ghid.ghid_UpgradeKey(key.handle, opts.handle))
def EncodeV1(key):
	"""EncodeV1(object key) str
	
	EncodeV1 encodes a IDv1-compatible node Key to a text format, as used for GitHub Node IDv1.
	"""
	return _ghid.ghid_EncodeV1(key.handle)
def PrefixesV2():
	"""PrefixesV2() object
	
	PrefixesV2 returns all known IDv2 prefixes and their mapping to GraphQL types.
	"""
	return Map_string_string(handle=_ghid.ghid_PrefixesV2())
def Upgrade(id, opts):
	"""Upgrade(str id, object opts) str, str
	
	Upgrade tries to upgrade GitHub Node ID to the latest version.
	Upgrade always returns a non-empty valid ID, even in case of a failure.
	An error is returned if the upgrade is possible, but not currently supported.
	
	Some IDv2 contain additional information that is not available in corresponding IDv1.
	UpgradeOpts are used in this case and provide an additional context.
	
	For example, PRKeyV1 does not contain a repository ID, which is required for PRKeyV2.
	Thus, to upgrade this key type, it's required to set RepoID in UpgradeOpts.
	"""
	return _ghid.ghid_Upgrade(id, opts.handle)
def Decode(id):
	"""Decode(str id) object, str"""
	return Key(handle=_ghid.ghid_Decode(id))
def DecodeV2(id):
	"""DecodeV2(str id) object, str"""
	return KeyV2(handle=_ghid.ghid_DecodeV2(id))
def EncodeV2(key):
	"""EncodeV2(object key) str, str
	
	EncodeV2 encodes a IDv2-compatible node Key to a text format, as used for GitHub Node IDv2.
	"""
	return _ghid.ghid_EncodeV2(key.handle)
def EncodeV2Raw(typePref, key):
	"""EncodeV2Raw(str typePref, []int key) str
	
	EncodeV2Raw encodes a node type and key payload in IDv2 format, as used for GitHub Node IDv2.
	
	This method should only be used for testing. Use EncodeV2 with a specific key struct type instead.
	"""
	return _ghid.ghid_EncodeV2Raw(typePref, key.handle)
def Type(id):
	"""Type(str id) str, str
	
	Type returns a GitHub node type for a given ID.
	
	Type names directly correspond to Node implementation in GraphQL API:
	https://docs.github.com/en/graphql/reference/interfaces#node.
	"""
	return _ghid.ghid_Type(id)
def NewKeyV1(typ, key):
	"""NewKeyV1(str typ, str key) object
	
	NewKeyV1 creates a custom KeyV1.
	Type and key can be arbitrary and are not verified by this function.
	"""
	return KeyV1(handle=_ghid.ghid_NewKeyV1(typ, key))
def NewKeyV2(typ, key):
	"""NewKeyV2(str typ, []int key) object
	
	NewKeyV2 creates a custom KeyV2.
	Type and key can be arbitrary and are not verified by this function.
	"""
	return KeyV2(handle=_ghid.ghid_NewKeyV2(typ, key.handle))
def DecodeV1(id):
	"""DecodeV1(str id) object, str"""
	return KeyV1(handle=_ghid.ghid_DecodeV1(id))
def EncodeV1Raw(typ, key):
	"""EncodeV1Raw(str typ, str key) str
	
	EncodeV1Raw encodes a node type and key in IDv1 format, as used for GitHub Node IDv1.
	
	This method should only be used for testing. Use EncodeV1 with a specific key struct type instead.
	"""
	return _ghid.ghid_EncodeV1Raw(typ, key)
def EncodeV2Obj(typePref, key):
	"""EncodeV2Obj(str typePref, object key) str, str
	
	EncodeV2Obj encodes a node type and key payload object in IDv2 format, as used for GitHub Node IDv2.
	
	This method should only be used for testing. Use EncodeV2 with a specific key struct type instead.
	"""
	return _ghid.ghid_EncodeV2Obj(typePref, key.handle)


