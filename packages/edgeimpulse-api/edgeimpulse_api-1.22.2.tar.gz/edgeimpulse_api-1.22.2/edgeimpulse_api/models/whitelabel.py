# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class Whitelabel(BaseModel):
    id: StrictInt = ...
    name: StrictStr = ...
    domain: StrictStr = ...
    owner_organization_id: Optional[StrictInt] = Field(None, alias="ownerOrganizationId")
    theme_id: StrictInt = Field(..., alias="themeId")
    identity_providers: List[StrictStr] = Field(..., alias="identityProviders")
    allow_password_auth: StrictBool = Field(..., alias="allowPasswordAuth")
    deployment_targets: List[StrictStr] = Field(..., alias="deploymentTargets")
    allow_signup: StrictBool = Field(..., alias="allowSignup")
    allow_free_projects: StrictBool = Field(..., alias="allowFreeProjects")
    expose_public_projects: Optional[StrictBool] = Field(None, alias="exposePublicProjects")
    __properties = ["id", "name", "domain", "ownerOrganizationId", "themeId", "identityProviders", "allowPasswordAuth", "deploymentTargets", "allowSignup", "allowFreeProjects", "exposePublicProjects"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Whitelabel:
        """Create an instance of Whitelabel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Whitelabel:
        """Create an instance of Whitelabel from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Whitelabel.parse_obj(obj)

        _obj = Whitelabel.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "domain": obj.get("domain"),
            "owner_organization_id": obj.get("ownerOrganizationId"),
            "theme_id": obj.get("themeId"),
            "identity_providers": obj.get("identityProviders"),
            "allow_password_auth": obj.get("allowPasswordAuth"),
            "deployment_targets": obj.get("deploymentTargets"),
            "allow_signup": obj.get("allowSignup"),
            "allow_free_projects": obj.get("allowFreeProjects"),
            "expose_public_projects": obj.get("exposePublicProjects")
        })
        return _obj

