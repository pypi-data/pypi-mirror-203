# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_auth_service.role_service_pb2 as role__service__pb2


class AdminRoleStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUser = channel.unary_unary(
                '/AdminRole/GetUser',
                request_serializer=role__service__pb2.GetUserRequest.SerializeToString,
                response_deserializer=role__service__pb2.GetUserResponse.FromString,
                )
        self.GetUserList = channel.unary_unary(
                '/AdminRole/GetUserList',
                request_serializer=role__service__pb2.GetUserListRequest.SerializeToString,
                response_deserializer=role__service__pb2.GetUserListResponse.FromString,
                )
        self.CreatePolicy = channel.unary_unary(
                '/AdminRole/CreatePolicy',
                request_serializer=role__service__pb2.CreatePolicyRequest.SerializeToString,
                response_deserializer=role__service__pb2.CreatePolicyResponse.FromString,
                )
        self.UpdatePolicy = channel.unary_unary(
                '/AdminRole/UpdatePolicy',
                request_serializer=role__service__pb2.UpdatePolicyRequest.SerializeToString,
                response_deserializer=role__service__pb2.UpdatePolicyResponse.FromString,
                )
        self.DeletePolicy = channel.unary_unary(
                '/AdminRole/DeletePolicy',
                request_serializer=role__service__pb2.DeletePolicyRequest.SerializeToString,
                response_deserializer=role__service__pb2.DeletePolicyResponse.FromString,
                )
        self.GetPolicy = channel.unary_unary(
                '/AdminRole/GetPolicy',
                request_serializer=role__service__pb2.GetPolicyRequest.SerializeToString,
                response_deserializer=role__service__pb2.GetPolicyResponse.FromString,
                )
        self.GetPolicyList = channel.unary_unary(
                '/AdminRole/GetPolicyList',
                request_serializer=role__service__pb2.GetPolicyListRequest.SerializeToString,
                response_deserializer=role__service__pb2.GetPolicyListResponse.FromString,
                )
        self.CheckAccess = channel.unary_unary(
                '/AdminRole/CheckAccess',
                request_serializer=role__service__pb2.CheckAccessRequest.SerializeToString,
                response_deserializer=role__service__pb2.CheckAccessResponse.FromString,
                )


class AdminRoleServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePolicy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePolicy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePolicy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPolicy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPolicyList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdminRoleServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=role__service__pb2.GetUserRequest.FromString,
                    response_serializer=role__service__pb2.GetUserResponse.SerializeToString,
            ),
            'GetUserList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserList,
                    request_deserializer=role__service__pb2.GetUserListRequest.FromString,
                    response_serializer=role__service__pb2.GetUserListResponse.SerializeToString,
            ),
            'CreatePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePolicy,
                    request_deserializer=role__service__pb2.CreatePolicyRequest.FromString,
                    response_serializer=role__service__pb2.CreatePolicyResponse.SerializeToString,
            ),
            'UpdatePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePolicy,
                    request_deserializer=role__service__pb2.UpdatePolicyRequest.FromString,
                    response_serializer=role__service__pb2.UpdatePolicyResponse.SerializeToString,
            ),
            'DeletePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePolicy,
                    request_deserializer=role__service__pb2.DeletePolicyRequest.FromString,
                    response_serializer=role__service__pb2.DeletePolicyResponse.SerializeToString,
            ),
            'GetPolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPolicy,
                    request_deserializer=role__service__pb2.GetPolicyRequest.FromString,
                    response_serializer=role__service__pb2.GetPolicyResponse.SerializeToString,
            ),
            'GetPolicyList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPolicyList,
                    request_deserializer=role__service__pb2.GetPolicyListRequest.FromString,
                    response_serializer=role__service__pb2.GetPolicyListResponse.SerializeToString,
            ),
            'CheckAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckAccess,
                    request_deserializer=role__service__pb2.CheckAccessRequest.FromString,
                    response_serializer=role__service__pb2.CheckAccessResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AdminRole', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AdminRole(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminRole/GetUser',
            role__service__pb2.GetUserRequest.SerializeToString,
            role__service__pb2.GetUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminRole/GetUserList',
            role__service__pb2.GetUserListRequest.SerializeToString,
            role__service__pb2.GetUserListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreatePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminRole/CreatePolicy',
            role__service__pb2.CreatePolicyRequest.SerializeToString,
            role__service__pb2.CreatePolicyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdatePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminRole/UpdatePolicy',
            role__service__pb2.UpdatePolicyRequest.SerializeToString,
            role__service__pb2.UpdatePolicyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeletePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminRole/DeletePolicy',
            role__service__pb2.DeletePolicyRequest.SerializeToString,
            role__service__pb2.DeletePolicyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminRole/GetPolicy',
            role__service__pb2.GetPolicyRequest.SerializeToString,
            role__service__pb2.GetPolicyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPolicyList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminRole/GetPolicyList',
            role__service__pb2.GetPolicyListRequest.SerializeToString,
            role__service__pb2.GetPolicyListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminRole/CheckAccess',
            role__service__pb2.CheckAccessRequest.SerializeToString,
            role__service__pb2.CheckAccessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
