# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_auth_service.oauth_service_pb2 as oauth__service__pb2


class GoogleOAuthStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetProviderLoginURL = channel.unary_unary(
                '/GoogleOAuth/GetProviderLoginURL',
                request_serializer=oauth__service__pb2.GetProviderLoginURLRequest.SerializeToString,
                response_deserializer=oauth__service__pb2.GetProviderLoginURLResponse.FromString,
                )
        self.Login = channel.unary_unary(
                '/GoogleOAuth/Login',
                request_serializer=oauth__service__pb2.OAuthLoginRequest.SerializeToString,
                response_deserializer=oauth__service__pb2.OAuthLoginResponse.FromString,
                )
        self.AttachAccountToUser = channel.unary_unary(
                '/GoogleOAuth/AttachAccountToUser',
                request_serializer=oauth__service__pb2.AttachAccountToUserRequest.SerializeToString,
                response_deserializer=oauth__service__pb2.AttachAccountToUserResponse.FromString,
                )
        self.DetachAccountFromUser = channel.unary_unary(
                '/GoogleOAuth/DetachAccountFromUser',
                request_serializer=oauth__service__pb2.DetachAccountFromUserRequest.SerializeToString,
                response_deserializer=oauth__service__pb2.DetachAccountFromUserResponse.FromString,
                )


class GoogleOAuthServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetProviderLoginURL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AttachAccountToUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetachAccountFromUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GoogleOAuthServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetProviderLoginURL': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProviderLoginURL,
                    request_deserializer=oauth__service__pb2.GetProviderLoginURLRequest.FromString,
                    response_serializer=oauth__service__pb2.GetProviderLoginURLResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=oauth__service__pb2.OAuthLoginRequest.FromString,
                    response_serializer=oauth__service__pb2.OAuthLoginResponse.SerializeToString,
            ),
            'AttachAccountToUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AttachAccountToUser,
                    request_deserializer=oauth__service__pb2.AttachAccountToUserRequest.FromString,
                    response_serializer=oauth__service__pb2.AttachAccountToUserResponse.SerializeToString,
            ),
            'DetachAccountFromUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DetachAccountFromUser,
                    request_deserializer=oauth__service__pb2.DetachAccountFromUserRequest.FromString,
                    response_serializer=oauth__service__pb2.DetachAccountFromUserResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GoogleOAuth', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GoogleOAuth(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetProviderLoginURL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GoogleOAuth/GetProviderLoginURL',
            oauth__service__pb2.GetProviderLoginURLRequest.SerializeToString,
            oauth__service__pb2.GetProviderLoginURLResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GoogleOAuth/Login',
            oauth__service__pb2.OAuthLoginRequest.SerializeToString,
            oauth__service__pb2.OAuthLoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AttachAccountToUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GoogleOAuth/AttachAccountToUser',
            oauth__service__pb2.AttachAccountToUserRequest.SerializeToString,
            oauth__service__pb2.AttachAccountToUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetachAccountFromUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GoogleOAuth/DetachAccountFromUser',
            oauth__service__pb2.DetachAccountFromUserRequest.SerializeToString,
            oauth__service__pb2.DetachAccountFromUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class YandexOAuthStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetProviderLoginURL = channel.unary_unary(
                '/YandexOAuth/GetProviderLoginURL',
                request_serializer=oauth__service__pb2.GetProviderLoginURLRequest.SerializeToString,
                response_deserializer=oauth__service__pb2.GetProviderLoginURLResponse.FromString,
                )
        self.Login = channel.unary_unary(
                '/YandexOAuth/Login',
                request_serializer=oauth__service__pb2.OAuthLoginRequest.SerializeToString,
                response_deserializer=oauth__service__pb2.OAuthLoginResponse.FromString,
                )
        self.AttachAccountToUser = channel.unary_unary(
                '/YandexOAuth/AttachAccountToUser',
                request_serializer=oauth__service__pb2.AttachAccountToUserRequest.SerializeToString,
                response_deserializer=oauth__service__pb2.AttachAccountToUserResponse.FromString,
                )
        self.DetachAccountFromUser = channel.unary_unary(
                '/YandexOAuth/DetachAccountFromUser',
                request_serializer=oauth__service__pb2.DetachAccountFromUserRequest.SerializeToString,
                response_deserializer=oauth__service__pb2.DetachAccountFromUserResponse.FromString,
                )


class YandexOAuthServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetProviderLoginURL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AttachAccountToUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetachAccountFromUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_YandexOAuthServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetProviderLoginURL': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProviderLoginURL,
                    request_deserializer=oauth__service__pb2.GetProviderLoginURLRequest.FromString,
                    response_serializer=oauth__service__pb2.GetProviderLoginURLResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=oauth__service__pb2.OAuthLoginRequest.FromString,
                    response_serializer=oauth__service__pb2.OAuthLoginResponse.SerializeToString,
            ),
            'AttachAccountToUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AttachAccountToUser,
                    request_deserializer=oauth__service__pb2.AttachAccountToUserRequest.FromString,
                    response_serializer=oauth__service__pb2.AttachAccountToUserResponse.SerializeToString,
            ),
            'DetachAccountFromUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DetachAccountFromUser,
                    request_deserializer=oauth__service__pb2.DetachAccountFromUserRequest.FromString,
                    response_serializer=oauth__service__pb2.DetachAccountFromUserResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'YandexOAuth', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class YandexOAuth(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetProviderLoginURL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/YandexOAuth/GetProviderLoginURL',
            oauth__service__pb2.GetProviderLoginURLRequest.SerializeToString,
            oauth__service__pb2.GetProviderLoginURLResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/YandexOAuth/Login',
            oauth__service__pb2.OAuthLoginRequest.SerializeToString,
            oauth__service__pb2.OAuthLoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AttachAccountToUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/YandexOAuth/AttachAccountToUser',
            oauth__service__pb2.AttachAccountToUserRequest.SerializeToString,
            oauth__service__pb2.AttachAccountToUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetachAccountFromUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/YandexOAuth/DetachAccountFromUser',
            oauth__service__pb2.DetachAccountFromUserRequest.SerializeToString,
            oauth__service__pb2.DetachAccountFromUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
