# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_auth_service.auth_service_pb2 as auth__service__pb2


class AuthStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/Auth/Login',
                request_serializer=auth__service__pb2.LoginRequest.SerializeToString,
                response_deserializer=auth__service__pb2.LoginResponse.FromString,
                )
        self.RefreshToken = channel.unary_unary(
                '/Auth/RefreshToken',
                request_serializer=auth__service__pb2.RefreshTokenRequest.SerializeToString,
                response_deserializer=auth__service__pb2.RefreshTokenResponse.FromString,
                )
        self.Logout = channel.unary_unary(
                '/Auth/Logout',
                request_serializer=auth__service__pb2.LogoutRequest.SerializeToString,
                response_deserializer=auth__service__pb2.LogoutResponse.FromString,
                )
        self.LogoutOther = channel.unary_unary(
                '/Auth/LogoutOther',
                request_serializer=auth__service__pb2.LogoutOtherRequest.SerializeToString,
                response_deserializer=auth__service__pb2.LogoutOtherResponse.FromString,
                )
        self.UpdatePassword = channel.unary_unary(
                '/Auth/UpdatePassword',
                request_serializer=auth__service__pb2.UpdateUserPasswordRequest.SerializeToString,
                response_deserializer=auth__service__pb2.UpdateUserPasswordResponse.FromString,
                )
        self.UpdateEmail = channel.unary_unary(
                '/Auth/UpdateEmail',
                request_serializer=auth__service__pb2.UpdateUserEmailRequest.SerializeToString,
                response_deserializer=auth__service__pb2.UpdateUserEmailResponse.FromString,
                )
        self.CheckToken = channel.unary_unary(
                '/Auth/CheckToken',
                request_serializer=auth__service__pb2.CheckTokenRequest.SerializeToString,
                response_deserializer=auth__service__pb2.CheckTokenResponse.FromString,
                )
        self.CheckServiceToken = channel.unary_unary(
                '/Auth/CheckServiceToken',
                request_serializer=auth__service__pb2.CheckServiceTokenRequest.SerializeToString,
                response_deserializer=auth__service__pb2.CheckServiceTokenResponse.FromString,
                )


class AuthServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefreshToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogoutOther(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEmail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckServiceToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=auth__service__pb2.LoginRequest.FromString,
                    response_serializer=auth__service__pb2.LoginResponse.SerializeToString,
            ),
            'RefreshToken': grpc.unary_unary_rpc_method_handler(
                    servicer.RefreshToken,
                    request_deserializer=auth__service__pb2.RefreshTokenRequest.FromString,
                    response_serializer=auth__service__pb2.RefreshTokenResponse.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=auth__service__pb2.LogoutRequest.FromString,
                    response_serializer=auth__service__pb2.LogoutResponse.SerializeToString,
            ),
            'LogoutOther': grpc.unary_unary_rpc_method_handler(
                    servicer.LogoutOther,
                    request_deserializer=auth__service__pb2.LogoutOtherRequest.FromString,
                    response_serializer=auth__service__pb2.LogoutOtherResponse.SerializeToString,
            ),
            'UpdatePassword': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePassword,
                    request_deserializer=auth__service__pb2.UpdateUserPasswordRequest.FromString,
                    response_serializer=auth__service__pb2.UpdateUserPasswordResponse.SerializeToString,
            ),
            'UpdateEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEmail,
                    request_deserializer=auth__service__pb2.UpdateUserEmailRequest.FromString,
                    response_serializer=auth__service__pb2.UpdateUserEmailResponse.SerializeToString,
            ),
            'CheckToken': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckToken,
                    request_deserializer=auth__service__pb2.CheckTokenRequest.FromString,
                    response_serializer=auth__service__pb2.CheckTokenResponse.SerializeToString,
            ),
            'CheckServiceToken': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckServiceToken,
                    request_deserializer=auth__service__pb2.CheckServiceTokenRequest.FromString,
                    response_serializer=auth__service__pb2.CheckServiceTokenResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Auth', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Auth(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Auth/Login',
            auth__service__pb2.LoginRequest.SerializeToString,
            auth__service__pb2.LoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RefreshToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Auth/RefreshToken',
            auth__service__pb2.RefreshTokenRequest.SerializeToString,
            auth__service__pb2.RefreshTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Auth/Logout',
            auth__service__pb2.LogoutRequest.SerializeToString,
            auth__service__pb2.LogoutResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LogoutOther(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Auth/LogoutOther',
            auth__service__pb2.LogoutOtherRequest.SerializeToString,
            auth__service__pb2.LogoutOtherResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdatePassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Auth/UpdatePassword',
            auth__service__pb2.UpdateUserPasswordRequest.SerializeToString,
            auth__service__pb2.UpdateUserPasswordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Auth/UpdateEmail',
            auth__service__pb2.UpdateUserEmailRequest.SerializeToString,
            auth__service__pb2.UpdateUserEmailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Auth/CheckToken',
            auth__service__pb2.CheckTokenRequest.SerializeToString,
            auth__service__pb2.CheckTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckServiceToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Auth/CheckServiceToken',
            auth__service__pb2.CheckServiceTokenRequest.SerializeToString,
            auth__service__pb2.CheckServiceTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
